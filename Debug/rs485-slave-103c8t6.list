
rs485-slave-103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005324  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b00  08005b00  000202e0  2**0
                  CONTENTS
  4 .ARM          00000000  08005b00  08005b00  000202e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b00  08005b00  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  08005b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c5c  200002e0  08005df0  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f3c  08005df0  00022f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000120bb  00000000  00000000  00020309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034bd  00000000  00000000  000323c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00035888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  00036a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce65  00000000  00000000  00037b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ec2  00000000  00000000  00054965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fac9  00000000  00000000  0006a827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa2f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d00  00000000  00000000  000fa340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002e0 	.word	0x200002e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08005418 	.word	0x08005418

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002e4 	.word	0x200002e4
 8000148:	08005418 	.word	0x08005418

0800014c <COMMANDHANDLER_run>:

void COMMANDHANDLER_init(void) {}

void COMMANDHANDLER_deinit(void) {}

void COMMANDHANDLER_run(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// Handle RS485 Message
	if(RS485_receive(&COMMANDHANDLER_rxRs485Message)){
 8000150:	480f      	ldr	r0, [pc, #60]	; (8000190 <COMMANDHANDLER_run+0x44>)
 8000152:	f001 f829 	bl	80011a8 <RS485_receive>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d018      	beq.n	800018e <COMMANDHANDLER_run+0x42>
		if(!COMMANDHANDLER_isRs485MessageValid(&COMMANDHANDLER_rxRs485Message)){
 800015c:	480c      	ldr	r0, [pc, #48]	; (8000190 <COMMANDHANDLER_run+0x44>)
 800015e:	f000 f819 	bl	8000194 <COMMANDHANDLER_isRs485MessageValid>
 8000162:	4603      	mov	r3, r0
 8000164:	f083 0301 	eor.w	r3, r3, #1
 8000168:	b2db      	uxtb	r3, r3
 800016a:	2b00      	cmp	r3, #0
 800016c:	d10e      	bne.n	800018c <COMMANDHANDLER_run+0x40>
			return;
		}
		switch (COMMANDHANDLER_rxRs485Message.messageId) {
 800016e:	4b08      	ldr	r3, [pc, #32]	; (8000190 <COMMANDHANDLER_run+0x44>)
 8000170:	78db      	ldrb	r3, [r3, #3]
 8000172:	2b01      	cmp	r3, #1
 8000174:	d002      	beq.n	800017c <COMMANDHANDLER_run+0x30>
 8000176:	2b03      	cmp	r3, #3
 8000178:	d004      	beq.n	8000184 <COMMANDHANDLER_run+0x38>
				break;
			case COMMANDHANDLER_RFID_485_MESSAGE_ID_REQUEST_UPDATE:
				COMMANDHANDLER_handleRequestRFIDUpdate(&COMMANDHANDLER_rxRs485Message);
				break;
			default:
				break;
 800017a:	e008      	b.n	800018e <COMMANDHANDLER_run+0x42>
				COMMANDHANDLER_handleRequestRFIDStatus(&COMMANDHANDLER_rxRs485Message);
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <COMMANDHANDLER_run+0x44>)
 800017e:	f000 f829 	bl	80001d4 <COMMANDHANDLER_handleRequestRFIDStatus>
				break;
 8000182:	e004      	b.n	800018e <COMMANDHANDLER_run+0x42>
				COMMANDHANDLER_handleRequestRFIDUpdate(&COMMANDHANDLER_rxRs485Message);
 8000184:	4802      	ldr	r0, [pc, #8]	; (8000190 <COMMANDHANDLER_run+0x44>)
 8000186:	f000 f84a 	bl	800021e <COMMANDHANDLER_handleRequestRFIDUpdate>
				break;
 800018a:	e000      	b.n	800018e <COMMANDHANDLER_run+0x42>
			return;
 800018c:	bf00      	nop
		}
	}
}
 800018e:	bd80      	pop	{r7, pc}
 8000190:	200002fc 	.word	0x200002fc

08000194 <COMMANDHANDLER_isRs485MessageValid>:

static bool COMMANDHANDLER_isRs485MessageValid(RS485_Message *message){
 8000194:	b580      	push	{r7, lr}
 8000196:	b084      	sub	sp, #16
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	uint8_t nodeId = DIPSWITCH_get();
 800019c:	f000 fa0a 	bl	80005b4 <DIPSWITCH_get>
 80001a0:	4603      	mov	r3, r0
 80001a2:	73fb      	strb	r3, [r7, #15]
	if(message->networkId != COMMANDHANDLER_RFID_485_NETWORK_ID){
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d001      	beq.n	80001b0 <COMMANDHANDLER_isRs485MessageValid+0x1c>
		return false;
 80001ac:	2300      	movs	r3, #0
 80001ae:	e00d      	b.n	80001cc <COMMANDHANDLER_isRs485MessageValid+0x38>
	}
	if(message->srcNode != COMMANDHANDLER_RFID_485_MASTER_NODE_ID){
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	785b      	ldrb	r3, [r3, #1]
 80001b4:	2bff      	cmp	r3, #255	; 0xff
 80001b6:	d001      	beq.n	80001bc <COMMANDHANDLER_isRs485MessageValid+0x28>
		return false;
 80001b8:	2300      	movs	r3, #0
 80001ba:	e007      	b.n	80001cc <COMMANDHANDLER_isRs485MessageValid+0x38>
	}
	if(message->desNode != nodeId){
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	789b      	ldrb	r3, [r3, #2]
 80001c0:	7bfa      	ldrb	r2, [r7, #15]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d001      	beq.n	80001ca <COMMANDHANDLER_isRs485MessageValid+0x36>
		return false;
 80001c6:	2300      	movs	r3, #0
 80001c8:	e000      	b.n	80001cc <COMMANDHANDLER_isRs485MessageValid+0x38>
	}
	return true;
 80001ca:	2301      	movs	r3, #1
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3710      	adds	r7, #16
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <COMMANDHANDLER_handleRequestRFIDStatus>:

static void COMMANDHANDLER_handleRequestRFIDStatus(RS485_Message *message){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	uint8_t nodeId = DIPSWITCH_get();
 80001dc:	f000 f9ea 	bl	80005b4 <DIPSWITCH_get>
 80001e0:	4603      	mov	r3, r0
 80001e2:	77fb      	strb	r3, [r7, #31]
	if(!RFID_isPlaced()){
 80001e4:	f000 faac 	bl	8000740 <RFID_isPlaced>
 80001e8:	4603      	mov	r3, r0
 80001ea:	f083 0301 	eor.w	r3, r3, #1
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d005      	beq.n	8000200 <COMMANDHANDLER_handleRequestRFIDStatus+0x2c>
		COMMANDHANDLER_sendRFIDStatusResponse(nodeId, NULL);
 80001f4:	7ffb      	ldrb	r3, [r7, #31]
 80001f6:	2100      	movs	r1, #0
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f852 	bl	80002a2 <COMMANDHANDLER_sendRFIDStatusResponse>
 80001fe:	e00b      	b.n	8000218 <COMMANDHANDLER_handleRequestRFIDStatus+0x44>
		return;
	}
	RFID_t rfid;
	RFID_get(&rfid);
 8000200:	f107 030c 	add.w	r3, r7, #12
 8000204:	4618      	mov	r0, r3
 8000206:	f000 fa81 	bl	800070c <RFID_get>
	COMMANDHANDLER_sendRFIDStatusResponse(nodeId, &rfid);
 800020a:	f107 020c 	add.w	r2, r7, #12
 800020e:	7ffb      	ldrb	r3, [r7, #31]
 8000210:	4611      	mov	r1, r2
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f845 	bl	80002a2 <COMMANDHANDLER_sendRFIDStatusResponse>
}
 8000218:	3720      	adds	r7, #32
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}

0800021e <COMMANDHANDLER_handleRequestRFIDUpdate>:

static void COMMANDHANDLER_handleRequestRFIDUpdate(RS485_Message *message){
 800021e:	b580      	push	{r7, lr}
 8000220:	b088      	sub	sp, #32
 8000222:	af00      	add	r7, sp, #0
 8000224:	6078      	str	r0, [r7, #4]
	RFID_t rfid;
	rfid.id_len = message->data[0];
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	799b      	ldrb	r3, [r3, #6]
 800022a:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < rfid.id_len; ++i) {
 800022c:	2300      	movs	r3, #0
 800022e:	77fb      	strb	r3, [r7, #31]
 8000230:	e00c      	b.n	800024c <COMMANDHANDLER_handleRequestRFIDUpdate+0x2e>
		rfid.id[i] = message->data[1 + i];
 8000232:	7ffb      	ldrb	r3, [r7, #31]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	7ffb      	ldrb	r3, [r7, #31]
 8000238:	6879      	ldr	r1, [r7, #4]
 800023a:	440a      	add	r2, r1
 800023c:	7992      	ldrb	r2, [r2, #6]
 800023e:	3320      	adds	r3, #32
 8000240:	443b      	add	r3, r7
 8000242:	f803 2c18 	strb.w	r2, [r3, #-24]
	for (uint8_t i = 0; i < rfid.id_len; ++i) {
 8000246:	7ffb      	ldrb	r3, [r7, #31]
 8000248:	3301      	adds	r3, #1
 800024a:	77fb      	strb	r3, [r7, #31]
 800024c:	7dfb      	ldrb	r3, [r7, #23]
 800024e:	7ffa      	ldrb	r2, [r7, #31]
 8000250:	429a      	cmp	r2, r3
 8000252:	d3ee      	bcc.n	8000232 <COMMANDHANDLER_handleRequestRFIDUpdate+0x14>
	}
	rfid.code = message->data[rfid.id_len + 1];
 8000254:	7dfb      	ldrb	r3, [r7, #23]
 8000256:	3301      	adds	r3, #1
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	4413      	add	r3, r2
 800025c:	799b      	ldrb	r3, [r3, #6]
 800025e:	763b      	strb	r3, [r7, #24]
	rfid.type = message->data[rfid.id_len + 2];
 8000260:	7dfb      	ldrb	r3, [r7, #23]
 8000262:	3302      	adds	r3, #2
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	4413      	add	r3, r2
 8000268:	799b      	ldrb	r3, [r3, #6]
 800026a:	767b      	strb	r3, [r7, #25]
	rfid.isUsed = message->data[rfid.id_len + 3];
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	3303      	adds	r3, #3
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	4413      	add	r3, r2
 8000274:	799b      	ldrb	r3, [r3, #6]
 8000276:	76bb      	strb	r3, [r7, #26]
	RFID_Error_t error = RFID_set(&rfid);
 8000278:	f107 0308 	add.w	r3, r7, #8
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fa6b 	bl	8000758 <RFID_set>
 8000282:	4603      	mov	r3, r0
 8000284:	77bb      	strb	r3, [r7, #30]

	uint8_t nodeId = DIPSWITCH_get();
 8000286:	f000 f995 	bl	80005b4 <DIPSWITCH_get>
 800028a:	4603      	mov	r3, r0
 800028c:	777b      	strb	r3, [r7, #29]
	COMMANDHANDLER_sendRFIDUpdateResponse(nodeId, error);
 800028e:	7fba      	ldrb	r2, [r7, #30]
 8000290:	7f7b      	ldrb	r3, [r7, #29]
 8000292:	4611      	mov	r1, r2
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f8ed 	bl	8000474 <COMMANDHANDLER_sendRFIDUpdateResponse>
}
 800029a:	bf00      	nop
 800029c:	3720      	adds	r7, #32
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <COMMANDHANDLER_sendRFIDStatusResponse>:

/**
 * @defgroup Response Function
 */

static void COMMANDHANDLER_sendRFIDStatusResponse(uint8_t nodeId, RFID_t *rfid){
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b0c6      	sub	sp, #280	; 0x118
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	4602      	mov	r2, r0
 80002aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002ae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80002b2:	6019      	str	r1, [r3, #0]
 80002b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002b8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80002bc:	701a      	strb	r2, [r3, #0]
	RS485_Message message;
	message.networkId = COMMANDHANDLER_RFID_485_NETWORK_ID;
 80002be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002c6:	2201      	movs	r2, #1
 80002c8:	701a      	strb	r2, [r3, #0]
	message.srcNode = nodeId;
 80002ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002d2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80002d6:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 80002da:	7812      	ldrb	r2, [r2, #0]
 80002dc:	705a      	strb	r2, [r3, #1]
	message.desNode = COMMANDHANDLER_RFID_485_MASTER_NODE_ID;
 80002de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002e6:	22ff      	movs	r2, #255	; 0xff
 80002e8:	709a      	strb	r2, [r3, #2]
	message.messageId = COMMANDHANDLER_RFID_485_MESSAGE_ID_RESPONSE_STATUS;
 80002ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002f2:	2202      	movs	r2, #2
 80002f4:	70da      	strb	r2, [r3, #3]

	// Has RFID
	if(rfid != NULL){
 80002f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	f000 80a1 	beq.w	8000448 <COMMANDHANDLER_sendRFIDStatusResponse+0x1a6>
		message.resultCode = RS485_RESULT_CODE_SUCCESS;
 8000306:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800030a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800030e:	2200      	movs	r2, #0
 8000310:	711a      	strb	r2, [r3, #4]
		message.dataLen = 0;
 8000312:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000316:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800031a:	2200      	movs	r2, #0
 800031c:	715a      	strb	r2, [r3, #5]
		message.data[message.dataLen++] =rfid->id_len;
 800031e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000322:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000326:	795b      	ldrb	r3, [r3, #5]
 8000328:	1c5a      	adds	r2, r3, #1
 800032a:	b2d1      	uxtb	r1, r2
 800032c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000330:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000334:	7151      	strb	r1, [r2, #5]
 8000336:	4619      	mov	r1, r3
 8000338:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800033c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	7bda      	ldrb	r2, [r3, #15]
 8000344:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000348:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800034c:	440b      	add	r3, r1
 800034e:	719a      	strb	r2, [r3, #6]
		for (int i = 0; i < rfid->id_len; i++) {
 8000350:	2300      	movs	r3, #0
 8000352:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000356:	e020      	b.n	800039a <COMMANDHANDLER_sendRFIDStatusResponse+0xf8>
			message.data[message.dataLen++] = rfid->id[i];
 8000358:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800035c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000360:	795b      	ldrb	r3, [r3, #5]
 8000362:	1c5a      	adds	r2, r3, #1
 8000364:	b2d1      	uxtb	r1, r2
 8000366:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800036a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800036e:	7151      	strb	r1, [r2, #5]
 8000370:	4619      	mov	r1, r3
 8000372:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000376:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000380:	4413      	add	r3, r2
 8000382:	781a      	ldrb	r2, [r3, #0]
 8000384:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000388:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800038c:	440b      	add	r3, r1
 800038e:	719a      	strb	r2, [r3, #6]
		for (int i = 0; i < rfid->id_len; i++) {
 8000390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000394:	3301      	adds	r3, #1
 8000396:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800039a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800039e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	7bdb      	ldrb	r3, [r3, #15]
 80003a6:	461a      	mov	r2, r3
 80003a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80003ac:	4293      	cmp	r3, r2
 80003ae:	dbd3      	blt.n	8000358 <COMMANDHANDLER_sendRFIDStatusResponse+0xb6>
		}
		message.data[message.dataLen++] =rfid->code;
 80003b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003b8:	795b      	ldrb	r3, [r3, #5]
 80003ba:	1c5a      	adds	r2, r3, #1
 80003bc:	b2d1      	uxtb	r1, r2
 80003be:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80003c2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80003c6:	7151      	strb	r1, [r2, #5]
 80003c8:	4619      	mov	r1, r3
 80003ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	7c1a      	ldrb	r2, [r3, #16]
 80003d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003de:	440b      	add	r3, r1
 80003e0:	719a      	strb	r2, [r3, #6]
		message.data[message.dataLen++] =rfid->type;
 80003e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	1c5a      	adds	r2, r3, #1
 80003ee:	b2d1      	uxtb	r1, r2
 80003f0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80003f4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80003f8:	7151      	strb	r1, [r2, #5]
 80003fa:	4619      	mov	r1, r3
 80003fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000400:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	7c5a      	ldrb	r2, [r3, #17]
 8000408:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800040c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000410:	440b      	add	r3, r1
 8000412:	719a      	strb	r2, [r3, #6]
		message.data[message.dataLen++] =rfid->isUsed;
 8000414:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000418:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800041c:	795b      	ldrb	r3, [r3, #5]
 800041e:	1c5a      	adds	r2, r3, #1
 8000420:	b2d1      	uxtb	r1, r2
 8000422:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000426:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800042a:	7151      	strb	r1, [r2, #5]
 800042c:	4619      	mov	r1, r3
 800042e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000432:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	7c9a      	ldrb	r2, [r3, #18]
 800043a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800043e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000442:	440b      	add	r3, r1
 8000444:	719a      	strb	r2, [r3, #6]
 8000446:	e00b      	b.n	8000460 <COMMANDHANDLER_sendRFIDStatusResponse+0x1be>
	}else{
		message.resultCode = RS485_RESULT_CODE_FAILED;
 8000448:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800044c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000450:	2201      	movs	r2, #1
 8000452:	711a      	strb	r2, [r3, #4]
		message.dataLen = 0;
 8000454:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000458:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800045c:	2200      	movs	r2, #0
 800045e:	715a      	strb	r2, [r3, #5]
	}
	RS485_send(&message);
 8000460:	f107 030c 	add.w	r3, r7, #12
 8000464:	4618      	mov	r0, r3
 8000466:	f000 fe87 	bl	8001178 <RS485_send>
}
 800046a:	bf00      	nop
 800046c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <COMMANDHANDLER_sendRFIDUpdateResponse>:

static void COMMANDHANDLER_sendRFIDUpdateResponse(uint8_t nodeId, RFID_Error_t error){
 8000474:	b580      	push	{r7, lr}
 8000476:	b0c4      	sub	sp, #272	; 0x110
 8000478:	af00      	add	r7, sp, #0
 800047a:	4602      	mov	r2, r0
 800047c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000480:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000484:	701a      	strb	r2, [r3, #0]
 8000486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800048a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800048e:	460a      	mov	r2, r1
 8000490:	701a      	strb	r2, [r3, #0]
	RS485_Message message;
	message.networkId = COMMANDHANDLER_RFID_485_NETWORK_ID;
 8000492:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
	message.srcNode = nodeId;
 800049e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80004a6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80004aa:	f2a2 1209 	subw	r2, r2, #265	; 0x109
 80004ae:	7812      	ldrb	r2, [r2, #0]
 80004b0:	705a      	strb	r2, [r3, #1]
	message.desNode = COMMANDHANDLER_RFID_485_MASTER_NODE_ID;
 80004b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80004ba:	22ff      	movs	r2, #255	; 0xff
 80004bc:	709a      	strb	r2, [r3, #2]
	message.messageId = COMMANDHANDLER_RFID_485_MESSAGE_ID_RESPONSE_UPDATE;
 80004be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80004c6:	2204      	movs	r2, #4
 80004c8:	70da      	strb	r2, [r3, #3]
	message.resultCode = RS485_RESULT_CODE_SUCCESS;
 80004ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80004d2:	2200      	movs	r2, #0
 80004d4:	711a      	strb	r2, [r3, #4]
	message.dataLen = 1;
 80004d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80004de:	2201      	movs	r2, #1
 80004e0:	715a      	strb	r2, [r3, #5]
	message.data[0] = error;
 80004e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80004ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80004ee:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80004f2:	7812      	ldrb	r2, [r2, #0]
 80004f4:	719a      	strb	r2, [r3, #6]
	RS485_send(&message);
 80004f6:	f107 0308 	add.w	r3, r7, #8
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fe3c 	bl	8001178 <RS485_send>
}
 8000500:	bf00      	nop
 8000502:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <CRC_calculate>:
    0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d,
    0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74,
    0x2e93, 0x3eb2, 0x0ed1, 0x1ef0,
};

uint16_t CRC_calculate(uint8_t *data, uint32_t dataLen) {
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  uint8_t counter;
  uint16_t checkSum = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	81bb      	strh	r3, [r7, #12]
  for (counter = 0; counter < dataLen; counter++)
 800051a:	2300      	movs	r3, #0
 800051c:	73fb      	strb	r3, [r7, #15]
 800051e:	e016      	b.n	800054e <CRC_calculate+0x42>
    checkSum =
        (checkSum << 8) ^ CRC_16Acorn[((checkSum >> 8) ^ *data++) & 0x00FF];
 8000520:	89bb      	ldrh	r3, [r7, #12]
 8000522:	021b      	lsls	r3, r3, #8
 8000524:	b21a      	sxth	r2, r3
 8000526:	89bb      	ldrh	r3, [r7, #12]
 8000528:	0a1b      	lsrs	r3, r3, #8
 800052a:	b29b      	uxth	r3, r3
 800052c:	4618      	mov	r0, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	1c59      	adds	r1, r3, #1
 8000532:	6079      	str	r1, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4043      	eors	r3, r0
 8000538:	b2db      	uxtb	r3, r3
 800053a:	490a      	ldr	r1, [pc, #40]	; (8000564 <CRC_calculate+0x58>)
 800053c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000540:	b21b      	sxth	r3, r3
 8000542:	4053      	eors	r3, r2
 8000544:	b21b      	sxth	r3, r3
    checkSum =
 8000546:	81bb      	strh	r3, [r7, #12]
  for (counter = 0; counter < dataLen; counter++)
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	3301      	adds	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	d8e4      	bhi.n	8000520 <CRC_calculate+0x14>
  return checkSum;
 8000556:	89bb      	ldrh	r3, [r7, #12]
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	08005890 	.word	0x08005890

08000568 <DIPSWITCH_init>:
static GPIO_info_t DIPSWITCH_gpioTable[] = {
	{GPIOB, { GPIO_PIN_13, GPIO_MODE_INPUT, GPIO_PULLUP, GPIO_SPEED_FREQ_LOW}},
	{GPIOB, { GPIO_PIN_14, GPIO_MODE_INPUT, GPIO_PULLUP, GPIO_SPEED_FREQ_LOW}},
};

void DIPSWITCH_init(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	for (int dipswitchIdx = 0; dipswitchIdx < NB_ELEMENT(DIPSWITCH_gpioTable); ++dipswitchIdx) {
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	e015      	b.n	80005a0 <DIPSWITCH_init+0x38>
		HAL_GPIO_Init(DIPSWITCH_gpioTable[dipswitchIdx].port, &DIPSWITCH_gpioTable[dipswitchIdx].init_info);
 8000574:	490e      	ldr	r1, [pc, #56]	; (80005b0 <DIPSWITCH_init+0x48>)
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4613      	mov	r3, r2
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	440b      	add	r3, r1
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4613      	mov	r3, r2
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <DIPSWITCH_init+0x48>)
 8000590:	4413      	add	r3, r2
 8000592:	3304      	adds	r3, #4
 8000594:	4619      	mov	r1, r3
 8000596:	f001 fc41 	bl	8001e1c <HAL_GPIO_Init>
	for (int dipswitchIdx = 0; dipswitchIdx < NB_ELEMENT(DIPSWITCH_gpioTable); ++dipswitchIdx) {
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d9e6      	bls.n	8000574 <DIPSWITCH_init+0xc>
	}
}
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000000 	.word	0x20000000

080005b4 <DIPSWITCH_get>:

void DIPSWTICH_deinit(void){

}

uint8_t DIPSWITCH_get(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
	for (int dipswitchIdx = 0; dipswitchIdx < NB_ELEMENT(DIPSWITCH_gpioTable); ++dipswitchIdx) {
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	e027      	b.n	8000614 <DIPSWITCH_get+0x60>
		ret |= (uint8_t)(!HAL_GPIO_ReadPin(DIPSWITCH_gpioTable[dipswitchIdx].port, DIPSWITCH_gpioTable[dipswitchIdx].init_info.Pin)) << dipswitchIdx;
 80005c4:	4917      	ldr	r1, [pc, #92]	; (8000624 <DIPSWITCH_get+0x70>)
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	4613      	mov	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4413      	add	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	440b      	add	r3, r1
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	4913      	ldr	r1, [pc, #76]	; (8000624 <DIPSWITCH_get+0x70>)
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	3304      	adds	r3, #4
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4619      	mov	r1, r3
 80005ea:	f001 fd9b 	bl	8002124 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf0c      	ite	eq
 80005f4:	2301      	moveq	r3, #1
 80005f6:	2300      	movne	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	b25a      	sxtb	r2, r3
 8000604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000608:	4313      	orrs	r3, r2
 800060a:	b25b      	sxtb	r3, r3
 800060c:	71fb      	strb	r3, [r7, #7]
	for (int dipswitchIdx = 0; dipswitchIdx < NB_ELEMENT(DIPSWITCH_gpioTable); ++dipswitchIdx) {
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d9d4      	bls.n	80005c4 <DIPSWITCH_get+0x10>
	}
	return ret;
 800061a:	79fb      	ldrb	r3, [r7, #7]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000

08000628 <LOADCELL_writeIo>:

float LOADCELL_get(void){
	return LOADCELL_hx711.get_units();
}

void LOADCELL_writeIo(uint8_t io, uint8_t level){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(LOADCELL_ioTable[io].port, LOADCELL_ioTable[io].init_info.Pin, (GPIO_PinState)level);
 8000638:	79fa      	ldrb	r2, [r7, #7]
 800063a:	490c      	ldr	r1, [pc, #48]	; (800066c <LOADCELL_writeIo+0x44>)
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	4908      	ldr	r1, [pc, #32]	; (800066c <LOADCELL_writeIo+0x44>)
 800064c:	4613      	mov	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4413      	add	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	440b      	add	r3, r1
 8000656:	3304      	adds	r3, #4
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	b29b      	uxth	r3, r3
 800065c:	79ba      	ldrb	r2, [r7, #6]
 800065e:	4619      	mov	r1, r3
 8000660:	f001 fd77 	bl	8002152 <HAL_GPIO_WritePin>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028

08000670 <_Z41__static_initialization_and_destruction_0ii>:
	}
}


#ifdef __cplusplus
}
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d107      	bne.n	8000690 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000686:	4293      	cmp	r3, r2
 8000688:	d102      	bne.n	8000690 <_Z41__static_initialization_and_destruction_0ii+0x20>
static HX711 LOADCELL_hx711;
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800068c:	f003 fc00 	bl	8003e90 <_ZN5HX711C1Ev>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d107      	bne.n	80006a6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069c:	4293      	cmp	r3, r2
 800069e:	d102      	bne.n	80006a6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80006a2:	f003 fc18 	bl	8003ed6 <_ZN5HX711D1Ev>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000404 	.word	0x20000404

080006b4 <_GLOBAL__sub_I_LOADCELL_init>:
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ffd7 	bl	8000670 <_Z41__static_initialization_and_destruction_0ii>
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <_GLOBAL__sub_D_LOADCELL_init>:
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff ffcf 	bl	8000670 <_Z41__static_initialization_and_destruction_0ii>
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <RFID_init>:
			.reset = RFID_portInterfaceReset
		},
	},
};

void RFID_init(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	HAL_GPIO_Init(RFID_ioReset.port, &RFID_ioReset.init_info);
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <RFID_init+0x20>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4906      	ldr	r1, [pc, #24]	; (80006f8 <RFID_init+0x24>)
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fb9c 	bl	8001e1c <HAL_GPIO_Init>
	RFID_portInterfaceReset(true);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 f9ab 	bl	8000a40 <RFID_portInterfaceReset>
	PN532_begin(&RFID_handle.pn532_handle);
 80006ea:	4804      	ldr	r0, [pc, #16]	; (80006fc <RFID_init+0x28>)
 80006ec:	f003 fc3a 	bl	8003f64 <PN532_begin>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000050 	.word	0x20000050
 80006f8:	20000054 	.word	0x20000054
 80006fc:	20000064 	.word	0x20000064

08000700 <RFID_run>:

void RFID_run(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	RFID_runById();
 8000704:	f000 f892 	bl	800082c <RFID_runById>
}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}

0800070c <RFID_get>:


void RFID_get(RFID_t * rfid){
 800070c:	b4b0      	push	{r4, r5, r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	memcpy(rfid, &RFID_handle.rfid, sizeof(RFID_t));
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <RFID_get+0x30>)
 8000718:	3367      	adds	r3, #103	; 0x67
 800071a:	681d      	ldr	r5, [r3, #0]
 800071c:	685c      	ldr	r4, [r3, #4]
 800071e:	6898      	ldr	r0, [r3, #8]
 8000720:	68d9      	ldr	r1, [r3, #12]
 8000722:	6015      	str	r5, [r2, #0]
 8000724:	6054      	str	r4, [r2, #4]
 8000726:	6090      	str	r0, [r2, #8]
 8000728:	60d1      	str	r1, [r2, #12]
 800072a:	8a19      	ldrh	r1, [r3, #16]
 800072c:	7c9b      	ldrb	r3, [r3, #18]
 800072e:	8211      	strh	r1, [r2, #16]
 8000730:	7493      	strb	r3, [r2, #18]
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	bcb0      	pop	{r4, r5, r7}
 800073a:	4770      	bx	lr
 800073c:	20000064 	.word	0x20000064

08000740 <RFID_isPlaced>:

bool RFID_isPlaced(){
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
	return RFID_handle.isPlaced;
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <RFID_isPlaced+0x14>)
 8000746:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
}
 800074a:	4618      	mov	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000064 	.word	0x20000064

08000758 <RFID_set>:

void RFID_clearDetected(){
	RFID_handle.isDetected = false;
}

RFID_Error_t RFID_set(RFID_t * rfid){
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af02      	add	r7, sp, #8
 800075e:	6078      	str	r0, [r7, #4]
	// Check RFID is available
	if(!RFID_handle.isPlaced){
 8000760:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <RFID_set+0xc8>)
 8000762:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000766:	f083 0301 	eor.w	r3, r3, #1
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <RFID_set+0x1c>
		return RFID_ERROR_NOT_AVAILABLE;
 8000770:	2370      	movs	r3, #112	; 0x70
 8000772:	e051      	b.n	8000818 <RFID_set+0xc0>
	}
	// Check RFID uid is matched
	if(rfid->id_len != RFID_handle.rfid.id_len){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7bda      	ldrb	r2, [r3, #15]
 8000778:	4b29      	ldr	r3, [pc, #164]	; (8000820 <RFID_set+0xc8>)
 800077a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800077e:	429a      	cmp	r2, r3
 8000780:	d001      	beq.n	8000786 <RFID_set+0x2e>
		return RFID_ERROR_INVALID_FORMAT;
 8000782:	2371      	movs	r3, #113	; 0x71
 8000784:	e048      	b.n	8000818 <RFID_set+0xc0>
	}
	if(memcmp(rfid->id, RFID_handle.rfid.id, rfid->id_len) != 0){
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7bdb      	ldrb	r3, [r3, #15]
 800078c:	461a      	mov	r2, r3
 800078e:	4925      	ldr	r1, [pc, #148]	; (8000824 <RFID_set+0xcc>)
 8000790:	f004 f962 	bl	8004a58 <memcmp>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <RFID_set+0x46>
		return RFID_ERROR_ID_NOT_MATCHED;
 800079a:	2372      	movs	r3, #114	; 0x72
 800079c:	e03c      	b.n	8000818 <RFID_set+0xc0>
	}
	uint8_t writeData[16] = {0};
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
	RFID_buildToBlockData(rfid, writeData, sizeof(writeData));
 80007ae:	f107 0308 	add.w	r3, r7, #8
 80007b2:	2210      	movs	r2, #16
 80007b4:	4619      	mov	r1, r3
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f956 	bl	8000a68 <RFID_buildToBlockData>
	if(!PN532_readPassiveTargetID(&RFID_handle, PN532_MIFARE_ISO14443A, rfid->id, &rfid->id_len, 50)){
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	330f      	adds	r3, #15
 80007c2:	2132      	movs	r1, #50	; 0x32
 80007c4:	9100      	str	r1, [sp, #0]
 80007c6:	2100      	movs	r1, #0
 80007c8:	4815      	ldr	r0, [pc, #84]	; (8000820 <RFID_set+0xc8>)
 80007ca:	f003 fcf3 	bl	80041b4 <PN532_readPassiveTargetID>
 80007ce:	4603      	mov	r3, r0
 80007d0:	f083 0301 	eor.w	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <RFID_set+0x86>
		return RFID_ERROR_NOT_AVAILABLE;
 80007da:	2370      	movs	r3, #112	; 0x70
 80007dc:	e01c      	b.n	8000818 <RFID_set+0xc0>
	}
	if(!PN532_mifareclassic_AuthenticateBlock(&RFID_handle, rfid->id, rfid->id_len, RFID_PN532_DATA_BLOCK, 1, RFID_key)){
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	7bda      	ldrb	r2, [r3, #15]
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <RFID_set+0xd0>)
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	2301      	movs	r3, #1
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2308      	movs	r3, #8
 80007ee:	480c      	ldr	r0, [pc, #48]	; (8000820 <RFID_set+0xc8>)
 80007f0:	f003 fd5a 	bl	80042a8 <PN532_mifareclassic_AuthenticateBlock>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d101      	bne.n	80007fe <RFID_set+0xa6>
		return RFID_ERROR_AUTHEN_FAILED;
 80007fa:	2373      	movs	r3, #115	; 0x73
 80007fc:	e00c      	b.n	8000818 <RFID_set+0xc0>
	}
	if(!PN532_mifareclassic_WriteDataBlock(&RFID_handle, RFID_PN532_DATA_BLOCK , writeData)){
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	461a      	mov	r2, r3
 8000804:	2108      	movs	r1, #8
 8000806:	4806      	ldr	r0, [pc, #24]	; (8000820 <RFID_set+0xc8>)
 8000808:	f003 fe1b 	bl	8004442 <PN532_mifareclassic_WriteDataBlock>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d101      	bne.n	8000816 <RFID_set+0xbe>
		return RFID_ERROR_CANNOT_WRITE;
 8000812:	2374      	movs	r3, #116	; 0x74
 8000814:	e000      	b.n	8000818 <RFID_set+0xc0>
	}
	return RFID_SUCCESS;
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000064 	.word	0x20000064
 8000824:	200000cb 	.word	0x200000cb
 8000828:	08005a90 	.word	0x08005a90

0800082c <RFID_runById>:
		HAL_Delay(1000);
		RFID_set(&rfid);
	}
}

static void RFID_runById(){
 800082c:	b5b0      	push	{r4, r5, r7, lr}
 800082e:	b08e      	sub	sp, #56	; 0x38
 8000830:	af02      	add	r7, sp, #8
	uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer to store the returned UID
 8000832:	4a4c      	ldr	r2, [pc, #304]	; (8000964 <RFID_runById+0x138>)
 8000834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000838:	e892 0003 	ldmia.w	r2, {r0, r1}
 800083c:	6018      	str	r0, [r3, #0]
 800083e:	3304      	adds	r3, #4
 8000840:	8019      	strh	r1, [r3, #0]
 8000842:	3302      	adds	r3, #2
 8000844:	0c0a      	lsrs	r2, r1, #16
 8000846:	701a      	strb	r2, [r3, #0]
	uint8_t uidLength;                        // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
	uint8_t readBlockData[16] = {0};
 8000848:	2300      	movs	r3, #0
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	f107 0318 	add.w	r3, r7, #24
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
	if(!PN532_readPassiveTargetID(&RFID_handle, PN532_MIFARE_ISO14443A, uid, &uidLength, 100)){
 8000858:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800085c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000860:	2164      	movs	r1, #100	; 0x64
 8000862:	9100      	str	r1, [sp, #0]
 8000864:	2100      	movs	r1, #0
 8000866:	4840      	ldr	r0, [pc, #256]	; (8000968 <RFID_runById+0x13c>)
 8000868:	f003 fca4 	bl	80041b4 <PN532_readPassiveTargetID>
 800086c:	4603      	mov	r3, r0
 800086e:	f083 0301 	eor.w	r3, r3, #1
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d008      	beq.n	800088a <RFID_runById+0x5e>
		RFID_handle.isPlaced = false;
 8000878:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <RFID_runById+0x13c>)
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
		RFID_handle.rfid.code = RFID_ERROR_NOT_AVAILABLE;
 8000880:	4b39      	ldr	r3, [pc, #228]	; (8000968 <RFID_runById+0x13c>)
 8000882:	2270      	movs	r2, #112	; 0x70
 8000884:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		return;
 8000888:	e068      	b.n	800095c <RFID_runById+0x130>
	}
	if(!RFID_handle.isPlaced){
 800088a:	4b37      	ldr	r3, [pc, #220]	; (8000968 <RFID_runById+0x13c>)
 800088c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000890:	f083 0301 	eor.w	r3, r3, #1
 8000894:	b2db      	uxtb	r3, r3
 8000896:	2b00      	cmp	r3, #0
 8000898:	d003      	beq.n	80008a2 <RFID_runById+0x76>
		RFID_handle.isDetected = true;
 800089a:	4b33      	ldr	r3, [pc, #204]	; (8000968 <RFID_runById+0x13c>)
 800089c:	2201      	movs	r2, #1
 800089e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	}
	RFID_handle.isPlaced = true;
 80008a2:	4b31      	ldr	r3, [pc, #196]	; (8000968 <RFID_runById+0x13c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	if(!PN532_mifareclassic_AuthenticateBlock(&RFID_handle, uid, uidLength, RFID_PN532_DATA_BLOCK, 1, RFID_key)){
 80008aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80008ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80008b2:	4b2e      	ldr	r3, [pc, #184]	; (800096c <RFID_runById+0x140>)
 80008b4:	9301      	str	r3, [sp, #4]
 80008b6:	2301      	movs	r3, #1
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	2308      	movs	r3, #8
 80008bc:	482a      	ldr	r0, [pc, #168]	; (8000968 <RFID_runById+0x13c>)
 80008be:	f003 fcf3 	bl	80042a8 <PN532_mifareclassic_AuthenticateBlock>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d104      	bne.n	80008d2 <RFID_runById+0xa6>
		RFID_handle.rfid.code = RFID_ERROR_AUTHEN_FAILED;
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <RFID_runById+0x13c>)
 80008ca:	2273      	movs	r2, #115	; 0x73
 80008cc:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		return;
 80008d0:	e044      	b.n	800095c <RFID_runById+0x130>
	}
	if(!PN532_mifareclassic_ReadDataBlock(&RFID_handle, RFID_PN532_DATA_BLOCK, readBlockData)){
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	461a      	mov	r2, r3
 80008d8:	2108      	movs	r1, #8
 80008da:	4823      	ldr	r0, [pc, #140]	; (8000968 <RFID_runById+0x13c>)
 80008dc:	f003 fd6e 	bl	80043bc <PN532_mifareclassic_ReadDataBlock>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d104      	bne.n	80008f0 <RFID_runById+0xc4>
		RFID_handle.rfid.code = RFID_ERROR_CANNOT_READ;
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <RFID_runById+0x13c>)
 80008e8:	2275      	movs	r2, #117	; 0x75
 80008ea:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		return;
 80008ee:	e035      	b.n	800095c <RFID_runById+0x130>
	}
	// Assign uuid to RFID
	RFID_t rfid;
	rfid.id_len = uidLength;
 80008f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008f4:	73fb      	strb	r3, [r7, #15]
	memcpy(rfid.id, uid, uidLength);
 80008f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008fa:	461a      	mov	r2, r3
 80008fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000900:	463b      	mov	r3, r7
 8000902:	4618      	mov	r0, r3
 8000904:	f004 f8b8 	bl	8004a78 <memcpy>

	// Parse RFID
	if(!RFID_parseFromBlockData(readBlockData, sizeof(readBlockData), &rfid)){
 8000908:	463a      	mov	r2, r7
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2110      	movs	r1, #16
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f8f3 	bl	8000afc <RFID_parseFromBlockData>
 8000916:	4603      	mov	r3, r0
 8000918:	f083 0301 	eor.w	r3, r3, #1
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d008      	beq.n	8000934 <RFID_runById+0x108>
		RFID_handle.rfid.code = RFID_ERROR_INVALID_FORMAT;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <RFID_runById+0x13c>)
 8000924:	2271      	movs	r2, #113	; 0x71
 8000926:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
		RFID_handle.error = RFID_ERROR_INVALID_FORMAT;
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <RFID_runById+0x13c>)
 800092c:	2271      	movs	r2, #113	; 0x71
 800092e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
		return;
 8000932:	e013      	b.n	800095c <RFID_runById+0x130>
	}
	rfid.code = RFID_SUCCESS;
 8000934:	2300      	movs	r3, #0
 8000936:	743b      	strb	r3, [r7, #16]
	RFID_handle.error = RFID_SUCCESS;
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <RFID_runById+0x13c>)
 800093a:	2200      	movs	r2, #0
 800093c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	RFID_handle.rfid = rfid;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <RFID_runById+0x13c>)
 8000942:	f103 0567 	add.w	r5, r3, #103	; 0x67
 8000946:	463c      	mov	r4, r7
 8000948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800094a:	6028      	str	r0, [r5, #0]
 800094c:	6069      	str	r1, [r5, #4]
 800094e:	60aa      	str	r2, [r5, #8]
 8000950:	60eb      	str	r3, [r5, #12]
 8000952:	8823      	ldrh	r3, [r4, #0]
 8000954:	78a2      	ldrb	r2, [r4, #2]
 8000956:	822b      	strh	r3, [r5, #16]
 8000958:	4613      	mov	r3, r2
 800095a:	74ab      	strb	r3, [r5, #18]
}
 800095c:	3730      	adds	r7, #48	; 0x30
 800095e:	46bd      	mov	sp, r7
 8000960:	bdb0      	pop	{r4, r5, r7, pc}
 8000962:	bf00      	nop
 8000964:	08005440 	.word	0x08005440
 8000968:	20000064 	.word	0x20000064
 800096c:	08005a90 	.word	0x08005a90

08000970 <RFID_portInterfaceWrite>:


static void RFID_portInterfaceWrite(const uint8_t *data, const uint32_t data_len){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	UART_send(RFID_UART, data, data_len);
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	6879      	ldr	r1, [r7, #4]
 800097e:	2001      	movs	r0, #1
 8000980:	f000 fad4 	bl	8000f2c <UART_send>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <RFID_portInterfaceRead>:

static void RFID_portInterfaceRead(uint8_t * data, uint32_t data_len, uint32_t timeout){
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
	uint32_t readDataLen = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]
	uint32_t timestamp = HAL_GetTick();
 800099c:	f001 f850 	bl	8001a40 <HAL_GetTick>
 80009a0:	6138      	str	r0, [r7, #16]
	while(1){
		if(HAL_GetTick() - timestamp > timeout){
 80009a2:	f001 f84d 	bl	8001a40 <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d316      	bcc.n	80009e0 <RFID_portInterfaceRead+0x54>
			break;
		}
		if(UART_receive_available(RFID_UART)){
 80009b2:	2001      	movs	r0, #1
 80009b4:	f000 fad4 	bl	8000f60 <UART_receive_available>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0f1      	beq.n	80009a2 <RFID_portInterfaceRead+0x16>
			data[readDataLen++] = UART_receive_data(RFID_UART);
 80009be:	2001      	movs	r0, #1
 80009c0:	f000 fae4 	bl	8000f8c <UART_receive_data>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4619      	mov	r1, r3
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	617a      	str	r2, [r7, #20]
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	4413      	add	r3, r2
 80009d2:	b2ca      	uxtb	r2, r1
 80009d4:	701a      	strb	r2, [r3, #0]
			if(readDataLen >= data_len){
 80009d6:	697a      	ldr	r2, [r7, #20]
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d202      	bcs.n	80009e4 <RFID_portInterfaceRead+0x58>
		if(HAL_GetTick() - timestamp > timeout){
 80009de:	e7e0      	b.n	80009a2 <RFID_portInterfaceRead+0x16>
			break;
 80009e0:	bf00      	nop
 80009e2:	e000      	b.n	80009e6 <RFID_portInterfaceRead+0x5a>
				break;
 80009e4:	bf00      	nop
			}
		}
	}
}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <RFID_portInterfaceIsAvailable>:

static bool RFID_portInterfaceIsAvailable(void){
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0
	return UART_receive_available(RFID_UART);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f000 fab4 	bl	8000f60 <UART_receive_available>
 80009f8:	4603      	mov	r3, r0
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	bd80      	pop	{r7, pc}

080009fe <RFID_portInterfaceCleanup>:

static void RFID_portInterfaceCleanup(void){
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
	const uint32_t timeout = 50; // 50ms
 8000a04:	2332      	movs	r3, #50	; 0x32
 8000a06:	607b      	str	r3, [r7, #4]
	uint32_t startTime = HAL_GetTick();
 8000a08:	f001 f81a 	bl	8001a40 <HAL_GetTick>
 8000a0c:	6038      	str	r0, [r7, #0]
	while(1){
		if(UART_receive_available(RFID_UART)){
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f000 faa6 	bl	8000f60 <UART_receive_available>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d00b      	beq.n	8000a32 <RFID_portInterfaceCleanup+0x34>
			UART_receive_data(RFID_UART);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f000 fab6 	bl	8000f8c <UART_receive_data>
		}else{
			break;
		}

		if(HAL_GetTick() - startTime > timeout){
 8000a20:	f001 f80e 	bl	8001a40 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d302      	bcc.n	8000a36 <RFID_portInterfaceCleanup+0x38>
		if(UART_receive_available(RFID_UART)){
 8000a30:	e7ed      	b.n	8000a0e <RFID_portInterfaceCleanup+0x10>
			break;
 8000a32:	bf00      	nop
 8000a34:	e000      	b.n	8000a38 <RFID_portInterfaceCleanup+0x3a>
			break;
 8000a36:	bf00      	nop
		}
	}
	return true;
 8000a38:	bf00      	nop
}
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <RFID_portInterfaceReset>:

static void RFID_portInterfaceReset(bool enable){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RFID_ioReset.port, RFID_ioReset.init_info.Pin, enable);
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <RFID_portInterfaceReset+0x24>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <RFID_portInterfaceReset+0x24>)
 8000a50:	6852      	ldr	r2, [r2, #4]
 8000a52:	b291      	uxth	r1, r2
 8000a54:	79fa      	ldrb	r2, [r7, #7]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fb7b 	bl	8002152 <HAL_GPIO_WritePin>
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000050 	.word	0x20000050

08000a68 <RFID_buildToBlockData>:

static void RFID_buildToBlockData(RFID_t *rfid, uint8_t *data, uint32_t data_len){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
	uint8_t data_len_out = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	75fb      	strb	r3, [r7, #23]
	data[data_len_out++] = rfid->type;
 8000a78:	7dfb      	ldrb	r3, [r7, #23]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	75fa      	strb	r2, [r7, #23]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4413      	add	r3, r2
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	7c52      	ldrb	r2, [r2, #17]
 8000a88:	701a      	strb	r2, [r3, #0]
	data[data_len_out++] = rfid->isUsed;
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	75fa      	strb	r2, [r7, #23]
 8000a90:	461a      	mov	r2, r3
 8000a92:	68bb      	ldr	r3, [r7, #8]
 8000a94:	4413      	add	r3, r2
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	7c92      	ldrb	r2, [r2, #18]
 8000a9a:	701a      	strb	r2, [r3, #0]

	uint16_t dataKey = RFID_getBlockDataKey(data, data_len_out);
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	68b8      	ldr	r0, [r7, #8]
 8000aa2:	f000 f86d 	bl	8000b80 <RFID_getBlockDataKey>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	82bb      	strh	r3, [r7, #20]
	data[data_len_out++] = (dataKey >> 8 & 0xFF);
 8000aaa:	8abb      	ldrh	r3, [r7, #20]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	1c59      	adds	r1, r3, #1
 8000ab4:	75f9      	strb	r1, [r7, #23]
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	440b      	add	r3, r1
 8000abc:	b2d2      	uxtb	r2, r2
 8000abe:	701a      	strb	r2, [r3, #0]
	data[data_len_out++] = dataKey & 0xFF;
 8000ac0:	7dfb      	ldrb	r3, [r7, #23]
 8000ac2:	1c5a      	adds	r2, r3, #1
 8000ac4:	75fa      	strb	r2, [r7, #23]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	4413      	add	r3, r2
 8000acc:	8aba      	ldrh	r2, [r7, #20]
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	701a      	strb	r2, [r3, #0]

	uint8_t idKey = RFID_getIdKey(rfid->id, rfid->id_len);
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	7bdb      	ldrb	r3, [r3, #15]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4610      	mov	r0, r2
 8000adc:	f000 f87f 	bl	8000bde <RFID_getIdKey>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	74fb      	strb	r3, [r7, #19]
	data[data_len_out++] = idKey;
 8000ae4:	7dfb      	ldrb	r3, [r7, #23]
 8000ae6:	1c5a      	adds	r2, r3, #1
 8000ae8:	75fa      	strb	r2, [r7, #23]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4413      	add	r3, r2
 8000af0:	7cfa      	ldrb	r2, [r7, #19]
 8000af2:	701a      	strb	r2, [r3, #0]
}
 8000af4:	bf00      	nop
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <RFID_parseFromBlockData>:

static bool RFID_parseFromBlockData(uint8_t *data, uint32_t data_len, RFID_t *rfid){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	if(data_len != 16){
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	2b10      	cmp	r3, #16
 8000b0c:	d001      	beq.n	8000b12 <RFID_parseFromBlockData+0x16>
		return false;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e032      	b.n	8000b78 <RFID_parseFromBlockData+0x7c>
	}
	rfid->type = data[0];
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	781a      	ldrb	r2, [r3, #0]
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	745a      	strb	r2, [r3, #17]
	rfid->isUsed = data[1];
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	785a      	ldrb	r2, [r3, #1]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	749a      	strb	r2, [r3, #18]

	uint16_t dataKey = RFID_getBlockDataKey(data, 2);
 8000b22:	2102      	movs	r1, #2
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f000 f82b 	bl	8000b80 <RFID_getBlockDataKey>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	82fb      	strh	r3, [r7, #22]
	uint16_t expectedDataKey = ((uint16_t)data[2] << 8) | data[3];
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3302      	adds	r3, #2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	021b      	lsls	r3, r3, #8
 8000b36:	b21a      	sxth	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3303      	adds	r3, #3
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	b21b      	sxth	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b21b      	sxth	r3, r3
 8000b44:	82bb      	strh	r3, [r7, #20]
	if(dataKey != expectedDataKey){
 8000b46:	8afa      	ldrh	r2, [r7, #22]
 8000b48:	8abb      	ldrh	r3, [r7, #20]
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d001      	beq.n	8000b52 <RFID_parseFromBlockData+0x56>
		return false;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e012      	b.n	8000b78 <RFID_parseFromBlockData+0x7c>
	}

	uint8_t idKey = data[4];
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	791b      	ldrb	r3, [r3, #4]
 8000b56:	74fb      	strb	r3, [r7, #19]
	uint8_t expectedIdKey = RFID_getIdKey(rfid->id, rfid->id_len);
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7bdb      	ldrb	r3, [r3, #15]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4610      	mov	r0, r2
 8000b62:	f000 f83c 	bl	8000bde <RFID_getIdKey>
 8000b66:	4603      	mov	r3, r0
 8000b68:	74bb      	strb	r3, [r7, #18]

	if(idKey != expectedIdKey){
 8000b6a:	7cfa      	ldrb	r2, [r7, #19]
 8000b6c:	7cbb      	ldrb	r3, [r7, #18]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d001      	beq.n	8000b76 <RFID_parseFromBlockData+0x7a>
		return false;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <RFID_parseFromBlockData+0x7c>
	}
	return true;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <RFID_getBlockDataKey>:

static uint16_t RFID_getBlockDataKey(uint8_t *data, uint32_t data_size){
 8000b80:	b480      	push	{r7}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
	uint8_t xor = 0xFF;
 8000b8a:	23ff      	movs	r3, #255	; 0xff
 8000b8c:	75fb      	strb	r3, [r7, #23]
	uint8_t sum = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < data_size; ++i) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	e010      	b.n	8000bba <RFID_getBlockDataKey+0x3a>
		xor ^= data[i];
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781a      	ldrb	r2, [r3, #0]
 8000ba0:	7dfb      	ldrb	r3, [r7, #23]
 8000ba2:	4053      	eors	r3, r2
 8000ba4:	75fb      	strb	r3, [r7, #23]
		sum += data[i];
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4413      	add	r3, r2
 8000bac:	781a      	ldrb	r2, [r3, #0]
 8000bae:	7dbb      	ldrb	r3, [r7, #22]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < data_size; ++i) {
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d8ea      	bhi.n	8000b98 <RFID_getBlockDataKey+0x18>
	}
	uint16_t ret = ((uint16_t)xor << 8) | sum;
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	7dbb      	ldrb	r3, [r7, #22]
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	81fb      	strh	r3, [r7, #14]
	return ret;
 8000bd2:	89fb      	ldrh	r3, [r7, #14]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	371c      	adds	r7, #28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <RFID_getIdKey>:


static uint8_t RFID_getIdKey(uint8_t *id, uint32_t id_len){
 8000bde:	b480      	push	{r7}
 8000be0:	b085      	sub	sp, #20
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
	uint8_t id_key = 0xFF;
 8000be8:	23ff      	movs	r3, #255	; 0xff
 8000bea:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < id_len; ++i) {
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	e009      	b.n	8000c06 <RFID_getIdKey+0x28>
		id_key ^= id[i];
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	4413      	add	r3, r2
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	4053      	eors	r3, r2
 8000bfe:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < id_len; ++i) {
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	3301      	adds	r3, #1
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d8f1      	bhi.n	8000bf2 <RFID_getIdKey+0x14>
	}
	return id_key;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <CLOCK_init>:
 */
#include "main.h"
#include "Hal/clock.h"

bool CLOCK_init(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b090      	sub	sp, #64	; 0x40
 8000c1e:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	2228      	movs	r2, #40	; 0x28
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 ff33 	bl	8004a94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c3c:	230a      	movs	r3, #10
 8000c3e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c44:	2310      	movs	r3, #16
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c50:	2300      	movs	r3, #0
 8000c52:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c58:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 fa90 	bl	8002184 <HAL_RCC_OscConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <CLOCK_init+0x54>
	{
		Error_Handler();
 8000c6a:	f000 fcba 	bl	80015e2 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	230f      	movs	r3, #15
 8000c70:	607b      	str	r3, [r7, #4]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c72:	2302      	movs	r3, #2
 8000c74:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 fcfe 	bl	8002688 <HAL_RCC_ClockConfig>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <CLOCK_init+0x7c>
	{
		Error_Handler();
 8000c92:	f000 fca6 	bl	80015e2 <Error_Handler>
	}
}
 8000c96:	bf00      	nop
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3740      	adds	r7, #64	; 0x40
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <CLOCK_getTick>:

uint32_t CLOCK_getTick(void){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	HAL_GetTick();
 8000ca4:	f000 fecc 	bl	8001a40 <HAL_GetTick>
}
 8000ca8:	bf00      	nop
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}

08000cae <CLOCK_delayUs>:
void CLOCK_delayMs(uint32_t ms){
	HAL_Delay(ms);
}
void CLOCK_delayUs(uint32_t us){
 8000cae:	b480      	push	{r7}
 8000cb0:	b085      	sub	sp, #20
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
	uint32_t delayUs = us * 2;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
	while(delayUs--);
 8000cbc:	bf00      	nop
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	1e5a      	subs	r2, r3, #1
 8000cc2:	60fa      	str	r2, [r7, #12]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1fa      	bne.n	8000cbe <CLOCK_delayUs+0x10>
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <GPIO_init>:
#define SRC_HAL_GPIO_C_

#include "main.h"
#include "Hal/gpio.h"

bool GPIO_init(){
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <GPIO_init+0x74>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a1a      	ldr	r2, [pc, #104]	; (8000d48 <GPIO_init+0x74>)
 8000ce0:	f043 0304 	orr.w	r3, r3, #4
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <GPIO_init+0x74>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f003 0304 	and.w	r3, r3, #4
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <GPIO_init+0x74>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <GPIO_init+0x74>)
 8000cf8:	f043 0308 	orr.w	r3, r3, #8
 8000cfc:	6193      	str	r3, [r2, #24]
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <GPIO_init+0x74>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <GPIO_init+0x74>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <GPIO_init+0x74>)
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	6193      	str	r3, [r2, #24]
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <GPIO_init+0x74>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <GPIO_init+0x74>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a08      	ldr	r2, [pc, #32]	; (8000d48 <GPIO_init+0x74>)
 8000d28:	f043 0320 	orr.w	r3, r3, #32
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <GPIO_init+0x74>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f003 0320 	and.w	r3, r3, #32
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]
}
 8000d3a:	bf00      	nop
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3714      	adds	r7, #20
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40021000 	.word	0x40021000

08000d4c <TIMER_init>:
		.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE
	}
};


bool TIMER_init(){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d60:	463b      	mov	r3, r7
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]

	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d68:	4818      	ldr	r0, [pc, #96]	; (8000dcc <TIMER_init+0x80>)
 8000d6a:	f001 fe1b 	bl	80029a4 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <TIMER_init+0x2c>
	{
		Error_Handler();
 8000d74:	f000 fc35 	bl	80015e2 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	4619      	mov	r1, r3
 8000d84:	4811      	ldr	r0, [pc, #68]	; (8000dcc <TIMER_init+0x80>)
 8000d86:	f001 ffb7 	bl	8002cf8 <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <TIMER_init+0x48>
	{
		Error_Handler();
 8000d90:	f000 fc27 	bl	80015e2 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d9c:	463b      	mov	r3, r7
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480a      	ldr	r0, [pc, #40]	; (8000dcc <TIMER_init+0x80>)
 8000da2:	f002 f98d 	bl	80030c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <TIMER_init+0x64>
	{
		Error_Handler();
 8000dac:	f000 fc19 	bl	80015e2 <Error_Handler>
	}
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000db0:	4806      	ldr	r0, [pc, #24]	; (8000dcc <TIMER_init+0x80>)
 8000db2:	f001 fe47 	bl	8002a44 <HAL_TIM_Base_Start_IT>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <TIMER_init+0x74>
	{
		Error_Handler();
 8000dbc:	f000 fc11 	bl	80015e2 <Error_Handler>
	}
	return true;
 8000dc0:	2301      	movs	r3, #1
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000e0 	.word	0x200000e0

08000dd0 <TIMER_attach_intr_1ms>:

bool TIMER_attach_intr_1ms(void (*fn)(void)){
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	if(fn_table_len >= TIMER_FN_MAX_SIZE){
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <TIMER_attach_intr_1ms+0x34>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b09      	cmp	r3, #9
 8000dde:	d901      	bls.n	8000de4 <TIMER_attach_intr_1ms+0x14>
		return false;
 8000de0:	2300      	movs	r3, #0
 8000de2:	e009      	b.n	8000df8 <TIMER_attach_intr_1ms+0x28>
	}
	fn_table[fn_table_len++] = fn;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <TIMER_attach_intr_1ms+0x34>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	1c5a      	adds	r2, r3, #1
 8000dea:	4906      	ldr	r1, [pc, #24]	; (8000e04 <TIMER_attach_intr_1ms+0x34>)
 8000dec:	600a      	str	r2, [r1, #0]
 8000dee:	4906      	ldr	r1, [pc, #24]	; (8000e08 <TIMER_attach_intr_1ms+0x38>)
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return true;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000444 	.word	0x20000444
 8000e08:	2000041c 	.word	0x2000041c

08000e0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance){
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d10f      	bne.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0x34>
		for (int fn_idx = 0; fn_idx < fn_table_len; ++fn_idx) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	e007      	b.n	8000e36 <HAL_TIM_PeriodElapsedCallback+0x2a>
			fn_table[fn_idx]();
 8000e26:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	4798      	blx	r3
		for (int fn_idx = 0; fn_idx < fn_table_len; ++fn_idx) {
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d3f2      	bcc.n	8000e26 <HAL_TIM_PeriodElapsedCallback+0x1a>
		}
	}
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200000e0 	.word	0x200000e0
 8000e4c:	2000041c 	.word	0x2000041c
 8000e50:	20000444 	.word	0x20000444

08000e54 <UART_init>:
			.buffer = &uart_buffer[UART_3]
		},
};


bool UART_init(){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	bool success = true;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	71fb      	strb	r3, [r7, #7]
	// Init hal
//	success = (HAL_UART_Init(uart_table[UART_1].huart_p) == HAL_OK) && success;
	success = (HAL_UART_Init(uart_table[UART_2].huart_p) == HAL_OK) && success;
 8000e5e:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <UART_init+0xcc>)
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f002 f99c 	bl	80031a0 <HAL_UART_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d104      	bne.n	8000e78 <UART_init+0x24>
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <UART_init+0x24>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <UART_init+0x26>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	71fb      	strb	r3, [r7, #7]
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
	success = (HAL_UART_Init(uart_table[UART_3].huart_p) == HAL_OK) && success;
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <UART_init+0xcc>)
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f002 f989 	bl	80031a0 <HAL_UART_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d104      	bne.n	8000e9e <UART_init+0x4a>
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <UART_init+0x4a>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <UART_init+0x4c>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	71fb      	strb	r3, [r7, #7]
	// Init buffer
//	success = utils_buffer_init(uart_table[UART_1].buffer, sizeof(uint8_t)) && success;
	success = utils_buffer_init(uart_table[UART_2].buffer, sizeof(uint8_t)) && success;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <UART_init+0xcc>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f003 fc53 	bl	800475c <utils_buffer_init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <UART_init+0x72>
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <UART_init+0x72>
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <UART_init+0x74>
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 0301 	and.w	r3, r3, #1
 8000ed0:	71fb      	strb	r3, [r7, #7]
	success = utils_buffer_init(uart_table[UART_3].buffer, sizeof(uint8_t)) && success;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <UART_init+0xcc>)
 8000ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f003 fc3f 	bl	800475c <utils_buffer_init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <UART_init+0x9a>
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <UART_init+0x9a>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <UART_init+0x9c>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	71fb      	strb	r3, [r7, #7]

//	HAL_UART_Receive_IT(uart_table[UART_1].huart_p, (uint8_t*)&uart_table[UART_1].temp_data, 1);
	HAL_UART_Receive_IT(uart_table[UART_2].huart_p, (uint8_t*)&uart_table[UART_2].temp_data, 1);
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <UART_init+0xcc>)
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	2201      	movs	r2, #1
 8000f00:	4908      	ldr	r1, [pc, #32]	; (8000f24 <UART_init+0xd0>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f002 fa1f 	bl	8003346 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uart_table[UART_3].huart_p, (uint8_t*)&uart_table[UART_3].temp_data, 1);
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <UART_init+0xcc>)
 8000f0a:	6a1b      	ldr	r3, [r3, #32]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4906      	ldr	r1, [pc, #24]	; (8000f28 <UART_init+0xd4>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fa18 	bl	8003346 <HAL_UART_Receive_IT>
	return success;
 8000f16:	79fb      	ldrb	r3, [r7, #7]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000200 	.word	0x20000200
 8000f24:	2000021c 	.word	0x2000021c
 8000f28:	2000022c 	.word	0x2000022c

08000f2c <UART_send>:
bool UART_send(UART_id_t id, uint8_t *data , size_t len){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(uart_table[id].huart_p, data, len, 100);
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <UART_send+0x30>)
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	4413      	add	r3, r2
 8000f42:	6818      	ldr	r0, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	2364      	movs	r3, #100	; 0x64
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	f002 f978 	bl	8003240 <HAL_UART_Transmit>
}
 8000f50:	bf00      	nop
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000200 	.word	0x20000200

08000f60 <UART_receive_available>:
bool UART_receive_available(UART_id_t id){
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
	return utils_buffer_is_available(uart_table[id].buffer);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <UART_receive_available+0x28>)
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	4413      	add	r3, r2
 8000f72:	3308      	adds	r3, #8
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f003 fc6c 	bl	8004854 <utils_buffer_is_available>
 8000f7c:	4603      	mov	r3, r0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000200 	.word	0x20000200

08000f8c <UART_receive_data>:

uint16_t UART_receive_data(UART_id_t id){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	utils_buffer_pop(uart_table[id].buffer, &data);
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <UART_receive_data+0x2c>)
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4413      	add	r3, r2
 8000f9e:	3308      	adds	r3, #8
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f107 020e 	add.w	r2, r7, #14
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f003 fc29 	bl	8004800 <utils_buffer_pop>
	return data;
 8000fae:	89fb      	ldrh	r3, [r7, #14]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000200 	.word	0x20000200

08000fbc <UART_set_receive_callback>:

void UART_set_receive_callback(UART_id_t id, void (*callback)(uint8_t * data, uint32_t data_len)){
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
	uart_table[id].callback = callback;
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <UART_set_receive_callback+0x24>)
 8000fcc:	011b      	lsls	r3, r3, #4
 8000fce:	4413      	add	r3, r2
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	601a      	str	r2, [r3, #0]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	20000200 	.word	0x20000200

08000fe4 <HAL_UART_RxCpltCallback>:
			}
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart_table[UART_1].huart_p->Instance){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d116      	bne.n	8001028 <HAL_UART_RxCpltCallback+0x44>
		utils_buffer_push(uart_table[UART_1].buffer, &uart_table[UART_1].temp_data);
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	492b      	ldr	r1, [pc, #172]	; (80010ac <HAL_UART_RxCpltCallback+0xc8>)
 8001000:	4618      	mov	r0, r3
 8001002:	f003 fbcb 	bl	800479c <utils_buffer_push>
		if(uart_table[UART_1].callback) uart_table[UART_1].callback(&uart_table[UART_1].temp_data, 1);
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d004      	beq.n	8001018 <HAL_UART_RxCpltCallback+0x34>
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	2101      	movs	r1, #1
 8001014:	4825      	ldr	r0, [pc, #148]	; (80010ac <HAL_UART_RxCpltCallback+0xc8>)
 8001016:	4798      	blx	r3
		HAL_UART_Receive_IT(uart_table[UART_1].huart_p, &uart_table[UART_1].temp_data, 1);
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2201      	movs	r2, #1
 800101e:	4923      	ldr	r1, [pc, #140]	; (80010ac <HAL_UART_RxCpltCallback+0xc8>)
 8001020:	4618      	mov	r0, r3
 8001022:	f002 f990 	bl	8003346 <HAL_UART_Receive_IT>
	}else if(huart->Instance == uart_table[UART_3].huart_p->Instance){
		utils_buffer_push(uart_table[UART_3].buffer, &uart_table[UART_3].temp_data);
		if(uart_table[UART_3].callback) uart_table[UART_3].callback(&uart_table[UART_3].temp_data, 1);
		HAL_UART_Receive_IT(uart_table[UART_3].huart_p, &uart_table[UART_3].temp_data, 1);
	}
}
 8001026:	e03a      	b.n	800109e <HAL_UART_RxCpltCallback+0xba>
	}else if(huart->Instance == uart_table[UART_2].huart_p->Instance){
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4b1e      	ldr	r3, [pc, #120]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d116      	bne.n	8001064 <HAL_UART_RxCpltCallback+0x80>
		utils_buffer_push(uart_table[UART_2].buffer, &uart_table[UART_2].temp_data);
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	491d      	ldr	r1, [pc, #116]	; (80010b0 <HAL_UART_RxCpltCallback+0xcc>)
 800103c:	4618      	mov	r0, r3
 800103e:	f003 fbad 	bl	800479c <utils_buffer_push>
		if(uart_table[UART_2].callback) uart_table[UART_2].callback(&uart_table[UART_2].temp_data, 1);
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d004      	beq.n	8001054 <HAL_UART_RxCpltCallback+0x70>
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	2101      	movs	r1, #1
 8001050:	4817      	ldr	r0, [pc, #92]	; (80010b0 <HAL_UART_RxCpltCallback+0xcc>)
 8001052:	4798      	blx	r3
		HAL_UART_Receive_IT(uart_table[UART_2].huart_p, &uart_table[UART_2].temp_data, 1);
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2201      	movs	r2, #1
 800105a:	4915      	ldr	r1, [pc, #84]	; (80010b0 <HAL_UART_RxCpltCallback+0xcc>)
 800105c:	4618      	mov	r0, r3
 800105e:	f002 f972 	bl	8003346 <HAL_UART_Receive_IT>
}
 8001062:	e01c      	b.n	800109e <HAL_UART_RxCpltCallback+0xba>
	}else if(huart->Instance == uart_table[UART_3].huart_p->Instance){
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d115      	bne.n	800109e <HAL_UART_RxCpltCallback+0xba>
		utils_buffer_push(uart_table[UART_3].buffer, &uart_table[UART_3].temp_data);
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	490f      	ldr	r1, [pc, #60]	; (80010b4 <HAL_UART_RxCpltCallback+0xd0>)
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fb8f 	bl	800479c <utils_buffer_push>
		if(uart_table[UART_3].callback) uart_table[UART_3].callback(&uart_table[UART_3].temp_data, 1);
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	2b00      	cmp	r3, #0
 8001084:	d004      	beq.n	8001090 <HAL_UART_RxCpltCallback+0xac>
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 8001088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108a:	2101      	movs	r1, #1
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <HAL_UART_RxCpltCallback+0xd0>)
 800108e:	4798      	blx	r3
		HAL_UART_Receive_IT(uart_table[UART_3].huart_p, &uart_table[UART_3].temp_data, 1);
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_UART_RxCpltCallback+0xc4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	2201      	movs	r2, #1
 8001096:	4907      	ldr	r1, [pc, #28]	; (80010b4 <HAL_UART_RxCpltCallback+0xd0>)
 8001098:	4618      	mov	r0, r3
 800109a:	f002 f954 	bl	8003346 <HAL_UART_Receive_IT>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000200 	.word	0x20000200
 80010ac:	2000020c 	.word	0x2000020c
 80010b0:	2000021c 	.word	0x2000021c
 80010b4:	2000022c 	.word	0x2000022c

080010b8 <RS485_init>:
static uint32_t RS485_rxBufferLen = 0;
static uint8_t RS485_MessagexBuffer[RS485_RX_BUFFER_MAX];
static uint32_t RS485_rxTimeCnt = 0;

void RS485_init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	TIMER_attach_intr_1ms(RS485_interrupt1ms);
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <RS485_init+0x18>)
 80010be:	f7ff fe87 	bl	8000dd0 <TIMER_attach_intr_1ms>
	UART_set_receive_callback(RS485_UART_ID, RS485_onUartCallback);
 80010c2:	4904      	ldr	r1, [pc, #16]	; (80010d4 <RS485_init+0x1c>)
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff ff79 	bl	8000fbc <UART_set_receive_callback>
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	0800121d 	.word	0x0800121d
 80010d4:	08001545 	.word	0x08001545

080010d8 <RS485_run>:

void RS485_run(void){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af02      	add	r7, sp, #8
	bool cleanUp;
	uint32_t cutIdx;
	if(RS485_parse(RS485_rxBuffer, RS485_rxBufferLen, &RS485_message, &cleanUp, &cutIdx))
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <RS485_run+0x88>)
 80010e0:	6819      	ldr	r1, [r3, #0]
 80010e2:	1dfa      	adds	r2, r7, #7
 80010e4:	463b      	mov	r3, r7
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	4613      	mov	r3, r2
 80010ea:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <RS485_run+0x8c>)
 80010ec:	481e      	ldr	r0, [pc, #120]	; (8001168 <RS485_run+0x90>)
 80010ee:	f000 f8af 	bl	8001250 <RS485_parse>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d029      	beq.n	800114c <RS485_run+0x74>
	{
		// Cut Buffer
		RS485_cutBuffer(RS485_rxBuffer, RS485_rxBufferLen, cutIdx, &RS485_rxBufferLen);
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <RS485_run+0x88>)
 80010fa:	6819      	ldr	r1, [r3, #0]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <RS485_run+0x88>)
 8001100:	4819      	ldr	r0, [pc, #100]	; (8001168 <RS485_run+0x90>)
 8001102:	f000 f9f4 	bl	80014ee <RS485_cutBuffer>

		RS485_rxQueue[RS485_rxQueueHead] = RS485_message;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <RS485_run+0x94>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	461a      	mov	r2, r3
 800110c:	4918      	ldr	r1, [pc, #96]	; (8001170 <RS485_run+0x98>)
 800110e:	4613      	mov	r3, r2
 8001110:	019b      	lsls	r3, r3, #6
 8001112:	4413      	add	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4413      	add	r3, r2
 8001118:	440b      	add	r3, r1
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <RS485_run+0x8c>)
 800111c:	4618      	mov	r0, r3
 800111e:	4611      	mov	r1, r2
 8001120:	f240 1305 	movw	r3, #261	; 0x105
 8001124:	461a      	mov	r2, r3
 8001126:	f003 fca7 	bl	8004a78 <memcpy>
		RS485_rxQueueHead = (RS485_rxQueueHead + 1) % RS485_RX_MESSAGE_QUEUE_MAX_SIZE;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <RS485_run+0x94>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	4b10      	ldr	r3, [pc, #64]	; (8001174 <RS485_run+0x9c>)
 8001132:	fb83 1302 	smull	r1, r3, r3, r2
 8001136:	1059      	asrs	r1, r3, #1
 8001138:	17d3      	asrs	r3, r2, #31
 800113a:	1ac9      	subs	r1, r1, r3
 800113c:	460b      	mov	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	1ad1      	subs	r1, r2, r3
 8001144:	b2ca      	uxtb	r2, r1
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <RS485_run+0x94>)
 8001148:	701a      	strb	r2, [r3, #0]
	}else if(cleanUp){
		RS485_rxBufferLen = 0;
	}
}
 800114a:	e005      	b.n	8001158 <RS485_run+0x80>
	}else if(cleanUp){
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d002      	beq.n	8001158 <RS485_run+0x80>
		RS485_rxBufferLen = 0;
 8001152:	4b03      	ldr	r3, [pc, #12]	; (8001160 <RS485_run+0x88>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000269c 	.word	0x2000269c
 8001164:	20001c78 	.word	0x20001c78
 8001168:	2000229c 	.word	0x2000229c
 800116c:	2000229a 	.word	0x2000229a
 8001170:	20001d80 	.word	0x20001d80
 8001174:	66666667 	.word	0x66666667

08001178 <RS485_send>:

bool RS485_send(RS485_Message* message)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	size_t tx_len;
	RS485_serialize(message, RS485_MessagexBuffer, &tx_len);
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	461a      	mov	r2, r3
 8001186:	4907      	ldr	r1, [pc, #28]	; (80011a4 <RS485_send+0x2c>)
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f925 	bl	80013d8 <RS485_serialize>
	return UART_send(RS485_UART_ID, RS485_MessagexBuffer, tx_len);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	461a      	mov	r2, r3
 8001192:	4904      	ldr	r1, [pc, #16]	; (80011a4 <RS485_send+0x2c>)
 8001194:	2002      	movs	r0, #2
 8001196:	f7ff fec9 	bl	8000f2c <UART_send>
 800119a:	4603      	mov	r3, r0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200026a0 	.word	0x200026a0

080011a8 <RS485_receive>:

bool RS485_receive(RS485_Message* message)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	if(RS485_rxQueueHead != RS485_rxQueueTail)
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <RS485_receive+0x64>)
 80011b2:	781a      	ldrb	r2, [r3, #0]
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <RS485_receive+0x68>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d021      	beq.n	8001200 <RS485_receive+0x58>
	{
		memcpy(message, &RS485_rxQueue[RS485_rxQueueTail], sizeof(RS485_Message));
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <RS485_receive+0x68>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4613      	mov	r3, r2
 80011c4:	019b      	lsls	r3, r3, #6
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	4a11      	ldr	r2, [pc, #68]	; (8001214 <RS485_receive+0x6c>)
 80011ce:	4413      	add	r3, r2
 80011d0:	f240 1205 	movw	r2, #261	; 0x105
 80011d4:	4619      	mov	r1, r3
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f003 fc4e 	bl	8004a78 <memcpy>
		RS485_rxQueueTail = (RS485_rxQueueTail + 1) % RS485_RX_MESSAGE_QUEUE_MAX_SIZE;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <RS485_receive+0x68>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <RS485_receive+0x70>)
 80011e4:	fb83 1302 	smull	r1, r3, r3, r2
 80011e8:	1059      	asrs	r1, r3, #1
 80011ea:	17d3      	asrs	r3, r2, #31
 80011ec:	1ac9      	subs	r1, r1, r3
 80011ee:	460b      	mov	r3, r1
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	1ad1      	subs	r1, r2, r3
 80011f6:	b2ca      	uxtb	r2, r1
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <RS485_receive+0x68>)
 80011fa:	701a      	strb	r2, [r3, #0]
		return true;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <RS485_receive+0x5a>
	}
	return false;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000229a 	.word	0x2000229a
 8001210:	20002299 	.word	0x20002299
 8001214:	20001d80 	.word	0x20001d80
 8001218:	66666667 	.word	0x66666667

0800121c <RS485_interrupt1ms>:

static void RS485_interrupt1ms(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	if(RS485_rxTimeCnt > 0)
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <RS485_interrupt1ms+0x2c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00b      	beq.n	8001240 <RS485_interrupt1ms+0x24>
	{
		RS485_rxTimeCnt--;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <RS485_interrupt1ms+0x2c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3b01      	subs	r3, #1
 800122e:	4a06      	ldr	r2, [pc, #24]	; (8001248 <RS485_interrupt1ms+0x2c>)
 8001230:	6013      	str	r3, [r2, #0]
		if(RS485_rxTimeCnt == 0)
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <RS485_interrupt1ms+0x2c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <RS485_interrupt1ms+0x24>
		{
			RS485_rxBufferLen = 0;
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <RS485_interrupt1ms+0x30>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	20002720 	.word	0x20002720
 800124c:	2000269c 	.word	0x2000269c

08001250 <RS485_parse>:

static bool RS485_parse(uint8_t* data, size_t data_len, RS485_Message* message, bool *cleanUp, uint32_t *cutIdx)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
	bool foundStartByte = false;
 800125e:	2300      	movs	r3, #0
 8001260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t startByteIdx = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
	// Find Start Byte
	for (startByteIdx = 0; startByteIdx < data_len; ++startByteIdx) {
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
 800126c:	e00c      	b.n	8001288 <RS485_parse+0x38>
		if(data[startByteIdx] == RS485_MESSAGE_START_BYTE){
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b88      	cmp	r3, #136	; 0x88
 8001278:	d103      	bne.n	8001282 <RS485_parse+0x32>
			foundStartByte = true;
 800127a:	2301      	movs	r3, #1
 800127c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001280:	e006      	b.n	8001290 <RS485_parse+0x40>
	for (startByteIdx = 0; startByteIdx < data_len; ++startByteIdx) {
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	3301      	adds	r3, #1
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	6a3a      	ldr	r2, [r7, #32]
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	429a      	cmp	r2, r3
 800128e:	d3ee      	bcc.n	800126e <RS485_parse+0x1e>
		}
	}
	if(!foundStartByte){
 8001290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001294:	f083 0301 	eor.w	r3, r3, #1
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <RS485_parse+0x52>
		return false;
 800129e:	2300      	movs	r3, #0
 80012a0:	e086      	b.n	80013b0 <RS485_parse+0x160>
	}

	RS485_NetworkId networkId = data[startByteIdx + 1];
 80012a2:	6a3b      	ldr	r3, [r7, #32]
 80012a4:	3301      	adds	r3, #1
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	4413      	add	r3, r2
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	77fb      	strb	r3, [r7, #31]
	RS485_NodeId srcNode = data[startByteIdx + 2];
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	3302      	adds	r3, #2
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	4413      	add	r3, r2
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	77bb      	strb	r3, [r7, #30]
	RS485_NodeId desNode = data[startByteIdx + 3];
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	3303      	adds	r3, #3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	777b      	strb	r3, [r7, #29]
	RS485_MessageId messageId = data[startByteIdx + 4];
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	3304      	adds	r3, #4
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	4413      	add	r3, r2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	773b      	strb	r3, [r7, #28]
	RS485_ResultCode resultCode = data[startByteIdx + 5];
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	3305      	adds	r3, #5
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4413      	add	r3, r2
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	76fb      	strb	r3, [r7, #27]

	uint8_t dataL = data[startByteIdx + 6];
 80012de:	6a3b      	ldr	r3, [r7, #32]
 80012e0:	3306      	adds	r3, #6
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	76bb      	strb	r3, [r7, #26]
	if(data[startByteIdx + 9 + dataL] != RS485_MESSAGE_STOP_BYTE)
 80012ea:	7eba      	ldrb	r2, [r7, #26]
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	4413      	add	r3, r2
 80012f0:	3309      	adds	r3, #9
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b89      	cmp	r3, #137	; 0x89
 80012fa:	d001      	beq.n	8001300 <RS485_parse+0xb0>
	{
		return false;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e057      	b.n	80013b0 <RS485_parse+0x160>
	}
	if(data_len < startByteIdx + 10 + dataL)
 8001300:	7eba      	ldrb	r2, [r7, #26]
 8001302:	6a3b      	ldr	r3, [r7, #32]
 8001304:	4413      	add	r3, r2
 8001306:	330a      	adds	r3, #10
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	429a      	cmp	r2, r3
 800130c:	d201      	bcs.n	8001312 <RS485_parse+0xc2>
	{
		return false;
 800130e:	2300      	movs	r3, #0
 8001310:	e04e      	b.n	80013b0 <RS485_parse+0x160>
	}
	uint16_t expectedChecksum = RS485_calCheckSum(&data[startByteIdx + 7], dataL);
 8001312:	6a3b      	ldr	r3, [r7, #32]
 8001314:	3307      	adds	r3, #7
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	4413      	add	r3, r2
 800131a:	7eba      	ldrb	r2, [r7, #26]
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f84a 	bl	80013b8 <RS485_calCheckSum>
 8001324:	4603      	mov	r3, r0
 8001326:	833b      	strh	r3, [r7, #24]
	uint16_t checksum = ((uint16_t)data[startByteIdx + 7 + dataL] << 8) | data[startByteIdx + 8 + dataL];
 8001328:	7eba      	ldrb	r2, [r7, #26]
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	4413      	add	r3, r2
 800132e:	3307      	adds	r3, #7
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	7eb9      	ldrb	r1, [r7, #26]
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	440b      	add	r3, r1
 8001340:	3308      	adds	r3, #8
 8001342:	68f9      	ldr	r1, [r7, #12]
 8001344:	440b      	add	r3, r1
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b21b      	sxth	r3, r3
 800134a:	4313      	orrs	r3, r2
 800134c:	b21b      	sxth	r3, r3
 800134e:	82fb      	strh	r3, [r7, #22]
	if(expectedChecksum != checksum)
 8001350:	8b3a      	ldrh	r2, [r7, #24]
 8001352:	8afb      	ldrh	r3, [r7, #22]
 8001354:	429a      	cmp	r2, r3
 8001356:	d004      	beq.n	8001362 <RS485_parse+0x112>
	{
		* cleanUp = true;
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
		return false;
 800135e:	2300      	movs	r3, #0
 8001360:	e026      	b.n	80013b0 <RS485_parse+0x160>
	}
	message->networkId = networkId;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7ffa      	ldrb	r2, [r7, #31]
 8001366:	701a      	strb	r2, [r3, #0]
	message->srcNode = srcNode;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	7fba      	ldrb	r2, [r7, #30]
 800136c:	705a      	strb	r2, [r3, #1]
	message->desNode = desNode;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7f7a      	ldrb	r2, [r7, #29]
 8001372:	709a      	strb	r2, [r3, #2]
	message->messageId = messageId;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7f3a      	ldrb	r2, [r7, #28]
 8001378:	70da      	strb	r2, [r3, #3]
	message->resultCode = resultCode;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7efa      	ldrb	r2, [r7, #27]
 800137e:	711a      	strb	r2, [r3, #4]
	memcpy(message->data, &data[startByteIdx + 7], dataL);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	1d98      	adds	r0, r3, #6
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	3307      	adds	r3, #7
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4413      	add	r3, r2
 800138c:	7eba      	ldrb	r2, [r7, #26]
 800138e:	4619      	mov	r1, r3
 8001390:	f003 fb72 	bl	8004a78 <memcpy>
	message->dataLen = dataL;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7eba      	ldrb	r2, [r7, #26]
 8001398:	715a      	strb	r2, [r3, #5]

	*cleanUp = false;
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
	*cutIdx = startByteIdx + 10 + dataL;
 80013a0:	7eba      	ldrb	r2, [r7, #26]
 80013a2:	6a3b      	ldr	r3, [r7, #32]
 80013a4:	4413      	add	r3, r2
 80013a6:	f103 020a 	add.w	r2, r3, #10
 80013aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ac:	601a      	str	r2, [r3, #0]
	return true;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <RS485_calCheckSum>:

static uint16_t RS485_calCheckSum(uint8_t* data, uint8_t data_len)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
	return CRC_calculate(data, data_len);
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	4619      	mov	r1, r3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff f89f 	bl	800050c <CRC_calculate>
 80013ce:	4603      	mov	r3, r0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <RS485_serialize>:

static void RS485_serialize(RS485_Message* message, uint8_t* data, size_t* data_len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
	uint8_t data_len_temp = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	77fb      	strb	r3, [r7, #31]
	data[data_len_temp++] = RS485_MESSAGE_START_BYTE;
 80013e8:	7ffb      	ldrb	r3, [r7, #31]
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	77fa      	strb	r2, [r7, #31]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4413      	add	r3, r2
 80013f4:	2288      	movs	r2, #136	; 0x88
 80013f6:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = message->networkId;
 80013f8:	7ffb      	ldrb	r3, [r7, #31]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	77fa      	strb	r2, [r7, #31]
 80013fe:	461a      	mov	r2, r3
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4413      	add	r3, r2
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	7812      	ldrb	r2, [r2, #0]
 8001408:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = message->srcNode;
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	77fa      	strb	r2, [r7, #31]
 8001410:	461a      	mov	r2, r3
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	4413      	add	r3, r2
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	7852      	ldrb	r2, [r2, #1]
 800141a:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = message->desNode;
 800141c:	7ffb      	ldrb	r3, [r7, #31]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	77fa      	strb	r2, [r7, #31]
 8001422:	461a      	mov	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	4413      	add	r3, r2
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	7892      	ldrb	r2, [r2, #2]
 800142c:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = message->messageId;
 800142e:	7ffb      	ldrb	r3, [r7, #31]
 8001430:	1c5a      	adds	r2, r3, #1
 8001432:	77fa      	strb	r2, [r7, #31]
 8001434:	461a      	mov	r2, r3
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	4413      	add	r3, r2
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	78d2      	ldrb	r2, [r2, #3]
 800143e:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = message->resultCode;
 8001440:	7ffb      	ldrb	r3, [r7, #31]
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	77fa      	strb	r2, [r7, #31]
 8001446:	461a      	mov	r2, r3
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4413      	add	r3, r2
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	7912      	ldrb	r2, [r2, #4]
 8001450:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = message->dataLen;
 8001452:	7ffb      	ldrb	r3, [r7, #31]
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	77fa      	strb	r2, [r7, #31]
 8001458:	461a      	mov	r2, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	4413      	add	r3, r2
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	7952      	ldrb	r2, [r2, #5]
 8001462:	701a      	strb	r2, [r3, #0]
	for(int var = 0; var < message->dataLen; ++var)
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
 8001468:	e00e      	b.n	8001488 <RS485_serialize+0xb0>
	{
		data[data_len_temp++] = message->data[var];
 800146a:	7ffb      	ldrb	r3, [r7, #31]
 800146c:	1c5a      	adds	r2, r3, #1
 800146e:	77fa      	strb	r2, [r7, #31]
 8001470:	461a      	mov	r2, r3
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	4413      	add	r3, r2
 8001476:	68f9      	ldr	r1, [r7, #12]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	440a      	add	r2, r1
 800147c:	3206      	adds	r2, #6
 800147e:	7812      	ldrb	r2, [r2, #0]
 8001480:	701a      	strb	r2, [r3, #0]
	for(int var = 0; var < message->dataLen; ++var)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	3301      	adds	r3, #1
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	795b      	ldrb	r3, [r3, #5]
 800148c:	461a      	mov	r2, r3
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	4293      	cmp	r3, r2
 8001492:	dbea      	blt.n	800146a <RS485_serialize+0x92>
	}
	uint16_t checksum = RS485_calCheckSum(message->data, message->dataLen);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	1d9a      	adds	r2, r3, #6
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	795b      	ldrb	r3, [r3, #5]
 800149c:	4619      	mov	r1, r3
 800149e:	4610      	mov	r0, r2
 80014a0:	f7ff ff8a 	bl	80013b8 <RS485_calCheckSum>
 80014a4:	4603      	mov	r3, r0
 80014a6:	82fb      	strh	r3, [r7, #22]
	data[data_len_temp++] = (uint8_t)(checksum >> 8);
 80014a8:	8afb      	ldrh	r3, [r7, #22]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	7ffb      	ldrb	r3, [r7, #31]
 80014b0:	1c59      	adds	r1, r3, #1
 80014b2:	77f9      	strb	r1, [r7, #31]
 80014b4:	4619      	mov	r1, r3
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	440b      	add	r3, r1
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = (uint8_t)(checksum & 0xFF);
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	77fa      	strb	r2, [r7, #31]
 80014c4:	461a      	mov	r2, r3
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	4413      	add	r3, r2
 80014ca:	8afa      	ldrh	r2, [r7, #22]
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = RS485_MESSAGE_STOP_BYTE;
 80014d0:	7ffb      	ldrb	r3, [r7, #31]
 80014d2:	1c5a      	adds	r2, r3, #1
 80014d4:	77fa      	strb	r2, [r7, #31]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4413      	add	r3, r2
 80014dc:	2289      	movs	r2, #137	; 0x89
 80014de:	701a      	strb	r2, [r3, #0]
	*data_len = data_len_temp;
 80014e0:	7ffa      	ldrb	r2, [r7, #31]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
}
 80014e6:	bf00      	nop
 80014e8:	3720      	adds	r7, #32
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <RS485_cutBuffer>:

static void RS485_cutBuffer(uint8_t *buffer, uint32_t bufferLenIn, uint32_t cutIdx, uint32_t *bufferLenOut){
 80014ee:	b480      	push	{r7}
 80014f0:	b087      	sub	sp, #28
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	603b      	str	r3, [r7, #0]
	if(cutIdx > bufferLenIn){
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	429a      	cmp	r2, r3
 8001502:	d819      	bhi.n	8001538 <RS485_cutBuffer+0x4a>
		return;
	}
	for (int var = cutIdx; var < bufferLenIn; ++var) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e00c      	b.n	8001524 <RS485_cutBuffer+0x36>
		buffer[var - cutIdx] = buffer[var];
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	441a      	add	r2, r3
 8001510:	6979      	ldr	r1, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	1acb      	subs	r3, r1, r3
 8001516:	68f9      	ldr	r1, [r7, #12]
 8001518:	440b      	add	r3, r1
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	701a      	strb	r2, [r3, #0]
	for (int var = cutIdx; var < bufferLenIn; ++var) {
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	3301      	adds	r3, #1
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8ee      	bhi.n	800150a <RS485_cutBuffer+0x1c>
	}
	*bufferLenOut = bufferLenIn - cutIdx;
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	1ad2      	subs	r2, r2, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e000      	b.n	800153a <RS485_cutBuffer+0x4c>
		return;
 8001538:	bf00      	nop
}
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
	...

08001544 <RS485_onUartCallback>:
static void RS485_onUartCallback(uint8_t *dataP, uint32_t dataLen){
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
	RS485_rxTimeCnt = RS485_RX_TIMEOUT;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <RS485_onUartCallback+0x58>)
 8001550:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001554:	601a      	str	r2, [r3, #0]
	if(RS485_rxBufferLen + dataLen > RS485_RX_BUFFER_MAX)
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <RS485_onUartCallback+0x5c>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	4413      	add	r3, r2
 800155e:	2b80      	cmp	r3, #128	; 0x80
 8001560:	d909      	bls.n	8001576 <RS485_onUartCallback+0x32>
	{
		utils_log_error("[PROTOCOL] Rx buffer overflow, cleaning up\r\n");
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <RS485_onUartCallback+0x60>)
 8001564:	22b9      	movs	r2, #185	; 0xb9
 8001566:	4910      	ldr	r1, [pc, #64]	; (80015a8 <RS485_onUartCallback+0x64>)
 8001568:	2002      	movs	r0, #2
 800156a:	f003 f9e7 	bl	800493c <utils_log_log>
		RS485_rxBufferLen = 0;
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <RS485_onUartCallback+0x5c>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
		return;
 8001574:	e00e      	b.n	8001594 <RS485_onUartCallback+0x50>
	}
	memcpy(&RS485_rxBuffer[RS485_rxBufferLen], dataP, dataLen);
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <RS485_onUartCallback+0x5c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <RS485_onUartCallback+0x68>)
 800157c:	4413      	add	r3, r2
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	4618      	mov	r0, r3
 8001584:	f003 fa78 	bl	8004a78 <memcpy>
	RS485_rxBufferLen += dataLen;
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <RS485_onUartCallback+0x5c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a03      	ldr	r2, [pc, #12]	; (80015a0 <RS485_onUartCallback+0x5c>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20002720 	.word	0x20002720
 80015a0:	2000269c 	.word	0x2000269c
 80015a4:	08005448 	.word	0x08005448
 80015a8:	08005478 	.word	0x08005478
 80015ac:	2000229c 	.word	0x2000229c

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80015b4:	f000 f9ec 	bl	8001990 <HAL_Init>

  /* USER CODE BEGIN Init */
  CLOCK_init();
 80015b8:	f7ff fb2f 	bl	8000c1a <CLOCK_init>
  GPIO_init();
 80015bc:	f7ff fb8a 	bl	8000cd4 <GPIO_init>
  TIMER_init();
 80015c0:	f7ff fbc4 	bl	8000d4c <TIMER_init>
  UART_init();
 80015c4:	f7ff fc46 	bl	8000e54 <UART_init>
//  SPI_init();
//  WATCHDOG_init();

  DIPSWITCH_init();
 80015c8:	f7fe ffce 	bl	8000568 <DIPSWITCH_init>
//  LOADCELL_init();
  RFID_init();
 80015cc:	f7ff f882 	bl	80006d4 <RFID_init>

  RS485_init();
 80015d0:	f7ff fd72 	bl	80010b8 <RS485_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  WATCHDOG_refresh();
	  COMMANDHANDLER_run();
 80015d4:	f7fe fdba 	bl	800014c <COMMANDHANDLER_run>
	  RS485_run();
 80015d8:	f7ff fd7e 	bl	80010d8 <RS485_run>
	  RFID_run();
 80015dc:	f7ff f890 	bl	8000700 <RFID_run>
	  COMMANDHANDLER_run();
 80015e0:	e7f8      	b.n	80015d4 <main+0x24>

080015e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e6:	b672      	cpsid	i
}
 80015e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ea:	e7fe      	b.n	80015ea <Error_Handler+0x8>

080015ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_MspInit+0x40>)
 80015f4:	699b      	ldr	r3, [r3, #24]
 80015f6:	4a0d      	ldr	r2, [pc, #52]	; (800162c <HAL_MspInit+0x40>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6193      	str	r3, [r2, #24]
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <HAL_MspInit+0x40>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <HAL_MspInit+0x40>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_MspInit+0x40>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	61d3      	str	r3, [r2, #28]
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_MspInit+0x40>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	40021000 	.word	0x40021000

08001630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <HAL_TIM_Base_MspInit+0x44>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d113      	bne.n	800166a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_TIM_Base_MspInit+0x48>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <HAL_TIM_Base_MspInit+0x48>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	61d3      	str	r3, [r2, #28]
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_TIM_Base_MspInit+0x48>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	201d      	movs	r0, #29
 8001660:	f000 faf3 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001664:	201d      	movs	r0, #29
 8001666:	f000 fb0c 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40000400 	.word	0x40000400
 8001678:	40021000 	.word	0x40021000

0800167c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	; 0x30
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0320 	add.w	r3, r7, #32
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a5f      	ldr	r2, [pc, #380]	; (8001814 <HAL_UART_MspInit+0x198>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d13a      	bne.n	8001712 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800169c:	4b5e      	ldr	r3, [pc, #376]	; (8001818 <HAL_UART_MspInit+0x19c>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a5d      	ldr	r2, [pc, #372]	; (8001818 <HAL_UART_MspInit+0x19c>)
 80016a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b5b      	ldr	r3, [pc, #364]	; (8001818 <HAL_UART_MspInit+0x19c>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b0:	61fb      	str	r3, [r7, #28]
 80016b2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b58      	ldr	r3, [pc, #352]	; (8001818 <HAL_UART_MspInit+0x19c>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a57      	ldr	r2, [pc, #348]	; (8001818 <HAL_UART_MspInit+0x19c>)
 80016ba:	f043 0304 	orr.w	r3, r3, #4
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b55      	ldr	r3, [pc, #340]	; (8001818 <HAL_UART_MspInit+0x19c>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	61bb      	str	r3, [r7, #24]
 80016ca:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d6:	2303      	movs	r3, #3
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0320 	add.w	r3, r7, #32
 80016de:	4619      	mov	r1, r3
 80016e0:	484e      	ldr	r0, [pc, #312]	; (800181c <HAL_UART_MspInit+0x1a0>)
 80016e2:	f000 fb9b 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f4:	f107 0320 	add.w	r3, r7, #32
 80016f8:	4619      	mov	r1, r3
 80016fa:	4848      	ldr	r0, [pc, #288]	; (800181c <HAL_UART_MspInit+0x1a0>)
 80016fc:	f000 fb8e 	bl	8001e1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2025      	movs	r0, #37	; 0x25
 8001706:	f000 faa0 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800170a:	2025      	movs	r0, #37	; 0x25
 800170c:	f000 fab9 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001710:	e07c      	b.n	800180c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a42      	ldr	r2, [pc, #264]	; (8001820 <HAL_UART_MspInit+0x1a4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d138      	bne.n	800178e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800171c:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <HAL_UART_MspInit+0x19c>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	4a3d      	ldr	r2, [pc, #244]	; (8001818 <HAL_UART_MspInit+0x19c>)
 8001722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001726:	61d3      	str	r3, [r2, #28]
 8001728:	4b3b      	ldr	r3, [pc, #236]	; (8001818 <HAL_UART_MspInit+0x19c>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	4b38      	ldr	r3, [pc, #224]	; (8001818 <HAL_UART_MspInit+0x19c>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	4a37      	ldr	r2, [pc, #220]	; (8001818 <HAL_UART_MspInit+0x19c>)
 800173a:	f043 0304 	orr.w	r3, r3, #4
 800173e:	6193      	str	r3, [r2, #24]
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <HAL_UART_MspInit+0x19c>)
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	f003 0304 	and.w	r3, r3, #4
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800174c:	2304      	movs	r3, #4
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0320 	add.w	r3, r7, #32
 800175c:	4619      	mov	r1, r3
 800175e:	482f      	ldr	r0, [pc, #188]	; (800181c <HAL_UART_MspInit+0x1a0>)
 8001760:	f000 fb5c 	bl	8001e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001764:	2308      	movs	r3, #8
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0320 	add.w	r3, r7, #32
 8001774:	4619      	mov	r1, r3
 8001776:	4829      	ldr	r0, [pc, #164]	; (800181c <HAL_UART_MspInit+0x1a0>)
 8001778:	f000 fb50 	bl	8001e1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2026      	movs	r0, #38	; 0x26
 8001782:	f000 fa62 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001786:	2026      	movs	r0, #38	; 0x26
 8001788:	f000 fa7b 	bl	8001c82 <HAL_NVIC_EnableIRQ>
}
 800178c:	e03e      	b.n	800180c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a24      	ldr	r2, [pc, #144]	; (8001824 <HAL_UART_MspInit+0x1a8>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d139      	bne.n	800180c <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HAL_UART_MspInit+0x19c>)
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	4a1e      	ldr	r2, [pc, #120]	; (8001818 <HAL_UART_MspInit+0x19c>)
 800179e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a2:	61d3      	str	r3, [r2, #28]
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_UART_MspInit+0x19c>)
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_UART_MspInit+0x19c>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a18      	ldr	r2, [pc, #96]	; (8001818 <HAL_UART_MspInit+0x19c>)
 80017b6:	f043 0308 	orr.w	r3, r3, #8
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b16      	ldr	r3, [pc, #88]	; (8001818 <HAL_UART_MspInit+0x19c>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	f107 0320 	add.w	r3, r7, #32
 80017da:	4619      	mov	r1, r3
 80017dc:	4812      	ldr	r0, [pc, #72]	; (8001828 <HAL_UART_MspInit+0x1ac>)
 80017de:	f000 fb1d 	bl	8001e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f0:	f107 0320 	add.w	r3, r7, #32
 80017f4:	4619      	mov	r1, r3
 80017f6:	480c      	ldr	r0, [pc, #48]	; (8001828 <HAL_UART_MspInit+0x1ac>)
 80017f8:	f000 fb10 	bl	8001e1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	2027      	movs	r0, #39	; 0x27
 8001802:	f000 fa22 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001806:	2027      	movs	r0, #39	; 0x27
 8001808:	f000 fa3b 	bl	8001c82 <HAL_NVIC_EnableIRQ>
}
 800180c:	bf00      	nop
 800180e:	3730      	adds	r7, #48	; 0x30
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40013800 	.word	0x40013800
 8001818:	40021000 	.word	0x40021000
 800181c:	40010800 	.word	0x40010800
 8001820:	40004400 	.word	0x40004400
 8001824:	40004800 	.word	0x40004800
 8001828:	40010c00 	.word	0x40010c00

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f000 f8d3 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <TIM3_IRQHandler+0x10>)
 8001882:	f001 f931 	bl	8002ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	200000e0 	.word	0x200000e0

08001890 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <USART1_IRQHandler+0x10>)
 8001896:	f001 fd7b 	bl	8003390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000128 	.word	0x20000128

080018a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018a8:	4802      	ldr	r0, [pc, #8]	; (80018b4 <USART2_IRQHandler+0x10>)
 80018aa:	f001 fd71 	bl	8003390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000170 	.word	0x20000170

080018b8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018bc:	4802      	ldr	r0, [pc, #8]	; (80018c8 <USART3_IRQHandler+0x10>)
 80018be:	f001 fd67 	bl	8003390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200001b8 	.word	0x200001b8

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f003 f882 	bl	8004a04 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20005000 	.word	0x20005000
 800192c:	00000400 	.word	0x00000400
 8001930:	20002724 	.word	0x20002724
 8001934:	20002f40 	.word	0x20002f40

08001938 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001944:	f7ff fff8 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001948:	480b      	ldr	r0, [pc, #44]	; (8001978 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800194a:	490c      	ldr	r1, [pc, #48]	; (800197c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <LoopFillZerobss+0x16>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001950:	e002      	b.n	8001958 <LoopCopyDataInit>

08001952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001956:	3304      	adds	r3, #4

08001958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800195c:	d3f9      	bcc.n	8001952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001960:	4c09      	ldr	r4, [pc, #36]	; (8001988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001964:	e001      	b.n	800196a <LoopFillZerobss>

08001966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001968:	3204      	adds	r2, #4

0800196a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800196c:	d3fb      	bcc.n	8001966 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196e:	f003 f84f 	bl	8004a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001972:	f7ff fe1d 	bl	80015b0 <main>
  bx lr
 8001976:	4770      	bx	lr
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8001980:	08005b10 	.word	0x08005b10
  ldr r2, =_sbss
 8001984:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8001988:	20002f3c 	.word	0x20002f3c

0800198c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC1_2_IRQHandler>
	...

08001990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001994:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <HAL_Init+0x28>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a07      	ldr	r2, [pc, #28]	; (80019b8 <HAL_Init+0x28>)
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a0:	2003      	movs	r0, #3
 80019a2:	f000 f947 	bl	8001c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a6:	200f      	movs	r0, #15
 80019a8:	f000 f808 	bl	80019bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019ac:	f7ff fe1e 	bl	80015ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40022000 	.word	0x40022000

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x54>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <HAL_InitTick+0x58>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f95f 	bl	8001c9e <HAL_SYSTICK_Config>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00e      	b.n	8001a08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b0f      	cmp	r3, #15
 80019ee:	d80a      	bhi.n	8001a06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f0:	2200      	movs	r2, #0
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019f8:	f000 f927 	bl	8001c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019fc:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <HAL_InitTick+0x5c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	e000      	b.n	8001a08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000230 	.word	0x20000230
 8001a14:	20000238 	.word	0x20000238
 8001a18:	20000234 	.word	0x20000234

08001a1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <HAL_IncTick+0x1c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_IncTick+0x20>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a03      	ldr	r2, [pc, #12]	; (8001a3c <HAL_IncTick+0x20>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	20000238 	.word	0x20000238
 8001a3c:	20002728 	.word	0x20002728

08001a40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b02      	ldr	r3, [pc, #8]	; (8001a50 <HAL_GetTick+0x10>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	20002728 	.word	0x20002728

08001a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a5c:	f7ff fff0 	bl	8001a40 <HAL_GetTick>
 8001a60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a6c:	d005      	beq.n	8001a7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_Delay+0x44>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4413      	add	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a7a:	bf00      	nop
 8001a7c:	f7ff ffe0 	bl	8001a40 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d8f7      	bhi.n	8001a7c <HAL_Delay+0x28>
  {
  }
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	20000238 	.word	0x20000238

08001a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	68ba      	ldr	r2, [r7, #8]
 8001ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <__NVIC_GetPriorityGrouping+0x18>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	f003 0307 	and.w	r3, r3, #7
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	db0b      	blt.n	8001b2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f003 021f 	and.w	r2, r3, #31
 8001b18:	4906      	ldr	r1, [pc, #24]	; (8001b34 <__NVIC_EnableIRQ+0x34>)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	095b      	lsrs	r3, r3, #5
 8001b20:	2001      	movs	r0, #1
 8001b22:	fa00 f202 	lsl.w	r2, r0, r2
 8001b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100

08001b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db0a      	blt.n	8001b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <__NVIC_SetPriority+0x4c>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	0112      	lsls	r2, r2, #4
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b60:	e00a      	b.n	8001b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	4908      	ldr	r1, [pc, #32]	; (8001b88 <__NVIC_SetPriority+0x50>)
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	0112      	lsls	r2, r2, #4
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	440b      	add	r3, r1
 8001b76:	761a      	strb	r2, [r3, #24]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	; 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f1c3 0307 	rsb	r3, r3, #7
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	bf28      	it	cs
 8001baa:	2304      	movcs	r3, #4
 8001bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	2b06      	cmp	r3, #6
 8001bb4:	d902      	bls.n	8001bbc <NVIC_EncodePriority+0x30>
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3b03      	subs	r3, #3
 8001bba:	e000      	b.n	8001bbe <NVIC_EncodePriority+0x32>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	43da      	mvns	r2, r3
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	401a      	ands	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	43d9      	mvns	r1, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	4313      	orrs	r3, r2
         );
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c00:	d301      	bcc.n	8001c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00f      	b.n	8001c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <SysTick_Config+0x40>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0e:	210f      	movs	r1, #15
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c14:	f7ff ff90 	bl	8001b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <SysTick_Config+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <SysTick_Config+0x40>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010

08001c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff2d 	bl	8001a9c <__NVIC_SetPriorityGrouping>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5c:	f7ff ff42 	bl	8001ae4 <__NVIC_GetPriorityGrouping>
 8001c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff ff90 	bl	8001b8c <NVIC_EncodePriority>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5f 	bl	8001b38 <__NVIC_SetPriority>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff35 	bl	8001b00 <__NVIC_EnableIRQ>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ffa2 	bl	8001bf0 <SysTick_Config>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b085      	sub	sp, #20
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d008      	beq.n	8001ce0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e020      	b.n	8001d22 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 020e 	bic.w	r2, r2, #14
 8001cee:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0201 	bic.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d08:	2101      	movs	r1, #1
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d005      	beq.n	8001d50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2204      	movs	r2, #4
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
 8001d4e:	e051      	b.n	8001df4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 020e 	bic.w	r2, r2, #14
 8001d5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a22      	ldr	r2, [pc, #136]	; (8001e00 <HAL_DMA_Abort_IT+0xd4>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d029      	beq.n	8001dce <HAL_DMA_Abort_IT+0xa2>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <HAL_DMA_Abort_IT+0xd8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d022      	beq.n	8001dca <HAL_DMA_Abort_IT+0x9e>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1f      	ldr	r2, [pc, #124]	; (8001e08 <HAL_DMA_Abort_IT+0xdc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01a      	beq.n	8001dc4 <HAL_DMA_Abort_IT+0x98>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <HAL_DMA_Abort_IT+0xe0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d012      	beq.n	8001dbe <HAL_DMA_Abort_IT+0x92>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <HAL_DMA_Abort_IT+0xe4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00a      	beq.n	8001db8 <HAL_DMA_Abort_IT+0x8c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1b      	ldr	r2, [pc, #108]	; (8001e14 <HAL_DMA_Abort_IT+0xe8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d102      	bne.n	8001db2 <HAL_DMA_Abort_IT+0x86>
 8001dac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001db0:	e00e      	b.n	8001dd0 <HAL_DMA_Abort_IT+0xa4>
 8001db2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001db6:	e00b      	b.n	8001dd0 <HAL_DMA_Abort_IT+0xa4>
 8001db8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dbc:	e008      	b.n	8001dd0 <HAL_DMA_Abort_IT+0xa4>
 8001dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc2:	e005      	b.n	8001dd0 <HAL_DMA_Abort_IT+0xa4>
 8001dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc8:	e002      	b.n	8001dd0 <HAL_DMA_Abort_IT+0xa4>
 8001dca:	2310      	movs	r3, #16
 8001dcc:	e000      	b.n	8001dd0 <HAL_DMA_Abort_IT+0xa4>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	4a11      	ldr	r2, [pc, #68]	; (8001e18 <HAL_DMA_Abort_IT+0xec>)
 8001dd2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
    } 
  }
  return status;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40020008 	.word	0x40020008
 8001e04:	4002001c 	.word	0x4002001c
 8001e08:	40020030 	.word	0x40020030
 8001e0c:	40020044 	.word	0x40020044
 8001e10:	40020058 	.word	0x40020058
 8001e14:	4002006c 	.word	0x4002006c
 8001e18:	40020000 	.word	0x40020000

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b08b      	sub	sp, #44	; 0x2c
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2e:	e169      	b.n	8002104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e30:	2201      	movs	r2, #1
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	f040 8158 	bne.w	80020fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4a9a      	ldr	r2, [pc, #616]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d05e      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e58:	4a98      	ldr	r2, [pc, #608]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d875      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e5e:	4a98      	ldr	r2, [pc, #608]	; (80020c0 <HAL_GPIO_Init+0x2a4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d058      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e64:	4a96      	ldr	r2, [pc, #600]	; (80020c0 <HAL_GPIO_Init+0x2a4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d86f      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e6a:	4a96      	ldr	r2, [pc, #600]	; (80020c4 <HAL_GPIO_Init+0x2a8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d052      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e70:	4a94      	ldr	r2, [pc, #592]	; (80020c4 <HAL_GPIO_Init+0x2a8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d869      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e76:	4a94      	ldr	r2, [pc, #592]	; (80020c8 <HAL_GPIO_Init+0x2ac>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d04c      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e7c:	4a92      	ldr	r2, [pc, #584]	; (80020c8 <HAL_GPIO_Init+0x2ac>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d863      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e82:	4a92      	ldr	r2, [pc, #584]	; (80020cc <HAL_GPIO_Init+0x2b0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d046      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
 8001e88:	4a90      	ldr	r2, [pc, #576]	; (80020cc <HAL_GPIO_Init+0x2b0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d85d      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e8e:	2b12      	cmp	r3, #18
 8001e90:	d82a      	bhi.n	8001ee8 <HAL_GPIO_Init+0xcc>
 8001e92:	2b12      	cmp	r3, #18
 8001e94:	d859      	bhi.n	8001f4a <HAL_GPIO_Init+0x12e>
 8001e96:	a201      	add	r2, pc, #4	; (adr r2, 8001e9c <HAL_GPIO_Init+0x80>)
 8001e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e9c:	08001f17 	.word	0x08001f17
 8001ea0:	08001ef1 	.word	0x08001ef1
 8001ea4:	08001f03 	.word	0x08001f03
 8001ea8:	08001f45 	.word	0x08001f45
 8001eac:	08001f4b 	.word	0x08001f4b
 8001eb0:	08001f4b 	.word	0x08001f4b
 8001eb4:	08001f4b 	.word	0x08001f4b
 8001eb8:	08001f4b 	.word	0x08001f4b
 8001ebc:	08001f4b 	.word	0x08001f4b
 8001ec0:	08001f4b 	.word	0x08001f4b
 8001ec4:	08001f4b 	.word	0x08001f4b
 8001ec8:	08001f4b 	.word	0x08001f4b
 8001ecc:	08001f4b 	.word	0x08001f4b
 8001ed0:	08001f4b 	.word	0x08001f4b
 8001ed4:	08001f4b 	.word	0x08001f4b
 8001ed8:	08001f4b 	.word	0x08001f4b
 8001edc:	08001f4b 	.word	0x08001f4b
 8001ee0:	08001ef9 	.word	0x08001ef9
 8001ee4:	08001f0d 	.word	0x08001f0d
 8001ee8:	4a79      	ldr	r2, [pc, #484]	; (80020d0 <HAL_GPIO_Init+0x2b4>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d013      	beq.n	8001f16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eee:	e02c      	b.n	8001f4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	623b      	str	r3, [r7, #32]
          break;
 8001ef6:	e029      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	3304      	adds	r3, #4
 8001efe:	623b      	str	r3, [r7, #32]
          break;
 8001f00:	e024      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	3308      	adds	r3, #8
 8001f08:	623b      	str	r3, [r7, #32]
          break;
 8001f0a:	e01f      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	330c      	adds	r3, #12
 8001f12:	623b      	str	r3, [r7, #32]
          break;
 8001f14:	e01a      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d102      	bne.n	8001f24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f1e:	2304      	movs	r3, #4
 8001f20:	623b      	str	r3, [r7, #32]
          break;
 8001f22:	e013      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d105      	bne.n	8001f38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f2c:	2308      	movs	r3, #8
 8001f2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69fa      	ldr	r2, [r7, #28]
 8001f34:	611a      	str	r2, [r3, #16]
          break;
 8001f36:	e009      	b.n	8001f4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f38:	2308      	movs	r3, #8
 8001f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	615a      	str	r2, [r3, #20]
          break;
 8001f42:	e003      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f44:	2300      	movs	r3, #0
 8001f46:	623b      	str	r3, [r7, #32]
          break;
 8001f48:	e000      	b.n	8001f4c <HAL_GPIO_Init+0x130>
          break;
 8001f4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2bff      	cmp	r3, #255	; 0xff
 8001f50:	d801      	bhi.n	8001f56 <HAL_GPIO_Init+0x13a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	e001      	b.n	8001f5a <HAL_GPIO_Init+0x13e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	2bff      	cmp	r3, #255	; 0xff
 8001f60:	d802      	bhi.n	8001f68 <HAL_GPIO_Init+0x14c>
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	e002      	b.n	8001f6e <HAL_GPIO_Init+0x152>
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	3b08      	subs	r3, #8
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	210f      	movs	r1, #15
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	401a      	ands	r2, r3
 8001f80:	6a39      	ldr	r1, [r7, #32]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80b1 	beq.w	80020fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f9c:	4b4d      	ldr	r3, [pc, #308]	; (80020d4 <HAL_GPIO_Init+0x2b8>)
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	4a4c      	ldr	r2, [pc, #304]	; (80020d4 <HAL_GPIO_Init+0x2b8>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6193      	str	r3, [r2, #24]
 8001fa8:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <HAL_GPIO_Init+0x2b8>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fb4:	4a48      	ldr	r2, [pc, #288]	; (80020d8 <HAL_GPIO_Init+0x2bc>)
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	089b      	lsrs	r3, r3, #2
 8001fba:	3302      	adds	r3, #2
 8001fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a40      	ldr	r2, [pc, #256]	; (80020dc <HAL_GPIO_Init+0x2c0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d013      	beq.n	8002008 <HAL_GPIO_Init+0x1ec>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a3f      	ldr	r2, [pc, #252]	; (80020e0 <HAL_GPIO_Init+0x2c4>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00d      	beq.n	8002004 <HAL_GPIO_Init+0x1e8>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a3e      	ldr	r2, [pc, #248]	; (80020e4 <HAL_GPIO_Init+0x2c8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d007      	beq.n	8002000 <HAL_GPIO_Init+0x1e4>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3d      	ldr	r2, [pc, #244]	; (80020e8 <HAL_GPIO_Init+0x2cc>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_GPIO_Init+0x1e0>
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e006      	b.n	800200a <HAL_GPIO_Init+0x1ee>
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	e004      	b.n	800200a <HAL_GPIO_Init+0x1ee>
 8002000:	2302      	movs	r3, #2
 8002002:	e002      	b.n	800200a <HAL_GPIO_Init+0x1ee>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_GPIO_Init+0x1ee>
 8002008:	2300      	movs	r3, #0
 800200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200c:	f002 0203 	and.w	r2, r2, #3
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	4093      	lsls	r3, r2
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800201a:	492f      	ldr	r1, [pc, #188]	; (80020d8 <HAL_GPIO_Init+0x2bc>)
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	089b      	lsrs	r3, r3, #2
 8002020:	3302      	adds	r3, #2
 8002022:	68fa      	ldr	r2, [r7, #12]
 8002024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	492c      	ldr	r1, [pc, #176]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	608b      	str	r3, [r1, #8]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002042:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	4928      	ldr	r1, [pc, #160]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 800204c:	4013      	ands	r3, r2
 800204e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	4922      	ldr	r1, [pc, #136]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	60cb      	str	r3, [r1, #12]
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800206a:	4b20      	ldr	r3, [pc, #128]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	43db      	mvns	r3, r3
 8002072:	491e      	ldr	r1, [pc, #120]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8002074:	4013      	ands	r3, r2
 8002076:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	4918      	ldr	r1, [pc, #96]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	604b      	str	r3, [r1, #4]
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	43db      	mvns	r3, r3
 800209a:	4914      	ldr	r1, [pc, #80]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 800209c:	4013      	ands	r3, r2
 800209e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d021      	beq.n	80020f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	490e      	ldr	r1, [pc, #56]	; (80020ec <HAL_GPIO_Init+0x2d0>)
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
 80020b8:	e021      	b.n	80020fe <HAL_GPIO_Init+0x2e2>
 80020ba:	bf00      	nop
 80020bc:	10320000 	.word	0x10320000
 80020c0:	10310000 	.word	0x10310000
 80020c4:	10220000 	.word	0x10220000
 80020c8:	10210000 	.word	0x10210000
 80020cc:	10120000 	.word	0x10120000
 80020d0:	10110000 	.word	0x10110000
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010000 	.word	0x40010000
 80020dc:	40010800 	.word	0x40010800
 80020e0:	40010c00 	.word	0x40010c00
 80020e4:	40011000 	.word	0x40011000
 80020e8:	40011400 	.word	0x40011400
 80020ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_GPIO_Init+0x304>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4909      	ldr	r1, [pc, #36]	; (8002120 <HAL_GPIO_Init+0x304>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002100:	3301      	adds	r3, #1
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	f47f ae8e 	bne.w	8001e30 <HAL_GPIO_Init+0x14>
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	372c      	adds	r7, #44	; 0x2c
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	40010400 	.word	0x40010400

08002124 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	887b      	ldrh	r3, [r7, #2]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e001      	b.n	8002146 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	807b      	strh	r3, [r7, #2]
 800215e:	4613      	mov	r3, r2
 8002160:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002162:	787b      	ldrb	r3, [r7, #1]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002168:	887a      	ldrh	r2, [r7, #2]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800216e:	e003      	b.n	8002178 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	041a      	lsls	r2, r3, #16
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	611a      	str	r2, [r3, #16]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr
	...

08002184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e272      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8087 	beq.w	80022b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a4:	4b92      	ldr	r3, [pc, #584]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d00c      	beq.n	80021ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b0:	4b8f      	ldr	r3, [pc, #572]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d112      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
 80021bc:	4b8c      	ldr	r3, [pc, #560]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d10b      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ca:	4b89      	ldr	r3, [pc, #548]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d06c      	beq.n	80022b0 <HAL_RCC_OscConfig+0x12c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d168      	bne.n	80022b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e24c      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x76>
 80021ec:	4b80      	ldr	r3, [pc, #512]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a7f      	ldr	r2, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	e02e      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b7b      	ldr	r3, [pc, #492]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7a      	ldr	r2, [pc, #488]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b78      	ldr	r3, [pc, #480]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a77      	ldr	r2, [pc, #476]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e01d      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0xbc>
 8002226:	4b72      	ldr	r3, [pc, #456]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a71      	ldr	r2, [pc, #452]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 8002240:	4b6b      	ldr	r3, [pc, #428]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6a      	ldr	r2, [pc, #424]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a67      	ldr	r2, [pc, #412]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7ff fbee 	bl	8001a40 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7ff fbea 	bl	8001a40 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e200      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b5d      	ldr	r3, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0xe4>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fbda 	bl	8001a40 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7ff fbd6 	bl	8001a40 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1ec      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x10c>
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d063      	beq.n	8002386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ca:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_OscConfig+0x18c>
 80022d6:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d116      	bne.n	8002310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_RCC_OscConfig+0x176>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e1c0      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4939      	ldr	r1, [pc, #228]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	e03a      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002318:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7ff fb8f 	bl	8001a40 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002326:	f7ff fb8b 	bl	8001a40 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e1a1      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4927      	ldr	r1, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7ff fb6e 	bl	8001a40 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7ff fb6a 	bl	8001a40 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e180      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d03a      	beq.n	8002408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d019      	beq.n	80023ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a0:	f7ff fb4e 	bl	8001a40 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7ff fb4a 	bl	8001a40 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e160      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 face 	bl	8002968 <RCC_Delay>
 80023cc:	e01c      	b.n	8002408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7ff fb34 	bl	8001a40 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023da:	e00f      	b.n	80023fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7ff fb30 	bl	8001a40 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d908      	bls.n	80023fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e146      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	42420000 	.word	0x42420000
 80023f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	4b92      	ldr	r3, [pc, #584]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e9      	bne.n	80023dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a6 	beq.w	8002562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b88      	ldr	r3, [pc, #544]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a87      	ldr	r2, [pc, #540]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b85      	ldr	r3, [pc, #532]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243e:	2301      	movs	r3, #1
 8002440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002442:	4b82      	ldr	r3, [pc, #520]	; (800264c <HAL_RCC_OscConfig+0x4c8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d118      	bne.n	8002480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244e:	4b7f      	ldr	r3, [pc, #508]	; (800264c <HAL_RCC_OscConfig+0x4c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7e      	ldr	r2, [pc, #504]	; (800264c <HAL_RCC_OscConfig+0x4c8>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245a:	f7ff faf1 	bl	8001a40 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002462:	f7ff faed 	bl	8001a40 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b64      	cmp	r3, #100	; 0x64
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e103      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b75      	ldr	r3, [pc, #468]	; (800264c <HAL_RCC_OscConfig+0x4c8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d106      	bne.n	8002496 <HAL_RCC_OscConfig+0x312>
 8002488:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a6e      	ldr	r2, [pc, #440]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	e02d      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x334>
 800249e:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a69      	ldr	r2, [pc, #420]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	4b67      	ldr	r3, [pc, #412]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a66      	ldr	r2, [pc, #408]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	e01c      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d10c      	bne.n	80024da <HAL_RCC_OscConfig+0x356>
 80024c0:	4b61      	ldr	r3, [pc, #388]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a60      	ldr	r2, [pc, #384]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	4b5e      	ldr	r3, [pc, #376]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a5d      	ldr	r2, [pc, #372]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	e00b      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 80024da:	4b5b      	ldr	r3, [pc, #364]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a5a      	ldr	r2, [pc, #360]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	4b58      	ldr	r3, [pc, #352]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a57      	ldr	r2, [pc, #348]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d015      	beq.n	8002526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7ff faa1 	bl	8001a40 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7ff fa9d 	bl	8001a40 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0b1      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	4b4b      	ldr	r3, [pc, #300]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ee      	beq.n	8002502 <HAL_RCC_OscConfig+0x37e>
 8002524:	e014      	b.n	8002550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7ff fa8b 	bl	8001a40 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7ff fa87 	bl	8001a40 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e09b      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	4b40      	ldr	r3, [pc, #256]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ee      	bne.n	800252e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b3c      	ldr	r3, [pc, #240]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a3b      	ldr	r2, [pc, #236]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8087 	beq.w	800267a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256c:	4b36      	ldr	r3, [pc, #216]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d061      	beq.n	800263c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d146      	bne.n	800260e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	4b33      	ldr	r3, [pc, #204]	; (8002650 <HAL_RCC_OscConfig+0x4cc>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7ff fa5b 	bl	8001a40 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258e:	f7ff fa57 	bl	8001a40 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e06d      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a0:	4b29      	ldr	r3, [pc, #164]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b4:	d108      	bne.n	80025c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4921      	ldr	r1, [pc, #132]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a19      	ldr	r1, [r3, #32]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	430b      	orrs	r3, r1
 80025da:	491b      	ldr	r1, [pc, #108]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <HAL_RCC_OscConfig+0x4cc>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7ff fa2b 	bl	8001a40 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ee:	f7ff fa27 	bl	8001a40 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e03d      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x46a>
 800260c:	e035      	b.n	800267a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_RCC_OscConfig+0x4cc>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7ff fa14 	bl	8001a40 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7ff fa10 	bl	8001a40 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e026      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x498>
 800263a:	e01e      	b.n	800267a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d107      	bne.n	8002654 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e019      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
 8002648:	40021000 	.word	0x40021000
 800264c:	40007000 	.word	0x40007000
 8002650:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_OscConfig+0x500>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	429a      	cmp	r2, r3
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	429a      	cmp	r2, r3
 8002674:	d001      	beq.n	800267a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021000 	.word	0x40021000

08002688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0d0      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0307 	and.w	r3, r3, #7
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d910      	bls.n	80026cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 0207 	bic.w	r2, r3, #7
 80026b2:	4965      	ldr	r1, [pc, #404]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002706:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d040      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d115      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e073      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e06b      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4936      	ldr	r1, [pc, #216]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002778:	f7ff f962 	bl	8001a40 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7ff f95e 	bl	8001a40 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e053      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d210      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 0207 	bic.w	r2, r3, #7
 80027be:	4922      	ldr	r1, [pc, #136]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f821 	bl	800285c <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	490a      	ldr	r1, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1cc>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1d0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff f8c0 	bl	80019bc <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40022000 	.word	0x40022000
 800284c:	40021000 	.word	0x40021000
 8002850:	08005a98 	.word	0x08005a98
 8002854:	20000230 	.word	0x20000230
 8002858:	20000234 	.word	0x20000234

0800285c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b04      	cmp	r3, #4
 8002884:	d002      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0x30>
 8002886:	2b08      	cmp	r3, #8
 8002888:	d003      	beq.n	8002892 <HAL_RCC_GetSysClockFreq+0x36>
 800288a:	e027      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800288e:	613b      	str	r3, [r7, #16]
      break;
 8002890:	e027      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	0c9b      	lsrs	r3, r3, #18
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	4a17      	ldr	r2, [pc, #92]	; (80028f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800289c:	5cd3      	ldrb	r3, [r2, r3]
 800289e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d010      	beq.n	80028cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028aa:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	0c5b      	lsrs	r3, r3, #17
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	4a11      	ldr	r2, [pc, #68]	; (80028fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80028b6:	5cd3      	ldrb	r3, [r2, r3]
 80028b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028be:	fb03 f202 	mul.w	r2, r3, r2
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	e004      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028d0:	fb02 f303 	mul.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	613b      	str	r3, [r7, #16]
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80028de:	613b      	str	r3, [r7, #16]
      break;
 80028e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e2:	693b      	ldr	r3, [r7, #16]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	007a1200 	.word	0x007a1200
 80028f8:	08005ab0 	.word	0x08005ab0
 80028fc:	08005ac0 	.word	0x08005ac0
 8002900:	003d0900 	.word	0x003d0900

08002904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002908:	4b02      	ldr	r3, [pc, #8]	; (8002914 <HAL_RCC_GetHCLKFreq+0x10>)
 800290a:	681b      	ldr	r3, [r3, #0]
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	20000230 	.word	0x20000230

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800291c:	f7ff fff2 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	0a1b      	lsrs	r3, r3, #8
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4903      	ldr	r1, [pc, #12]	; (800293c <HAL_RCC_GetPCLK1Freq+0x24>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	08005aa8 	.word	0x08005aa8

08002940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002944:	f7ff ffde 	bl	8002904 <HAL_RCC_GetHCLKFreq>
 8002948:	4602      	mov	r2, r0
 800294a:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x20>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	0adb      	lsrs	r3, r3, #11
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	4903      	ldr	r1, [pc, #12]	; (8002964 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002956:	5ccb      	ldrb	r3, [r1, r3]
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	08005aa8 	.word	0x08005aa8

08002968 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002970:	4b0a      	ldr	r3, [pc, #40]	; (800299c <RCC_Delay+0x34>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <RCC_Delay+0x38>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0a5b      	lsrs	r3, r3, #9
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	fb02 f303 	mul.w	r3, r2, r3
 8002982:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002984:	bf00      	nop
  }
  while (Delay --);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1e5a      	subs	r2, r3, #1
 800298a:	60fa      	str	r2, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1f9      	bne.n	8002984 <RCC_Delay+0x1c>
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	20000230 	.word	0x20000230
 80029a0:	10624dd3 	.word	0x10624dd3

080029a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e041      	b.n	8002a3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe fe30 	bl	8001630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2202      	movs	r2, #2
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3304      	adds	r3, #4
 80029e0:	4619      	mov	r1, r3
 80029e2:	4610      	mov	r0, r2
 80029e4:	f000 fa74 	bl	8002ed0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d001      	beq.n	8002a5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e03a      	b.n	8002ad2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2202      	movs	r2, #2
 8002a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a18      	ldr	r2, [pc, #96]	; (8002adc <HAL_TIM_Base_Start_IT+0x98>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00e      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0x58>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a86:	d009      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0x58>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d004      	beq.n	8002a9c <HAL_TIM_Base_Start_IT+0x58>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a13      	ldr	r2, [pc, #76]	; (8002ae4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d111      	bne.n	8002ac0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d010      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002abe:	e007      	b.n	8002ad0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	40012c00 	.word	0x40012c00
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40000800 	.word	0x40000800

08002ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0202 	mvn.w	r2, #2
 8002b14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f9b4 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f9a7 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f9b6 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0304 	and.w	r3, r3, #4
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0204 	mvn.w	r2, #4
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f98a 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f97d 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f98c 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0208 	mvn.w	r2, #8
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2204      	movs	r2, #4
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f960 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f953 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f962 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d122      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d11b      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0210 	mvn.w	r2, #16
 8002c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2208      	movs	r2, #8
 8002c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f936 	bl	8002e98 <HAL_TIM_IC_CaptureCallback>
 8002c2c:	e005      	b.n	8002c3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f929 	bl	8002e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 f938 	bl	8002eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0201 	mvn.w	r2, #1
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe f8d0 	bl	8000e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c76:	2b80      	cmp	r3, #128	; 0x80
 8002c78:	d10e      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c84:	2b80      	cmp	r3, #128	; 0x80
 8002c86:	d107      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fa7b 	bl	800318e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb0:	2b40      	cmp	r3, #64	; 0x40
 8002cb2:	d107      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f8fc 	bl	8002ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b20      	cmp	r3, #32
 8002cde:	d107      	bne.n	8002cf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0220 	mvn.w	r2, #32
 8002ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fa46 	bl	800317c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	3708      	adds	r7, #8
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_TIM_ConfigClockSource+0x1c>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e0b4      	b.n	8002e7e <HAL_TIM_ConfigClockSource+0x186>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d4c:	d03e      	beq.n	8002dcc <HAL_TIM_ConfigClockSource+0xd4>
 8002d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d52:	f200 8087 	bhi.w	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5a:	f000 8086 	beq.w	8002e6a <HAL_TIM_ConfigClockSource+0x172>
 8002d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d62:	d87f      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d64:	2b70      	cmp	r3, #112	; 0x70
 8002d66:	d01a      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0xa6>
 8002d68:	2b70      	cmp	r3, #112	; 0x70
 8002d6a:	d87b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d6c:	2b60      	cmp	r3, #96	; 0x60
 8002d6e:	d050      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x11a>
 8002d70:	2b60      	cmp	r3, #96	; 0x60
 8002d72:	d877      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d74:	2b50      	cmp	r3, #80	; 0x50
 8002d76:	d03c      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xfa>
 8002d78:	2b50      	cmp	r3, #80	; 0x50
 8002d7a:	d873      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d7c:	2b40      	cmp	r3, #64	; 0x40
 8002d7e:	d058      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x13a>
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d86f      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d84:	2b30      	cmp	r3, #48	; 0x30
 8002d86:	d064      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d88:	2b30      	cmp	r3, #48	; 0x30
 8002d8a:	d86b      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d8c:	2b20      	cmp	r3, #32
 8002d8e:	d060      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d867      	bhi.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d05c      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d98:	2b10      	cmp	r3, #16
 8002d9a:	d05a      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x15a>
 8002d9c:	e062      	b.n	8002e64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6899      	ldr	r1, [r3, #8]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f000 f968 	bl	8003082 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	609a      	str	r2, [r3, #8]
      break;
 8002dca:	e04f      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6899      	ldr	r1, [r3, #8]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f000 f951 	bl	8003082 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dee:	609a      	str	r2, [r3, #8]
      break;
 8002df0:	e03c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f000 f8c8 	bl	8002f94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2150      	movs	r1, #80	; 0x50
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f91f 	bl	800304e <TIM_ITRx_SetConfig>
      break;
 8002e10:	e02c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 f8e6 	bl	8002ff0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2160      	movs	r1, #96	; 0x60
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f90f 	bl	800304e <TIM_ITRx_SetConfig>
      break;
 8002e30:	e01c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f000 f8a8 	bl	8002f94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2140      	movs	r1, #64	; 0x40
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f8ff 	bl	800304e <TIM_ITRx_SetConfig>
      break;
 8002e50:	e00c      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f000 f8f6 	bl	800304e <TIM_ITRx_SetConfig>
      break;
 8002e62:	e003      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
      break;
 8002e68:	e000      	b.n	8002e6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr

08002e98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
	...

08002ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <TIM_Base_SetConfig+0xb8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00b      	beq.n	8002f00 <TIM_Base_SetConfig+0x30>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d007      	beq.n	8002f00 <TIM_Base_SetConfig+0x30>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <TIM_Base_SetConfig+0xbc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d003      	beq.n	8002f00 <TIM_Base_SetConfig+0x30>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <TIM_Base_SetConfig+0xc0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d108      	bne.n	8002f12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <TIM_Base_SetConfig+0xb8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00b      	beq.n	8002f32 <TIM_Base_SetConfig+0x62>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d007      	beq.n	8002f32 <TIM_Base_SetConfig+0x62>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a19      	ldr	r2, [pc, #100]	; (8002f8c <TIM_Base_SetConfig+0xbc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d003      	beq.n	8002f32 <TIM_Base_SetConfig+0x62>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <TIM_Base_SetConfig+0xc0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d108      	bne.n	8002f44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a07      	ldr	r2, [pc, #28]	; (8002f88 <TIM_Base_SetConfig+0xb8>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d103      	bne.n	8002f78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	615a      	str	r2, [r3, #20]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40000800 	.word	0x40000800

08002f94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b087      	sub	sp, #28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f023 0201 	bic.w	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	011b      	lsls	r3, r3, #4
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f023 030a 	bic.w	r3, r3, #10
 8002fd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	693a      	ldr	r2, [r7, #16]
 8002fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	621a      	str	r2, [r3, #32]
}
 8002fe6:	bf00      	nop
 8002fe8:	371c      	adds	r7, #28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr

08002ff0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f023 0210 	bic.w	r2, r3, #16
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800301a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	031b      	lsls	r3, r3, #12
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800302c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	621a      	str	r2, [r3, #32]
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	bc80      	pop	{r7}
 800304c:	4770      	bx	lr

0800304e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800304e:	b480      	push	{r7}
 8003050:	b085      	sub	sp, #20
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003064:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4313      	orrs	r3, r2
 800306c:	f043 0307 	orr.w	r3, r3, #7
 8003070:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	609a      	str	r2, [r3, #8]
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003082:	b480      	push	{r7}
 8003084:	b087      	sub	sp, #28
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
 800308e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800309c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	021a      	lsls	r2, r3, #8
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	609a      	str	r2, [r3, #8]
}
 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d101      	bne.n	80030d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e046      	b.n	8003166 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a16      	ldr	r2, [pc, #88]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00e      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003124:	d009      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a12      	ldr	r2, [pc, #72]	; (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d004      	beq.n	800313a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a10      	ldr	r2, [pc, #64]	; (8003178 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10c      	bne.n	8003154 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4313      	orrs	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68ba      	ldr	r2, [r7, #8]
 8003152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	40012c00 	.word	0x40012c00
 8003174:	40000400 	.word	0x40000400
 8003178:	40000800 	.word	0x40000800

0800317c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e042      	b.n	8003238 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fe fa58 	bl	800167c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2224      	movs	r2, #36	; 0x24
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fdc5 	bl	8003d74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003208:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003218:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	; 0x28
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b20      	cmp	r3, #32
 800325e:	d16d      	bne.n	800333c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_UART_Transmit+0x2c>
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e066      	b.n	800333e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2221      	movs	r2, #33	; 0x21
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800327e:	f7fe fbdf 	bl	8001a40 <HAL_GetTick>
 8003282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	88fa      	ldrh	r2, [r7, #6]
 800328e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003298:	d108      	bne.n	80032ac <HAL_UART_Transmit+0x6c>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d104      	bne.n	80032ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	e003      	b.n	80032b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032b4:	e02a      	b.n	800330c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	2180      	movs	r1, #128	; 0x80
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fb14 	bl	80038ee <UART_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e036      	b.n	800333e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	3302      	adds	r3, #2
 80032ea:	61bb      	str	r3, [r7, #24]
 80032ec:	e007      	b.n	80032fe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	781a      	ldrb	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	3301      	adds	r3, #1
 80032fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1cf      	bne.n	80032b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	2200      	movs	r2, #0
 800331e:	2140      	movs	r1, #64	; 0x40
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 fae4 	bl	80038ee <UART_WaitOnFlagUntilTimeout>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e006      	b.n	800333e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	e000      	b.n	800333e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
  }
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	4613      	mov	r3, r2
 8003352:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b20      	cmp	r3, #32
 800335e:	d112      	bne.n	8003386 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <HAL_UART_Receive_IT+0x26>
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e00b      	b.n	8003388 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	461a      	mov	r2, r3
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 fb24 	bl	80039ca <UART_Start_Receive_IT>
 8003382:	4603      	mov	r3, r0
 8003384:	e000      	b.n	8003388 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003386:	2302      	movs	r3, #2
  }
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b0ba      	sub	sp, #232	; 0xe8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80033bc:	2300      	movs	r3, #0
 80033be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80033c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80033ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10f      	bne.n	80033f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d009      	beq.n	80033f6 <HAL_UART_IRQHandler+0x66>
 80033e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fc01 	bl	8003bf6 <UART_Receive_IT>
      return;
 80033f4:	e25b      	b.n	80038ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80de 	beq.w	80035bc <HAL_UART_IRQHandler+0x22c>
 8003400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b00      	cmp	r3, #0
 800340a:	d106      	bne.n	800341a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800340c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003410:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80d1 	beq.w	80035bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800341a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <HAL_UART_IRQHandler+0xae>
 8003426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d005      	beq.n	800343e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003436:	f043 0201 	orr.w	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800343e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00b      	beq.n	8003462 <HAL_UART_IRQHandler+0xd2>
 800344a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	f043 0202 	orr.w	r2, r3, #2
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00b      	beq.n	8003486 <HAL_UART_IRQHandler+0xf6>
 800346e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	f043 0204 	orr.w	r2, r3, #4
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d011      	beq.n	80034b6 <HAL_UART_IRQHandler+0x126>
 8003492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d105      	bne.n	80034aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800349e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f043 0208 	orr.w	r2, r3, #8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 81f2 	beq.w	80038a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_UART_IRQHandler+0x14e>
 80034cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fb8c 	bl	8003bf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <HAL_UART_IRQHandler+0x17a>
 8003502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003506:	2b00      	cmp	r3, #0
 8003508:	d04f      	beq.n	80035aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fa96 	bl	8003a3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d041      	beq.n	80035a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3314      	adds	r3, #20
 8003524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800352c:	e853 3f00 	ldrex	r3, [r3]
 8003530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800353c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3314      	adds	r3, #20
 8003546:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800354a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800354e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003556:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800355a:	e841 2300 	strex	r3, r2, [r1]
 800355e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1d9      	bne.n	800351e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356e:	2b00      	cmp	r3, #0
 8003570:	d013      	beq.n	800359a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	4a7e      	ldr	r2, [pc, #504]	; (8003770 <HAL_UART_IRQHandler+0x3e0>)
 8003578:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357e:	4618      	mov	r0, r3
 8003580:	f7fe fbd4 	bl	8001d2c <HAL_DMA_Abort_IT>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d016      	beq.n	80035b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003594:	4610      	mov	r0, r2
 8003596:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003598:	e00e      	b.n	80035b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f993 	bl	80038c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	e00a      	b.n	80035b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f98f 	bl	80038c6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a8:	e006      	b.n	80035b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f98b 	bl	80038c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80035b6:	e175      	b.n	80038a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035b8:	bf00      	nop
    return;
 80035ba:	e173      	b.n	80038a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	f040 814f 	bne.w	8003864 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80035c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 8148 	beq.w	8003864 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80035d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8141 	beq.w	8003864 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80b6 	beq.w	8003774 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003614:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 8145 	beq.w	80038a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003622:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003626:	429a      	cmp	r2, r3
 8003628:	f080 813e 	bcs.w	80038a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003632:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b20      	cmp	r3, #32
 800363c:	f000 8088 	beq.w	8003750 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	330c      	adds	r3, #12
 8003646:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003656:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800365a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800365e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	330c      	adds	r3, #12
 8003668:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800366c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003670:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003674:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003678:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003684:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1d9      	bne.n	8003640 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003696:	e853 3f00 	ldrex	r3, [r3]
 800369a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800369c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	3314      	adds	r3, #20
 80036ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80036b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80036b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80036b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80036bc:	e841 2300 	strex	r3, r2, [r1]
 80036c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80036c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e1      	bne.n	800368c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3314      	adds	r3, #20
 80036ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036d2:	e853 3f00 	ldrex	r3, [r3]
 80036d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80036d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80036ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80036ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80036f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80036fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e3      	bne.n	80036c8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800371e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003720:	f023 0310 	bic.w	r3, r3, #16
 8003724:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	330c      	adds	r3, #12
 800372e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003732:	65ba      	str	r2, [r7, #88]	; 0x58
 8003734:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003736:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003738:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1e3      	bne.n	800370e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	4618      	mov	r0, r3
 800374c:	f7fe fab3 	bl	8001cb6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800375e:	b29b      	uxth	r3, r3
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	b29b      	uxth	r3, r3
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8b6 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800376c:	e09c      	b.n	80038a8 <HAL_UART_IRQHandler+0x518>
 800376e:	bf00      	nop
 8003770:	08003b01 	.word	0x08003b01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800377c:	b29b      	uxth	r3, r3
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 808e 	beq.w	80038ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8089 	beq.w	80038ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	330c      	adds	r3, #12
 80037a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a4:	e853 3f00 	ldrex	r3, [r3]
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	330c      	adds	r3, #12
 80037ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80037be:	647a      	str	r2, [r7, #68]	; 0x44
 80037c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e3      	bne.n	800379a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3314      	adds	r3, #20
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	e853 3f00 	ldrex	r3, [r3]
 80037e0:	623b      	str	r3, [r7, #32]
   return(result);
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	f023 0301 	bic.w	r3, r3, #1
 80037e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3314      	adds	r3, #20
 80037f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80037f6:	633a      	str	r2, [r7, #48]	; 0x30
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fe:	e841 2300 	strex	r3, r2, [r1]
 8003802:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1e3      	bne.n	80037d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	330c      	adds	r3, #12
 800381e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	e853 3f00 	ldrex	r3, [r3]
 8003826:	60fb      	str	r3, [r7, #12]
   return(result);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 0310 	bic.w	r3, r3, #16
 800382e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	330c      	adds	r3, #12
 8003838:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800383c:	61fa      	str	r2, [r7, #28]
 800383e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003840:	69b9      	ldr	r1, [r7, #24]
 8003842:	69fa      	ldr	r2, [r7, #28]
 8003844:	e841 2300 	strex	r3, r2, [r1]
 8003848:	617b      	str	r3, [r7, #20]
   return(result);
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e3      	bne.n	8003818 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003856:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800385a:	4619      	mov	r1, r3
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f83b 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003862:	e023      	b.n	80038ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386c:	2b00      	cmp	r3, #0
 800386e:	d009      	beq.n	8003884 <HAL_UART_IRQHandler+0x4f4>
 8003870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f953 	bl	8003b28 <UART_Transmit_IT>
    return;
 8003882:	e014      	b.n	80038ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00e      	beq.n	80038ae <HAL_UART_IRQHandler+0x51e>
 8003890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 f992 	bl	8003bc6 <UART_EndTransmit_IT>
    return;
 80038a2:	e004      	b.n	80038ae <HAL_UART_IRQHandler+0x51e>
    return;
 80038a4:	bf00      	nop
 80038a6:	e002      	b.n	80038ae <HAL_UART_IRQHandler+0x51e>
      return;
 80038a8:	bf00      	nop
 80038aa:	e000      	b.n	80038ae <HAL_UART_IRQHandler+0x51e>
      return;
 80038ac:	bf00      	nop
  }
}
 80038ae:	37e8      	adds	r7, #232	; 0xe8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr

080038ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b090      	sub	sp, #64	; 0x40
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038fe:	e050      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003906:	d04c      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800390a:	2b00      	cmp	r3, #0
 800390c:	d007      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0x30>
 800390e:	f7fe f897 	bl	8001a40 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800391a:	429a      	cmp	r2, r3
 800391c:	d241      	bcs.n	80039a2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	330c      	adds	r3, #12
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003934:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800393e:	637a      	str	r2, [r7, #52]	; 0x34
 8003940:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003944:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e5      	bne.n	800391e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3314      	adds	r3, #20
 8003958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	613b      	str	r3, [r7, #16]
   return(result);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f023 0301 	bic.w	r3, r3, #1
 8003968:	63bb      	str	r3, [r7, #56]	; 0x38
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3314      	adds	r3, #20
 8003970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003972:	623a      	str	r2, [r7, #32]
 8003974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	69f9      	ldr	r1, [r7, #28]
 8003978:	6a3a      	ldr	r2, [r7, #32]
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e5      	bne.n	8003952 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e00f      	b.n	80039c2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4013      	ands	r3, r2
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d09f      	beq.n	8003900 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3740      	adds	r7, #64	; 0x40
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	4613      	mov	r3, r2
 80039d6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	88fa      	ldrh	r2, [r7, #6]
 80039e2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2222      	movs	r2, #34	; 0x22
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0220 	orr.w	r2, r2, #32
 8003a2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr

08003a3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b095      	sub	sp, #84	; 0x54
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a64:	643a      	str	r2, [r7, #64]	; 0x40
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e5      	bne.n	8003a44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3314      	adds	r3, #20
 8003a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3314      	adds	r3, #20
 8003a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e5      	bne.n	8003a78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d119      	bne.n	8003ae8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f023 0310 	bic.w	r3, r3, #16
 8003aca:	647b      	str	r3, [r7, #68]	; 0x44
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ad4:	61ba      	str	r2, [r7, #24]
 8003ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	6979      	ldr	r1, [r7, #20]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e5      	bne.n	8003ab4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003af6:	bf00      	nop
 8003af8:	3754      	adds	r7, #84	; 0x54
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff fed3 	bl	80038c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b20:	bf00      	nop
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b21      	cmp	r3, #33	; 0x21
 8003b3a:	d13e      	bne.n	8003bba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b44:	d114      	bne.n	8003b70 <UART_Transmit_IT+0x48>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d110      	bne.n	8003b70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	461a      	mov	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	1c9a      	adds	r2, r3, #2
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	621a      	str	r2, [r3, #32]
 8003b6e:	e008      	b.n	8003b82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	1c59      	adds	r1, r3, #1
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6211      	str	r1, [r2, #32]
 8003b7a:	781a      	ldrb	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ba4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e000      	b.n	8003bbc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bba:	2302      	movs	r3, #2
  }
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr

08003bc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68da      	ldr	r2, [r3, #12]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2220      	movs	r2, #32
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff fe64 	bl	80038b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b08c      	sub	sp, #48	; 0x30
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b22      	cmp	r3, #34	; 0x22
 8003c08:	f040 80ae 	bne.w	8003d68 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c14:	d117      	bne.n	8003c46 <UART_Receive_IT+0x50>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d113      	bne.n	8003c46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	1c9a      	adds	r2, r3, #2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	629a      	str	r2, [r3, #40]	; 0x28
 8003c44:	e026      	b.n	8003c94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c58:	d007      	beq.n	8003c6a <UART_Receive_IT+0x74>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <UART_Receive_IT+0x82>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	701a      	strb	r2, [r3, #0]
 8003c76:	e008      	b.n	8003c8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d15d      	bne.n	8003d64 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0220 	bic.w	r2, r2, #32
 8003cb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0201 	bic.w	r2, r2, #1
 8003cd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d135      	bne.n	8003d5a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	613b      	str	r3, [r7, #16]
   return(result);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	f023 0310 	bic.w	r3, r3, #16
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d14:	623a      	str	r2, [r7, #32]
 8003d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	69f9      	ldr	r1, [r7, #28]
 8003d1a:	6a3a      	ldr	r2, [r7, #32]
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e5      	bne.n	8003cf4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b10      	cmp	r3, #16
 8003d34:	d10a      	bne.n	8003d4c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d36:	2300      	movs	r3, #0
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d50:	4619      	mov	r1, r3
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fdc0 	bl	80038d8 <HAL_UARTEx_RxEventCallback>
 8003d58:	e002      	b.n	8003d60 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7fd f942 	bl	8000fe4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	e002      	b.n	8003d6a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3730      	adds	r7, #48	; 0x30
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003dae:	f023 030c 	bic.w	r3, r3, #12
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	430b      	orrs	r3, r1
 8003dba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2c      	ldr	r2, [pc, #176]	; (8003e88 <UART_SetConfig+0x114>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d103      	bne.n	8003de4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ddc:	f7fe fdb0 	bl	8002940 <HAL_RCC_GetPCLK2Freq>
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	e002      	b.n	8003dea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003de4:	f7fe fd98 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8003de8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	009a      	lsls	r2, r3, #2
 8003df4:	441a      	add	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e00:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <UART_SetConfig+0x118>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	095b      	lsrs	r3, r3, #5
 8003e08:	0119      	lsls	r1, r3, #4
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009a      	lsls	r2, r3, #2
 8003e14:	441a      	add	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e20:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <UART_SetConfig+0x118>)
 8003e22:	fba3 0302 	umull	r0, r3, r3, r2
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	2064      	movs	r0, #100	; 0x64
 8003e2a:	fb00 f303 	mul.w	r3, r0, r3
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	3332      	adds	r3, #50	; 0x32
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <UART_SetConfig+0x118>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	095b      	lsrs	r3, r3, #5
 8003e3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e40:	4419      	add	r1, r3
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	009a      	lsls	r2, r3, #2
 8003e4c:	441a      	add	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <UART_SetConfig+0x118>)
 8003e5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e5e:	095b      	lsrs	r3, r3, #5
 8003e60:	2064      	movs	r0, #100	; 0x64
 8003e62:	fb00 f303 	mul.w	r3, r0, r3
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	3332      	adds	r3, #50	; 0x32
 8003e6c:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <UART_SetConfig+0x118>)
 8003e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	f003 020f 	and.w	r2, r3, #15
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	440a      	add	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e80:	bf00      	nop
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40013800 	.word	0x40013800
 8003e8c:	51eb851f 	.word	0x51eb851f

08003e90 <_ZN5HX711C1Ev>:


#include "HX711.h"


HX711::HX711()
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2280      	movs	r2, #128	; 0x80
 8003e9c:	709a      	strb	r2, [r3, #2]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	751a      	strb	r2, [r3, #20]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	755a      	strb	r2, [r3, #21]
{
  reset();
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f80f 	bl	8003eea <_ZN5HX7115resetEv>
}
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <_ZN5HX711D1Ev>:


HX711::~HX711()
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
{
}
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <_ZN5HX7115resetEv>:
  reset();
}


void HX711::reset()
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  power_down();
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f817 	bl	8003f26 <_ZN5HX71110power_downEv>
  power_up();
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f825 	bl	8003f48 <_ZN5HX7118power_upEv>
  _offset   = 0;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	605a      	str	r2, [r3, #4]
  _scale    = 1;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003f0a:	609a      	str	r2, [r3, #8]
  _gain     = HX711_CHANNEL_A_GAIN_128;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	709a      	strb	r2, [r3, #2]
  _lastRead = 0;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	60da      	str	r2, [r3, #12]
  _mode     = HX711_AVERAGE_MODE;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	751a      	strb	r2, [r3, #20]
}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <_ZN5HX71110power_downEv>:
///////////////////////////////////////////////////////////////
//
//  POWER MANAGEMENT
//
void HX711::power_down()
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  //  at least 60 us HIGH
  digitalWrite(_clockPin, HIGH);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	785b      	ldrb	r3, [r3, #1]
 8003f32:	2101      	movs	r1, #1
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc fb77 	bl	8000628 <LOADCELL_writeIo>
  delayMicroseconds(64);
 8003f3a:	2040      	movs	r0, #64	; 0x40
 8003f3c:	f7fc feb7 	bl	8000cae <CLOCK_delayUs>
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <_ZN5HX7118power_upEv>:


void HX711::power_up()
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  digitalWrite(_clockPin, LOW);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	785b      	ldrb	r3, [r3, #1]
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc fb66 	bl	8000628 <LOADCELL_writeIo>
}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <PN532_begin>:
    @brief  Setups the HW

    @returns  true if successful, otherwise false
*/
/**************************************************************************/
bool PN532_begin(PN532_Handle * handle) {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  for (uint8_t var = 0; var < 100; ++var) {
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]
 8003f70:	e008      	b.n	8003f84 <PN532_begin+0x20>
	  if(PN532_wakeup(handle)){
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f810 	bl	8003f98 <PN532_wakeup>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <PN532_begin+0x28>
  for (uint8_t var = 0; var < 100; ++var) {
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	3301      	adds	r3, #1
 8003f82:	73fb      	strb	r3, [r7, #15]
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b63      	cmp	r3, #99	; 0x63
 8003f88:	d9f3      	bls.n	8003f72 <PN532_begin+0xe>
 8003f8a:	e000      	b.n	8003f8e <PN532_begin+0x2a>
		  break;
 8003f8c:	bf00      	nop
	  }
  }
  return true;
 8003f8e:	2301      	movs	r3, #1
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <PN532_wakeup>:
/**************************************************************************/
/*!
    @brief  Wakeup from LowVbat mode into Normal Mode.
*/
/**************************************************************************/
bool PN532_wakeup(PN532_Handle * handle) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  // need to config SAM to stay in Normal Mode
	uint8_t w[5] = { 0x55, 0x55,0x00, 0x00, 0x00};
 8003fa0:	4a0c      	ldr	r2, [pc, #48]	; (8003fd4 <PN532_wakeup+0x3c>)
 8003fa2:	f107 0308 	add.w	r3, r7, #8
 8003fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003faa:	6018      	str	r0, [r3, #0]
 8003fac:	3304      	adds	r3, #4
 8003fae:	7019      	strb	r1, [r3, #0]
	handle->interface.write(w, 5);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f107 0208 	add.w	r2, r7, #8
 8003fb8:	2105      	movs	r1, #5
 8003fba:	4610      	mov	r0, r2
 8003fbc:	4798      	blx	r3
//	uint8_t w[3] = { 0x55, 0x00, 0x00};
//	handle->interface.write(w, 3);
	HAL_Delay(20);
 8003fbe:	2014      	movs	r0, #20
 8003fc0:	f7fd fd48 	bl	8001a54 <HAL_Delay>
	return PN532_SAMConfig(handle);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8b9 	bl	800413c <PN532_SAMConfig>
 8003fca:	4603      	mov	r3, r0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	08005490 	.word	0x08005490

08003fd8 <PN532_PrintHexChar>:

    @param  data      Pointer to the byte data
    @param  numBytes  Data length in bytes
*/
/**************************************************************************/
void PN532_PrintHexChar(const uint8_t *data, const uint32_t numBytes) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t szPos;
  for (szPos = 0; szPos < numBytes; szPos++) {
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	e020      	b.n	800402a <PN532_PrintHexChar+0x52>
    // Append leading 0 for small values
    if (data[szPos] <= 0xF)
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4413      	add	r3, r2
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b0f      	cmp	r3, #15
 8003ff2:	d803      	bhi.n	8003ffc <PN532_PrintHexChar+0x24>
    DMSG_STR("0x");
 8003ff4:	4923      	ldr	r1, [pc, #140]	; (8004084 <PN532_PrintHexChar+0xac>)
 8003ff6:	4824      	ldr	r0, [pc, #144]	; (8004088 <PN532_PrintHexChar+0xb0>)
 8003ff8:	f000 fcea 	bl	80049d0 <utils_log_raw>
    DMSG_HEX(data[szPos]);
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	4619      	mov	r1, r3
 8004006:	4821      	ldr	r0, [pc, #132]	; (800408c <PN532_PrintHexChar+0xb4>)
 8004008:	f000 fce2 	bl	80049d0 <utils_log_raw>
    if ((numBytes > 1) && (szPos != numBytes - 1)) {
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d908      	bls.n	8004024 <PN532_PrintHexChar+0x4c>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	3b01      	subs	r3, #1
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	429a      	cmp	r2, r3
 800401a:	d003      	beq.n	8004024 <PN532_PrintHexChar+0x4c>
    DMSG_STR(" ");
 800401c:	491c      	ldr	r1, [pc, #112]	; (8004090 <PN532_PrintHexChar+0xb8>)
 800401e:	481a      	ldr	r0, [pc, #104]	; (8004088 <PN532_PrintHexChar+0xb0>)
 8004020:	f000 fcd6 	bl	80049d0 <utils_log_raw>
  for (szPos = 0; szPos < numBytes; szPos++) {
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3301      	adds	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d3da      	bcc.n	8003fe8 <PN532_PrintHexChar+0x10>
    }
  }
  DMSG_STR("  ");
 8004032:	4918      	ldr	r1, [pc, #96]	; (8004094 <PN532_PrintHexChar+0xbc>)
 8004034:	4814      	ldr	r0, [pc, #80]	; (8004088 <PN532_PrintHexChar+0xb0>)
 8004036:	f000 fccb 	bl	80049d0 <utils_log_raw>
  for (szPos = 0; szPos < numBytes; szPos++) {
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	e015      	b.n	800406c <PN532_PrintHexChar+0x94>
    if (data[szPos] <= 0x1F)
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4413      	add	r3, r2
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b1f      	cmp	r3, #31
 800404a:	d804      	bhi.n	8004056 <PN532_PrintHexChar+0x7e>
    DMSG_STR(".");
 800404c:	4912      	ldr	r1, [pc, #72]	; (8004098 <PN532_PrintHexChar+0xc0>)
 800404e:	480e      	ldr	r0, [pc, #56]	; (8004088 <PN532_PrintHexChar+0xb0>)
 8004050:	f000 fcbe 	bl	80049d0 <utils_log_raw>
 8004054:	e007      	b.n	8004066 <PN532_PrintHexChar+0x8e>
    else
      DMSG_CHAR((char)data[szPos]);
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4413      	add	r3, r2
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	4619      	mov	r1, r3
 8004060:	480e      	ldr	r0, [pc, #56]	; (800409c <PN532_PrintHexChar+0xc4>)
 8004062:	f000 fcb5 	bl	80049d0 <utils_log_raw>
  for (szPos = 0; szPos < numBytes; szPos++) {
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d3e5      	bcc.n	8004040 <PN532_PrintHexChar+0x68>
  }
  DMSG_STR("\r\n");
 8004074:	490a      	ldr	r1, [pc, #40]	; (80040a0 <PN532_PrintHexChar+0xc8>)
 8004076:	4804      	ldr	r0, [pc, #16]	; (8004088 <PN532_PrintHexChar+0xb0>)
 8004078:	f000 fcaa 	bl	80049d0 <utils_log_raw>
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	08005498 	.word	0x08005498
 8004088:	0800549c 	.word	0x0800549c
 800408c:	080054a0 	.word	0x080054a0
 8004090:	080054a4 	.word	0x080054a4
 8004094:	080054ac 	.word	0x080054ac
 8004098:	080054b0 	.word	0x080054b0
 800409c:	080054b4 	.word	0x080054b4
 80040a0:	080054a8 	.word	0x080054a8

080040a4 <PN532_sendCommandCheckAck>:
              ACK was recieved
*/
/**************************************************************************/
// default timeout of one second
bool PN532_sendCommandCheckAck(PN532_Handle * handle, uint8_t *cmd, uint8_t cmdlen,
                                         uint16_t timeout) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	4611      	mov	r1, r2
 80040b0:	461a      	mov	r2, r3
 80040b2:	460b      	mov	r3, r1
 80040b4:	71fb      	strb	r3, [r7, #7]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80bb      	strh	r3, [r7, #4]

  // I2C works without using IRQ pin by polling for RDY byte
  // seems to work best with some delays between transactions
  uint8_t SLOWDOWN = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	75fb      	strb	r3, [r7, #23]

  // write the command
  PN532_writecommand(handle, cmd, cmdlen);
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	461a      	mov	r2, r3
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fa8d 	bl	80045e4 <PN532_writecommand>


  // Wait for chip to say its ready!
  if (!PN532_waitready(handle,timeout)) {
 80040ca:	88bb      	ldrh	r3, [r7, #4]
 80040cc:	4619      	mov	r1, r3
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fa20 	bl	8004514 <PN532_waitready>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f083 0301 	eor.w	r3, r3, #1
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <PN532_sendCommandCheckAck+0x40>
    return false;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e020      	b.n	8004126 <PN532_sendCommandCheckAck+0x82>
  }

#ifdef PN532DEBUG
    DMSG_STR("IRQ received");
 80040e4:	4912      	ldr	r1, [pc, #72]	; (8004130 <PN532_sendCommandCheckAck+0x8c>)
 80040e6:	4813      	ldr	r0, [pc, #76]	; (8004134 <PN532_sendCommandCheckAck+0x90>)
 80040e8:	f000 fc72 	bl	80049d0 <utils_log_raw>
#endif

  // read acknowledgement
  if (!PN532_readack(handle)) {
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f9e7 	bl	80044c0 <PN532_readack>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f083 0301 	eor.w	r3, r3, #1
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <PN532_sendCommandCheckAck+0x66>
#ifdef PN532DEBUG
    DMSG_STR("No ACK frame received!");
 80040fe:	490e      	ldr	r1, [pc, #56]	; (8004138 <PN532_sendCommandCheckAck+0x94>)
 8004100:	480c      	ldr	r0, [pc, #48]	; (8004134 <PN532_sendCommandCheckAck+0x90>)
 8004102:	f000 fc65 	bl	80049d0 <utils_log_raw>
#endif
    return false;
 8004106:	2300      	movs	r3, #0
 8004108:	e00d      	b.n	8004126 <PN532_sendCommandCheckAck+0x82>
  }

  // Wait for chip to say its ready!
    if (!PN532_waitready(handle,timeout)) {
 800410a:	88bb      	ldrh	r3, [r7, #4]
 800410c:	4619      	mov	r1, r3
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 fa00 	bl	8004514 <PN532_waitready>
 8004114:	4603      	mov	r3, r0
 8004116:	f083 0301 	eor.w	r3, r3, #1
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <PN532_sendCommandCheckAck+0x80>
      return false;
 8004120:	2300      	movs	r3, #0
 8004122:	e000      	b.n	8004126 <PN532_sendCommandCheckAck+0x82>
    }

  return true; // ack'd command
 8004124:	2301      	movs	r3, #1
}
 8004126:	4618      	mov	r0, r3
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	080054d0 	.word	0x080054d0
 8004134:	0800549c 	.word	0x0800549c
 8004138:	080054e0 	.word	0x080054e0

0800413c <PN532_SAMConfig>:
/*!
    @brief   Configures the SAM (Secure Access Module)
    @return  true on success, false otherwise.
*/
/**************************************************************************/
bool PN532_SAMConfig(PN532_Handle * handle) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  handle->pn532_packetbuffer[0] = PN532_COMMAND_SAMCONFIGURATION;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2214      	movs	r2, #20
 8004148:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  handle->pn532_packetbuffer[1] = 0x01; // normal mode;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  handle->pn532_packetbuffer[2] = 0x14; // timeout 50ms * 20 = 1 second
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2214      	movs	r2, #20
 8004158:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  handle->pn532_packetbuffer[3] = 0x01; // use IRQ pin!
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  if (!PN532_sendCommandCheckAck(handle, handle->pn532_packetbuffer, 4, 1000))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f103 0123 	add.w	r1, r3, #35	; 0x23
 800416a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800416e:	2204      	movs	r2, #4
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff ff97 	bl	80040a4 <PN532_sendCommandCheckAck>
 8004176:	4603      	mov	r3, r0
 8004178:	f083 0301 	eor.w	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <PN532_SAMConfig+0x4a>
    return false;
 8004182:	2300      	movs	r3, #0
 8004184:	e012      	b.n	80041ac <PN532_SAMConfig+0x70>

  // read data packet
  PN532_readdata(handle, handle->pn532_packetbuffer, 9);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3323      	adds	r3, #35	; 0x23
 800418a:	2209      	movs	r2, #9
 800418c:	4619      	mov	r1, r3
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f9ee 	bl	8004570 <PN532_readdata>

  int offset = 6;
 8004194:	2306      	movs	r3, #6
 8004196:	60fb      	str	r3, [r7, #12]
  return (handle->pn532_packetbuffer[offset] == 0x15);
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	3323      	adds	r3, #35	; 0x23
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b15      	cmp	r3, #21
 80041a4:	bf0c      	ite	eq
 80041a6:	2301      	moveq	r3, #1
 80041a8:	2300      	movne	r3, #0
 80041aa:	b2db      	uxtb	r3, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <PN532_readPassiveTargetID>:

    @return  1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readPassiveTargetID(PN532_Handle * handle, uint8_t cardbaudrate, uint8_t *uid,
                                         uint8_t *uidLength, uint16_t timeout) {
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	607a      	str	r2, [r7, #4]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	460b      	mov	r3, r1
 80041c2:	72fb      	strb	r3, [r7, #11]
  handle->pn532_packetbuffer[0] = PN532_COMMAND_INLISTPASSIVETARGET;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	224a      	movs	r2, #74	; 0x4a
 80041c8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  handle->pn532_packetbuffer[1] = 1; // max 1 cards at once (we can set this to 2 later)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  handle->pn532_packetbuffer[2] = cardbaudrate;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	7afa      	ldrb	r2, [r7, #11]
 80041d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if (!PN532_sendCommandCheckAck(handle, handle->pn532_packetbuffer, 3, timeout)) {
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f103 0123 	add.w	r1, r3, #35	; 0x23
 80041e2:	8b3b      	ldrh	r3, [r7, #24]
 80041e4:	2203      	movs	r2, #3
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f7ff ff5c 	bl	80040a4 <PN532_sendCommandCheckAck>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f083 0301 	eor.w	r3, r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <PN532_readPassiveTargetID+0x50>
#ifdef PN532DEBUG
    DMSG_STR("No card(s) read");
 80041f8:	4907      	ldr	r1, [pc, #28]	; (8004218 <PN532_readPassiveTargetID+0x64>)
 80041fa:	4808      	ldr	r0, [pc, #32]	; (800421c <PN532_readPassiveTargetID+0x68>)
 80041fc:	f000 fbe8 	bl	80049d0 <utils_log_raw>
#endif
    return 0x0; // no cards read
 8004200:	2300      	movs	r3, #0
 8004202:	e005      	b.n	8004210 <PN532_readPassiveTargetID+0x5c>
  }

  return PN532_readDetectedPassiveTargetID(handle, uid, uidLength);
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f809 	bl	8004220 <PN532_readDetectedPassiveTargetID>
 800420e:	4603      	mov	r3, r0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	08005584 	.word	0x08005584
 800421c:	0800549c 	.word	0x0800549c

08004220 <PN532_readDetectedPassiveTargetID>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readDetectedPassiveTargetID(PN532_Handle * handle, uint8_t *uid,
                                                 uint8_t *uidLength) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  // read data packet
  PN532_readdata(handle, handle->pn532_packetbuffer, 20);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3323      	adds	r3, #35	; 0x23
 8004230:	2214      	movs	r2, #20
 8004232:	4619      	mov	r1, r3
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f99b 	bl	8004570 <PN532_readdata>
#ifdef MIFAREDEBUG
  DMSG_STR("Found ");
  DMSG_INT(handle->pn532_packetbuffer[7]);
  DMSG_STR(" tags");
#endif
  if (handle->pn532_packetbuffer[7] != 1)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004240:	2b01      	cmp	r3, #1
 8004242:	d001      	beq.n	8004248 <PN532_readDetectedPassiveTargetID+0x28>
    return 0;
 8004244:	2300      	movs	r3, #0
 8004246:	e02a      	b.n	800429e <PN532_readDetectedPassiveTargetID+0x7e>

  uint16_t sens_res = handle->pn532_packetbuffer[9];
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800424e:	82bb      	strh	r3, [r7, #20]
  sens_res <<= 8;
 8004250:	8abb      	ldrh	r3, [r7, #20]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	82bb      	strh	r3, [r7, #20]
  sens_res |= handle->pn532_packetbuffer[10];
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800425c:	b29a      	uxth	r2, r3
 800425e:	8abb      	ldrh	r3, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	82bb      	strh	r3, [r7, #20]
  DMSG_STR("SAK: 0x");
  DMSG_HEX(handle->pn532_packetbuffer[11]);
#endif

  /* Card appears to be Mifare Classic */
  *uidLength = handle->pn532_packetbuffer[12];
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	701a      	strb	r2, [r3, #0]
#ifdef MIFAREDEBUG
  DMSG_STR("UID:");
#endif
  for (uint8_t i = 0; i < handle->pn532_packetbuffer[12]; i++) {
 800426e:	2300      	movs	r3, #0
 8004270:	75fb      	strb	r3, [r7, #23]
 8004272:	e00d      	b.n	8004290 <PN532_readDetectedPassiveTargetID+0x70>
    uid[i] = handle->pn532_packetbuffer[13 + i];
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	f103 020d 	add.w	r2, r3, #13
 800427a:	7dfb      	ldrb	r3, [r7, #23]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	440b      	add	r3, r1
 8004280:	68f9      	ldr	r1, [r7, #12]
 8004282:	440a      	add	r2, r1
 8004284:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8004288:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < handle->pn532_packetbuffer[12]; i++) {
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	3301      	adds	r3, #1
 800428e:	75fb      	strb	r3, [r7, #23]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004296:	7dfa      	ldrb	r2, [r7, #23]
 8004298:	429a      	cmp	r2, r3
 800429a:	d3eb      	bcc.n	8004274 <PN532_readDetectedPassiveTargetID+0x54>
  }
#ifdef MIFAREDEBUG
  DMSG_STR("\r\n");
#endif

  return 1;
 800429c:	2301      	movs	r3, #1
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
	...

080042a8 <PN532_mifareclassic_AuthenticateBlock>:
/**************************************************************************/
uint8_t PN532_mifareclassic_AuthenticateBlock(PN532_Handle * handle, uint8_t *uid,
                                                        uint8_t uidLen,
                                                        uint32_t blockNumber,
                                                        uint8_t keyNumber,
                                                        uint8_t *keyData) {
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	71fb      	strb	r3, [r7, #7]
  // uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy(handle->_key, keyData, 6);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	331c      	adds	r3, #28
 80042bc:	2206      	movs	r2, #6
 80042be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fbd9 	bl	8004a78 <memcpy>
  memcpy(handle->_uid, uid, uidLen);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3314      	adds	r3, #20
 80042ca:	79fa      	ldrb	r2, [r7, #7]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fbd2 	bl	8004a78 <memcpy>
  handle->_uidLen = uidLen;
 80042d4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	76da      	strb	r2, [r3, #27]
  DMSG_STR(": "));
  PrintHex(_key, 6);
#endif

  // Prepare the authentication command //
  handle->pn532_packetbuffer[0] =
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2240      	movs	r2, #64	; 0x40
 80042e0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
      PN532_COMMAND_INDATAEXCHANGE; /* Data Exchange Header */
  handle->pn532_packetbuffer[1] = 1;        /* Max card numbers */
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  handle->pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
 80042ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <PN532_mifareclassic_AuthenticateBlock+0x50>
 80042f4:	2261      	movs	r2, #97	; 0x61
 80042f6:	e000      	b.n	80042fa <PN532_mifareclassic_AuthenticateBlock+0x52>
 80042f8:	2260      	movs	r2, #96	; 0x60
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  handle->pn532_packetbuffer[3] =
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      blockNumber; /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy(handle->pn532_packetbuffer + 4, handle->_key, 6);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3323      	adds	r3, #35	; 0x23
 800430e:	1d18      	adds	r0, r3, #4
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	331c      	adds	r3, #28
 8004314:	2206      	movs	r2, #6
 8004316:	4619      	mov	r1, r3
 8004318:	f000 fbae 	bl	8004a78 <memcpy>
  for (i = 0; i < handle->_uidLen; i++) {
 800431c:	2300      	movs	r3, #0
 800431e:	75fb      	strb	r3, [r7, #23]
 8004320:	e00f      	b.n	8004342 <PN532_mifareclassic_AuthenticateBlock+0x9a>
    handle->pn532_packetbuffer[10 + i] = handle->_uid[i]; /* 4 byte card ID */
 8004322:	7dfb      	ldrb	r3, [r7, #23]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f993 2014 	ldrsb.w	r2, [r3, #20]
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	330a      	adds	r3, #10
 8004330:	b2d1      	uxtb	r1, r2
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4413      	add	r3, r2
 8004336:	460a      	mov	r2, r1
 8004338:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  for (i = 0; i < handle->_uidLen; i++) {
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	3301      	adds	r3, #1
 8004340:	75fb      	strb	r3, [r7, #23]
 8004342:	7dfb      	ldrb	r3, [r7, #23]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	f992 201b 	ldrsb.w	r2, [r2, #27]
 800434a:	4293      	cmp	r3, r2
 800434c:	dbe9      	blt.n	8004322 <PN532_mifareclassic_AuthenticateBlock+0x7a>
  }

  if (!PN532_sendCommandCheckAck(handle, handle->pn532_packetbuffer, 10 + handle->_uidLen, 1000))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f993 301b 	ldrsb.w	r3, [r3, #27]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	330a      	adds	r3, #10
 800435e:	b2da      	uxtb	r2, r3
 8004360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff fe9d 	bl	80040a4 <PN532_sendCommandCheckAck>
 800436a:	4603      	mov	r3, r0
 800436c:	f083 0301 	eor.w	r3, r3, #1
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <PN532_mifareclassic_AuthenticateBlock+0xd2>
    return 0;
 8004376:	2300      	movs	r3, #0
 8004378:	e018      	b.n	80043ac <PN532_mifareclassic_AuthenticateBlock+0x104>

  // Read the response packet
  PN532_readdata(handle, handle->pn532_packetbuffer, 12);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	3323      	adds	r3, #35	; 0x23
 800437e:	220c      	movs	r2, #12
 8004380:	4619      	mov	r1, r3
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 f8f4 	bl	8004570 <PN532_readdata>

  // check if the response is valid and we are authenticated???
  // for an auth success it should be bytes 5-7: 0xD5 0x41 0x00
  // Mifare auth error is technically byte 7: 0x14 but anything other and 0x00
  // is not good
  if (handle->pn532_packetbuffer[7] != 0x00) {
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <PN532_mifareclassic_AuthenticateBlock+0x102>
#ifdef PN532DEBUG
    DMSG_STR("Authentification failed: ");
 8004392:	4908      	ldr	r1, [pc, #32]	; (80043b4 <PN532_mifareclassic_AuthenticateBlock+0x10c>)
 8004394:	4808      	ldr	r0, [pc, #32]	; (80043b8 <PN532_mifareclassic_AuthenticateBlock+0x110>)
 8004396:	f000 fb1b 	bl	80049d0 <utils_log_raw>
    PN532_PrintHexChar(handle->pn532_packetbuffer, 12);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	3323      	adds	r3, #35	; 0x23
 800439e:	210c      	movs	r1, #12
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fe19 	bl	8003fd8 <PN532_PrintHexChar>
#endif
    return 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	e000      	b.n	80043ac <PN532_mifareclassic_AuthenticateBlock+0x104>
  }

  return 1;
 80043aa:	2301      	movs	r3, #1
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	0800572c 	.word	0x0800572c
 80043b8:	0800549c 	.word	0x0800549c

080043bc <PN532_mifareclassic_ReadDataBlock>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t PN532_mifareclassic_ReadDataBlock(PN532_Handle * handle, uint8_t blockNumber,
                                                    uint8_t *data) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	460b      	mov	r3, r1
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	72fb      	strb	r3, [r7, #11]
  DMSG_STR("Trying to read 16 bytes from block "));
  PN532DEBUGPRINT.println(blockNumber);
#endif

  /* Prepare the command */
  handle->pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2240      	movs	r2, #64	; 0x40
 80043ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  handle->pn532_packetbuffer[1] = 1;               /* Card number */
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  handle->pn532_packetbuffer[2] = MIFARE_CMD_READ; /* Mifare Read command = 0x30 */
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2230      	movs	r2, #48	; 0x30
 80043de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  handle->pn532_packetbuffer[3] =
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	7afa      	ldrb	r2, [r7, #11]
 80043e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */

  /* Send the command */
  if (!PN532_sendCommandCheckAck(handle, handle->pn532_packetbuffer, 4, 1000)) {
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f103 0123 	add.w	r1, r3, #35	; 0x23
 80043f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043f4:	2204      	movs	r2, #4
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f7ff fe54 	bl	80040a4 <PN532_sendCommandCheckAck>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f083 0301 	eor.w	r3, r3, #1
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <PN532_mifareclassic_ReadDataBlock+0x50>
#ifdef MIFAREDEBUG
    DMSG_STR("Failed to receive ACK for read command");
#endif
    return 0;
 8004408:	2300      	movs	r3, #0
 800440a:	e016      	b.n	800443a <PN532_mifareclassic_ReadDataBlock+0x7e>
  }

  /* Read the response packet */
  PN532_readdata(handle, handle->pn532_packetbuffer, 26);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3323      	adds	r3, #35	; 0x23
 8004410:	221a      	movs	r2, #26
 8004412:	4619      	mov	r1, r3
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f8ab 	bl	8004570 <PN532_readdata>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (handle->pn532_packetbuffer[7] != 0x00) {
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <PN532_mifareclassic_ReadDataBlock+0x6c>
#ifdef MIFAREDEBUG
    DMSG_STR("Unexpected response");
    PN532_PrintHexChar(handle->pn532_packetbuffer, 26);
#endif
    return 0;
 8004424:	2300      	movs	r3, #0
 8004426:	e008      	b.n	800443a <PN532_mifareclassic_ReadDataBlock+0x7e>
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy(data, handle->pn532_packetbuffer + 8, 16);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3323      	adds	r3, #35	; 0x23
 800442c:	3308      	adds	r3, #8
 800442e:	2210      	movs	r2, #16
 8004430:	4619      	mov	r1, r3
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fb20 	bl	8004a78 <memcpy>
  DMSG_STR("Block ");
  DMSG_INT(blockNumber);
  PN532_PrintHexChar(data, 16);
#endif

  return 1;
 8004438:	2301      	movs	r3, #1
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <PN532_mifareclassic_WriteDataBlock>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t PN532_mifareclassic_WriteDataBlock(PN532_Handle * handle, uint8_t blockNumber,
                                                     uint8_t *data) {
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	460b      	mov	r3, r1
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	72fb      	strb	r3, [r7, #11]
  DMSG_STR("Trying to write 16 bytes to block ");
  DMSG_INT(blockNumber);
#endif

  /* Prepare the first command */
  handle->pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2240      	movs	r2, #64	; 0x40
 8004454:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  handle->pn532_packetbuffer[1] = 1;                /* Card number */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  handle->pn532_packetbuffer[2] = MIFARE_CMD_WRITE; /* Mifare Write command = 0xA0 */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	22a0      	movs	r2, #160	; 0xa0
 8004464:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  handle->pn532_packetbuffer[3] =
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	7afa      	ldrb	r2, [r7, #11]
 800446c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */
  memcpy(handle->pn532_packetbuffer + 4, data, 16); /* Data Payload */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3323      	adds	r3, #35	; 0x23
 8004474:	3304      	adds	r3, #4
 8004476:	2210      	movs	r2, #16
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 fafc 	bl	8004a78 <memcpy>

  /* Send the command */
  if (!PN532_sendCommandCheckAck(handle, handle->pn532_packetbuffer, 20, 1000)) {
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8004486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800448a:	2214      	movs	r2, #20
 800448c:	68f8      	ldr	r0, [r7, #12]
 800448e:	f7ff fe09 	bl	80040a4 <PN532_sendCommandCheckAck>
 8004492:	4603      	mov	r3, r0
 8004494:	f083 0301 	eor.w	r3, r3, #1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <PN532_mifareclassic_WriteDataBlock+0x60>
#ifdef MIFAREDEBUG
    DMSG_STR("Failed to receive ACK for write command");
#endif
    return 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	e00a      	b.n	80044b8 <PN532_mifareclassic_WriteDataBlock+0x76>
  }
  HAL_Delay(10);
 80044a2:	200a      	movs	r0, #10
 80044a4:	f7fd fad6 	bl	8001a54 <HAL_Delay>

  /* Read the response packet */
  PN532_readdata(handle, handle->pn532_packetbuffer, 26);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3323      	adds	r3, #35	; 0x23
 80044ac:	221a      	movs	r2, #26
 80044ae:	4619      	mov	r1, r3
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f85d 	bl	8004570 <PN532_readdata>

  return 1;
 80044b6:	2301      	movs	r3, #1
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <PN532_readack>:
/**************************************************************************/
/*!
    @brief  Tries to read the SPI or I2C ACK signal
*/
/**************************************************************************/
bool PN532_readack(PN532_Handle * handle) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint8_t ackbuff[6];

  PN532_readdata(handle, ackbuff, 6);
 80044c8:	f107 0308 	add.w	r3, r7, #8
 80044cc:	2206      	movs	r2, #6
 80044ce:	4619      	mov	r1, r3
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f84d 	bl	8004570 <PN532_readdata>

  return (0 == memcmp((char *)ackbuff, (char *)pn532ack, 6));
 80044d6:	f107 0308 	add.w	r3, r7, #8
 80044da:	2206      	movs	r2, #6
 80044dc:	4906      	ldr	r1, [pc, #24]	; (80044f8 <PN532_readack+0x38>)
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 faba 	bl	8004a58 <memcmp>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	bf0c      	ite	eq
 80044ea:	2301      	moveq	r3, #1
 80044ec:	2300      	movne	r3, #0
 80044ee:	b2db      	uxtb	r3, r3
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	08005ac4 	.word	0x08005ac4

080044fc <PN532_isready>:
/**************************************************************************/
/*!
    @brief  Return true if the PN532 is ready with a response.
*/
/**************************************************************************/
bool PN532_isready(PN532_Handle * handle) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
    return handle->interface.isAvailable();
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	4798      	blx	r3
 800450a:	4603      	mov	r3, r0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <PN532_waitready>:
    @brief  Waits until the PN532 is ready.

    @param  timeout   Timeout before giving up
*/
/**************************************************************************/
bool PN532_waitready(PN532_Handle * handle, uint16_t timeout) {
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	807b      	strh	r3, [r7, #2]
  uint16_t timer = 0;
 8004520:	2300      	movs	r3, #0
 8004522:	81fb      	strh	r3, [r7, #14]
  while (!PN532_isready(handle)) {
 8004524:	e012      	b.n	800454c <PN532_waitready+0x38>
    if (timeout != 0) {
 8004526:	887b      	ldrh	r3, [r7, #2]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00c      	beq.n	8004546 <PN532_waitready+0x32>
      timer += 2;
 800452c:	89fb      	ldrh	r3, [r7, #14]
 800452e:	3302      	adds	r3, #2
 8004530:	81fb      	strh	r3, [r7, #14]
      if (timer > timeout) {
 8004532:	89fa      	ldrh	r2, [r7, #14]
 8004534:	887b      	ldrh	r3, [r7, #2]
 8004536:	429a      	cmp	r2, r3
 8004538:	d905      	bls.n	8004546 <PN532_waitready+0x32>
#ifdef PN532DEBUG
        DMSG_STR("TIMEOUT!");
 800453a:	490b      	ldr	r1, [pc, #44]	; (8004568 <PN532_waitready+0x54>)
 800453c:	480b      	ldr	r0, [pc, #44]	; (800456c <PN532_waitready+0x58>)
 800453e:	f000 fa47 	bl	80049d0 <utils_log_raw>
#endif
        return false;
 8004542:	2300      	movs	r3, #0
 8004544:	e00c      	b.n	8004560 <PN532_waitready+0x4c>
      }
    }
    HAL_Delay(1);
 8004546:	2001      	movs	r0, #1
 8004548:	f7fd fa84 	bl	8001a54 <HAL_Delay>
  while (!PN532_isready(handle)) {
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff ffd5 	bl	80044fc <PN532_isready>
 8004552:	4603      	mov	r3, r0
 8004554:	f083 0301 	eor.w	r3, r3, #1
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e3      	bne.n	8004526 <PN532_waitready+0x12>
  }
  return true;
 800455e:	2301      	movs	r3, #1
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	08005798 	.word	0x08005798
 800456c:	0800549c 	.word	0x0800549c

08004570 <PN532_readdata>:

    @param  buff      Pointer to the buffer where data will be written
    @param  n         Number of bytes to be read
*/
/**************************************************************************/
void PN532_readdata(PN532_Handle * handle, uint8_t *buff, uint8_t n) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	4613      	mov	r3, r2
 800457c:	71fb      	strb	r3, [r7, #7]
  // SPI read
  handle->interface.read(buff, n, 20);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	79f9      	ldrb	r1, [r7, #7]
 8004584:	2214      	movs	r2, #20
 8004586:	68b8      	ldr	r0, [r7, #8]
 8004588:	4798      	blx	r3
#ifdef PN532DEBUG
  DMSG_STR("Reading: ");
 800458a:	4911      	ldr	r1, [pc, #68]	; (80045d0 <PN532_readdata+0x60>)
 800458c:	4811      	ldr	r0, [pc, #68]	; (80045d4 <PN532_readdata+0x64>)
 800458e:	f000 fa1f 	bl	80049d0 <utils_log_raw>
  for (uint8_t i = 0; i < n; i++) {
 8004592:	2300      	movs	r3, #0
 8004594:	75fb      	strb	r3, [r7, #23]
 8004596:	e00e      	b.n	80045b6 <PN532_readdata+0x46>
    DMSG_STR(" 0x");
 8004598:	490f      	ldr	r1, [pc, #60]	; (80045d8 <PN532_readdata+0x68>)
 800459a:	480e      	ldr	r0, [pc, #56]	; (80045d4 <PN532_readdata+0x64>)
 800459c:	f000 fa18 	bl	80049d0 <utils_log_raw>
    DMSG_HEX(buff[i]);
 80045a0:	7dfb      	ldrb	r3, [r7, #23]
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	4413      	add	r3, r2
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	4619      	mov	r1, r3
 80045aa:	480c      	ldr	r0, [pc, #48]	; (80045dc <PN532_readdata+0x6c>)
 80045ac:	f000 fa10 	bl	80049d0 <utils_log_raw>
  for (uint8_t i = 0; i < n; i++) {
 80045b0:	7dfb      	ldrb	r3, [r7, #23]
 80045b2:	3301      	adds	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
 80045b6:	7dfa      	ldrb	r2, [r7, #23]
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d3ec      	bcc.n	8004598 <PN532_readdata+0x28>
  }
  DMSG_STR("\r\n");
 80045be:	4908      	ldr	r1, [pc, #32]	; (80045e0 <PN532_readdata+0x70>)
 80045c0:	4804      	ldr	r0, [pc, #16]	; (80045d4 <PN532_readdata+0x64>)
 80045c2:	f000 fa05 	bl	80049d0 <utils_log_raw>
#endif
}
 80045c6:	bf00      	nop
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	080057a4 	.word	0x080057a4
 80045d4:	0800549c 	.word	0x0800549c
 80045d8:	080057b0 	.word	0x080057b0
 80045dc:	080054a0 	.word	0x080054a0
 80045e0:	080054a8 	.word	0x080054a8

080045e4 <PN532_writecommand>:

    @param  cmd       Pointer to the command buffer
    @param  cmdlen    Command length in bytes
*/
/**************************************************************************/
void PN532_writecommand(PN532_Handle * handle, uint8_t *cmd, uint8_t cmdlen) {
 80045e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045e8:	b08b      	sub	sp, #44	; 0x2c
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	4613      	mov	r3, r2
 80045f2:	71fb      	strb	r3, [r7, #7]
 80045f4:	466b      	mov	r3, sp
 80045f6:	461e      	mov	r6, r3

	// Cleanup
	handle->interface.cleanUp();
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	4798      	blx	r3

	uint8_t packet[8 + cmdlen];
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	f103 0108 	add.w	r1, r3, #8
 8004604:	1e4b      	subs	r3, r1, #1
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	460a      	mov	r2, r1
 800460a:	2300      	movs	r3, #0
 800460c:	4690      	mov	r8, r2
 800460e:	4699      	mov	r9, r3
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800461c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004620:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004624:	460a      	mov	r2, r1
 8004626:	2300      	movs	r3, #0
 8004628:	4614      	mov	r4, r2
 800462a:	461d      	mov	r5, r3
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	00eb      	lsls	r3, r5, #3
 8004636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800463a:	00e2      	lsls	r2, r4, #3
 800463c:	460b      	mov	r3, r1
 800463e:	3307      	adds	r3, #7
 8004640:	08db      	lsrs	r3, r3, #3
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	ebad 0d03 	sub.w	sp, sp, r3
 8004648:	466b      	mov	r3, sp
 800464a:	3300      	adds	r3, #0
 800464c:	61bb      	str	r3, [r7, #24]
	uint8_t LEN = cmdlen + 1;
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	3301      	adds	r3, #1
 8004652:	75fb      	strb	r3, [r7, #23]

	packet[0] = PN532_PREAMBLE;
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	2200      	movs	r2, #0
 8004658:	701a      	strb	r2, [r3, #0]
	packet[1] = PN532_STARTCODE1;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2200      	movs	r2, #0
 800465e:	705a      	strb	r2, [r3, #1]
	packet[2] = PN532_STARTCODE2;
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	22ff      	movs	r2, #255	; 0xff
 8004664:	709a      	strb	r2, [r3, #2]
	packet[3] = LEN;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	7dfa      	ldrb	r2, [r7, #23]
 800466a:	70da      	strb	r2, [r3, #3]
	packet[4] = ~LEN + 1;
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	425b      	negs	r3, r3
 8004670:	b2da      	uxtb	r2, r3
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	711a      	strb	r2, [r3, #4]
	packet[5] = PN532_HOSTTOPN532;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	22d4      	movs	r2, #212	; 0xd4
 800467a:	715a      	strb	r2, [r3, #5]
	uint8_t sum = 0;
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	for (uint8_t i = 0; i < cmdlen; i++) {
 8004682:	2300      	movs	r3, #0
 8004684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004688:	e018      	b.n	80046bc <PN532_writecommand+0xd8>
	  packet[6 + i] = cmd[i];
 800468a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	441a      	add	r2, r3
 8004692:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004696:	3306      	adds	r3, #6
 8004698:	7811      	ldrb	r1, [r2, #0]
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	54d1      	strb	r1, [r2, r3]
	  sum += cmd[i];
 800469e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	4413      	add	r3, r2
 80046a6:	781a      	ldrb	r2, [r3, #0]
 80046a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80046ac:	4413      	add	r3, r2
 80046ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	for (uint8_t i = 0; i < cmdlen; i++) {
 80046b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046b6:	3301      	adds	r3, #1
 80046b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046bc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d3e1      	bcc.n	800468a <PN532_writecommand+0xa6>
	}
	packet[6 + cmdlen] = ~(PN532_HOSTTOPN532 + sum) + 1;
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	3306      	adds	r3, #6
 80046ca:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80046ce:	f1c2 022c 	rsb	r2, r2, #44	; 0x2c
 80046d2:	b2d1      	uxtb	r1, r2
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	54d1      	strb	r1, [r2, r3]
	packet[7 + cmdlen] = PN532_POSTAMBLE;
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	3307      	adds	r3, #7
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	2100      	movs	r1, #0
 80046e0:	54d1      	strb	r1, [r2, r3]

#ifdef PN532DEBUG
  DMSG_STR("Sending : ");
 80046e2:	4918      	ldr	r1, [pc, #96]	; (8004744 <PN532_writecommand+0x160>)
 80046e4:	4818      	ldr	r0, [pc, #96]	; (8004748 <PN532_writecommand+0x164>)
 80046e6:	f000 f973 	bl	80049d0 <utils_log_raw>
  for (int i = 1; i < 8 + cmdlen; i++) {
 80046ea:	2301      	movs	r3, #1
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
 80046ee:	e012      	b.n	8004716 <PN532_writecommand+0x132>
    DMSG_STR("0x");
 80046f0:	4916      	ldr	r1, [pc, #88]	; (800474c <PN532_writecommand+0x168>)
 80046f2:	4815      	ldr	r0, [pc, #84]	; (8004748 <PN532_writecommand+0x164>)
 80046f4:	f000 f96c 	bl	80049d0 <utils_log_raw>
    DMSG_HEX(packet[i]);
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	4413      	add	r3, r2
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	4619      	mov	r1, r3
 8004702:	4813      	ldr	r0, [pc, #76]	; (8004750 <PN532_writecommand+0x16c>)
 8004704:	f000 f964 	bl	80049d0 <utils_log_raw>
    DMSG_STR(", ");
 8004708:	4912      	ldr	r1, [pc, #72]	; (8004754 <PN532_writecommand+0x170>)
 800470a:	480f      	ldr	r0, [pc, #60]	; (8004748 <PN532_writecommand+0x164>)
 800470c:	f000 f960 	bl	80049d0 <utils_log_raw>
  for (int i = 1; i < 8 + cmdlen; i++) {
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	3301      	adds	r3, #1
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	3307      	adds	r3, #7
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	429a      	cmp	r2, r3
 800471e:	dde7      	ble.n	80046f0 <PN532_writecommand+0x10c>
  }
  DMSG_STR("\r\n");
 8004720:	490d      	ldr	r1, [pc, #52]	; (8004758 <PN532_writecommand+0x174>)
 8004722:	4809      	ldr	r0, [pc, #36]	; (8004748 <PN532_writecommand+0x164>)
 8004724:	f000 f954 	bl	80049d0 <utils_log_raw>
#endif

  handle->interface.write(packet, 8 + cmdlen);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	79fa      	ldrb	r2, [r7, #7]
 800472e:	3208      	adds	r2, #8
 8004730:	4611      	mov	r1, r2
 8004732:	69b8      	ldr	r0, [r7, #24]
 8004734:	4798      	blx	r3
 8004736:	46b5      	mov	sp, r6
}
 8004738:	bf00      	nop
 800473a:	372c      	adds	r7, #44	; 0x2c
 800473c:	46bd      	mov	sp, r7
 800473e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004742:	bf00      	nop
 8004744:	080057f8 	.word	0x080057f8
 8004748:	0800549c 	.word	0x0800549c
 800474c:	08005498 	.word	0x08005498
 8004750:	080054a0 	.word	0x080054a0
 8004754:	08005804 	.word	0x08005804
 8004758:	080054a8 	.word	0x080054a8

0800475c <utils_buffer_init>:
 * 
 * @param buffer Pointer to Buffer Object
 * @return true if OK
 * @return false if Failed
 */
bool utils_buffer_init(utils_buffer_t * buffer, uint16_t sizeOfObject){
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
    buffer->head = 0;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	605a      	str	r2, [r3, #4]
    buffer->tail = 0;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	601a      	str	r2, [r3, #0]
    buffer->count = 0;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
    buffer->size = sizeOfObject;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	887a      	ldrh	r2, [r7, #2]
 800477e:	f8a3 280c 	strh.w	r2, [r3, #2060]	; 0x80c
    memset(buffer->buffer , 0, sizeof(buffer->buffer));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	330c      	adds	r3, #12
 8004786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f000 f981 	bl	8004a94 <memset>
    return true;
 8004792:	2301      	movs	r3, #1
}
 8004794:	4618      	mov	r0, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <utils_buffer_push>:
 * @param data Pointer to data in
 * @param data_size Data Size
 * @return true if OK
 * @return false if Failed
 */
bool utils_buffer_push(utils_buffer_t * buffer, void * object){
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
	uint8_t * data_p = (uint8_t*) object;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	60bb      	str	r3, [r7, #8]
	if(utils_buffer_is_full(buffer)){
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f87e 	bl	80048ac <utils_buffer_is_full>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <utils_buffer_push+0x1e>
		return false;
 80047b6:	2300      	movs	r3, #0
 80047b8:	e01e      	b.n	80047f8 <utils_buffer_push+0x5c>
	}
    for (size_t i = 0; i < buffer->size; i++)
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	e013      	b.n	80047e8 <utils_buffer_push+0x4c>
    {
        buffer->buffer[buffer->head] = data_p[i];
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	441a      	add	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	7811      	ldrb	r1, [r2, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	4413      	add	r3, r2
 80047d0:	460a      	mov	r2, r1
 80047d2:	731a      	strb	r2, [r3, #12]
        buffer->head = (buffer->head + 1) % BUFFER_MAX_SIZE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	3301      	adds	r3, #1
 80047da:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < buffer->size; i++)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8b3 380c 	ldrh.w	r3, [r3, #2060]	; 0x80c
 80047ee:	461a      	mov	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d3e4      	bcc.n	80047c0 <utils_buffer_push+0x24>
    }
    return true;
 80047f6:	2301      	movs	r3, #1
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <utils_buffer_pop>:
 * @param data Pointer to data out
 * @param data_size Data size
 * @return true If OK
 * @return false If failed
 */
bool utils_buffer_pop(utils_buffer_t  * buffer, void *object){
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
	uint8_t * data_p = (uint8_t *)object;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	60bb      	str	r3, [r7, #8]
    for (size_t i = 0; i < buffer->size; i++)
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e012      	b.n	800483a <utils_buffer_pop+0x3a>
    {
        /* code */
    	data_p[i] = buffer->buffer[buffer->tail];
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	440b      	add	r3, r1
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	440a      	add	r2, r1
 8004822:	7b12      	ldrb	r2, [r2, #12]
 8004824:	701a      	strb	r2, [r3, #0]
        buffer->tail = (buffer->tail + 1) % BUFFER_MAX_SIZE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < buffer->size; i++)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3301      	adds	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 380c 	ldrh.w	r3, [r3, #2060]	; 0x80c
 8004840:	461a      	mov	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4293      	cmp	r3, r2
 8004846:	d3e5      	bcc.n	8004814 <utils_buffer_pop+0x14>
    }
    return true;
 8004848:	2301      	movs	r3, #1
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <utils_buffer_is_available>:
 * @param buffer Pointer to buffer
 * @return true if buffer available
 * @return false if buffer not available
 */

bool utils_buffer_is_available(utils_buffer_t * buffer){
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
    if(buffer->head >= buffer->tail){
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d30d      	bcc.n	8004884 <utils_buffer_is_available+0x30>
        return (buffer->head - buffer->tail >= buffer->size);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685a      	ldr	r2, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	f8b2 280c 	ldrh.w	r2, [r2, #2060]	; 0x80c
 8004878:	4293      	cmp	r3, r2
 800487a:	bf2c      	ite	cs
 800487c:	2301      	movcs	r3, #1
 800487e:	2300      	movcc	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	e00e      	b.n	80048a2 <utils_buffer_is_available+0x4e>
    }else{
    	return (BUFFER_MAX_SIZE - buffer->tail + buffer->head >= buffer->size);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	f8b2 280c 	ldrh.w	r2, [r2, #2060]	; 0x80c
 8004898:	4293      	cmp	r3, r2
 800489a:	bf2c      	ite	cs
 800489c:	2301      	movcs	r3, #1
 800489e:	2300      	movcc	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
    }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <utils_buffer_is_full>:
        return false;
    }
    memcpy(object, &buffer->buffer[buffer->size], buffer->size);
}

bool utils_buffer_is_full(utils_buffer_t * buffer){
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
	size_t remain;
	if(buffer->head >= buffer->tail){
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d308      	bcc.n	80048d2 <utils_buffer_is_full+0x26>
		remain = BUFFER_MAX_SIZE - (buffer->head - buffer->tail);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e005      	b.n	80048de <utils_buffer_is_full+0x32>
	}else{
		remain = buffer->tail - buffer->head;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	60fb      	str	r3, [r7, #12]
	}
	if(remain >= buffer->size){
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8b3 380c 	ldrh.w	r3, [r3, #2060]	; 0x80c
 80048e4:	461a      	mov	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d301      	bcc.n	80048f0 <utils_buffer_is_full+0x44>
		return false;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e000      	b.n	80048f2 <utils_buffer_is_full+0x46>
	}else{
		return true;
 80048f0:	2301      	movs	r3, #1
	}
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3714      	adds	r7, #20
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <level_to_color>:
		"ALL"
};

static utils_log_level_t level = UTILS_LOG_ALL;

static char * level_to_color(utils_log_level_t level){
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	71fb      	strb	r3, [r7, #7]
	return color_str[level];
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	4a03      	ldr	r2, [pc, #12]	; (8004918 <level_to_color+0x1c>)
 800490a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	2000023c 	.word	0x2000023c

0800491c <level_to_str>:

static char * level_to_str(utils_log_level_t level){
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	4603      	mov	r3, r0
 8004924:	71fb      	strb	r3, [r7, #7]
    return level_str[level];
 8004926:	79fb      	ldrb	r3, [r7, #7]
 8004928:	4a03      	ldr	r2, [pc, #12]	; (8004938 <level_to_str+0x1c>)
 800492a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	20000258 	.word	0x20000258

0800493c <utils_log_log>:
void utils_log_init(utils_log_level_t _level){
	level = _level;
};


void utils_log_log(utils_log_level_t _level, const char *file, int line, const char *fmt, ...){
 800493c:	b408      	push	{r3}
 800493e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004940:	b08c      	sub	sp, #48	; 0x30
 8004942:	af06      	add	r7, sp, #24
 8004944:	4603      	mov	r3, r0
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	73fb      	strb	r3, [r7, #15]
    va_list args;
    if(_level > level){
 800494c:	4b1c      	ldr	r3, [pc, #112]	; (80049c0 <utils_log_log+0x84>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	7bfa      	ldrb	r2, [r7, #15]
 8004952:	429a      	cmp	r2, r3
 8004954:	d82c      	bhi.n	80049b0 <utils_log_log+0x74>
        return;
    }
    va_start(args, fmt);
 8004956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800495a:	613b      	str	r3, [r7, #16]
    va_end(args);
    vsnprintf(message_buffer , UTILS_MAX_LOG_BUFFER , fmt, args);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004964:	4817      	ldr	r0, [pc, #92]	; (80049c4 <utils_log_log+0x88>)
 8004966:	f000 f8fd 	bl	8004b64 <vsniprintf>
    int size = snprintf(log_buffer , UTILS_MAX_LOG_BUFFER, "%s%d [%s] %s:%d: %s%s" ,level_to_color(_level), NETIF_GET_TIME_MS() , level_to_str(_level) , file, line, message_buffer,level_to_color(UTILS_LOG_OFF));
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff ffc5 	bl	80048fc <level_to_color>
 8004972:	4606      	mov	r6, r0
 8004974:	f7fc f994 	bl	8000ca0 <CLOCK_getTick>
 8004978:	4604      	mov	r4, r0
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ffcd 	bl	800491c <level_to_str>
 8004982:	4605      	mov	r5, r0
 8004984:	2000      	movs	r0, #0
 8004986:	f7ff ffb9 	bl	80048fc <level_to_color>
 800498a:	4603      	mov	r3, r0
 800498c:	9305      	str	r3, [sp, #20]
 800498e:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <utils_log_log+0x88>)
 8004990:	9304      	str	r3, [sp, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	9303      	str	r3, [sp, #12]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	9302      	str	r3, [sp, #8]
 800499a:	9501      	str	r5, [sp, #4]
 800499c:	9400      	str	r4, [sp, #0]
 800499e:	4633      	mov	r3, r6
 80049a0:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <utils_log_log+0x8c>)
 80049a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049a6:	4809      	ldr	r0, [pc, #36]	; (80049cc <utils_log_log+0x90>)
 80049a8:	f000 f87c 	bl	8004aa4 <sniprintf>
 80049ac:	6178      	str	r0, [r7, #20]
 80049ae:	e000      	b.n	80049b2 <utils_log_log+0x76>
        return;
 80049b0:	bf00      	nop
    UTILS_LOG(log_buffer , size);
}
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80049ba:	b001      	add	sp, #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000278 	.word	0x20000278
 80049c4:	20002b2c 	.word	0x20002b2c
 80049c8:	08005878 	.word	0x08005878
 80049cc:	2000272c 	.word	0x2000272c

080049d0 <utils_log_raw>:

void utils_log_raw(const char *fmt, ...){
 80049d0:	b40f      	push	{r0, r1, r2, r3}
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b082      	sub	sp, #8
 80049d6:	af00      	add	r7, sp, #0
	va_list args;
    va_start(args, fmt);
 80049d8:	f107 0314 	add.w	r3, r7, #20
 80049dc:	603b      	str	r3, [r7, #0]
    va_end(args);
    size_t len = vsnprintf(message_buffer , UTILS_MAX_LOG_BUFFER , fmt, args);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80049e6:	4806      	ldr	r0, [pc, #24]	; (8004a00 <utils_log_raw+0x30>)
 80049e8:	f000 f8bc 	bl	8004b64 <vsniprintf>
 80049ec:	4603      	mov	r3, r0
 80049ee:	607b      	str	r3, [r7, #4]
    UTILS_LOG(message_buffer , len);
}
 80049f0:	bf00      	nop
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049fa:	b004      	add	sp, #16
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20002b2c 	.word	0x20002b2c

08004a04 <__errno>:
 8004a04:	4b01      	ldr	r3, [pc, #4]	; (8004a0c <__errno+0x8>)
 8004a06:	6818      	ldr	r0, [r3, #0]
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	2000027c 	.word	0x2000027c

08004a10 <__libc_init_array>:
 8004a10:	b570      	push	{r4, r5, r6, lr}
 8004a12:	2600      	movs	r6, #0
 8004a14:	4d0c      	ldr	r5, [pc, #48]	; (8004a48 <__libc_init_array+0x38>)
 8004a16:	4c0d      	ldr	r4, [pc, #52]	; (8004a4c <__libc_init_array+0x3c>)
 8004a18:	1b64      	subs	r4, r4, r5
 8004a1a:	10a4      	asrs	r4, r4, #2
 8004a1c:	42a6      	cmp	r6, r4
 8004a1e:	d109      	bne.n	8004a34 <__libc_init_array+0x24>
 8004a20:	f000 fcfa 	bl	8005418 <_init>
 8004a24:	2600      	movs	r6, #0
 8004a26:	4d0a      	ldr	r5, [pc, #40]	; (8004a50 <__libc_init_array+0x40>)
 8004a28:	4c0a      	ldr	r4, [pc, #40]	; (8004a54 <__libc_init_array+0x44>)
 8004a2a:	1b64      	subs	r4, r4, r5
 8004a2c:	10a4      	asrs	r4, r4, #2
 8004a2e:	42a6      	cmp	r6, r4
 8004a30:	d105      	bne.n	8004a3e <__libc_init_array+0x2e>
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
 8004a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a38:	4798      	blx	r3
 8004a3a:	3601      	adds	r6, #1
 8004a3c:	e7ee      	b.n	8004a1c <__libc_init_array+0xc>
 8004a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a42:	4798      	blx	r3
 8004a44:	3601      	adds	r6, #1
 8004a46:	e7f2      	b.n	8004a2e <__libc_init_array+0x1e>
 8004a48:	08005b00 	.word	0x08005b00
 8004a4c:	08005b00 	.word	0x08005b00
 8004a50:	08005b00 	.word	0x08005b00
 8004a54:	08005b08 	.word	0x08005b08

08004a58 <memcmp>:
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	3901      	subs	r1, #1
 8004a5c:	4402      	add	r2, r0
 8004a5e:	4290      	cmp	r0, r2
 8004a60:	d101      	bne.n	8004a66 <memcmp+0xe>
 8004a62:	2000      	movs	r0, #0
 8004a64:	e005      	b.n	8004a72 <memcmp+0x1a>
 8004a66:	7803      	ldrb	r3, [r0, #0]
 8004a68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004a6c:	42a3      	cmp	r3, r4
 8004a6e:	d001      	beq.n	8004a74 <memcmp+0x1c>
 8004a70:	1b18      	subs	r0, r3, r4
 8004a72:	bd10      	pop	{r4, pc}
 8004a74:	3001      	adds	r0, #1
 8004a76:	e7f2      	b.n	8004a5e <memcmp+0x6>

08004a78 <memcpy>:
 8004a78:	440a      	add	r2, r1
 8004a7a:	4291      	cmp	r1, r2
 8004a7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a80:	d100      	bne.n	8004a84 <memcpy+0xc>
 8004a82:	4770      	bx	lr
 8004a84:	b510      	push	{r4, lr}
 8004a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a8a:	4291      	cmp	r1, r2
 8004a8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a90:	d1f9      	bne.n	8004a86 <memcpy+0xe>
 8004a92:	bd10      	pop	{r4, pc}

08004a94 <memset>:
 8004a94:	4603      	mov	r3, r0
 8004a96:	4402      	add	r2, r0
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d100      	bne.n	8004a9e <memset+0xa>
 8004a9c:	4770      	bx	lr
 8004a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004aa2:	e7f9      	b.n	8004a98 <memset+0x4>

08004aa4 <sniprintf>:
 8004aa4:	b40c      	push	{r2, r3}
 8004aa6:	b530      	push	{r4, r5, lr}
 8004aa8:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <sniprintf+0x64>)
 8004aaa:	1e0c      	subs	r4, r1, #0
 8004aac:	681d      	ldr	r5, [r3, #0]
 8004aae:	b09d      	sub	sp, #116	; 0x74
 8004ab0:	da08      	bge.n	8004ac4 <sniprintf+0x20>
 8004ab2:	238b      	movs	r3, #139	; 0x8b
 8004ab4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ab8:	602b      	str	r3, [r5, #0]
 8004aba:	b01d      	add	sp, #116	; 0x74
 8004abc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ac0:	b002      	add	sp, #8
 8004ac2:	4770      	bx	lr
 8004ac4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004ac8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004acc:	bf0c      	ite	eq
 8004ace:	4623      	moveq	r3, r4
 8004ad0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004ad4:	9304      	str	r3, [sp, #16]
 8004ad6:	9307      	str	r3, [sp, #28]
 8004ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004adc:	9002      	str	r0, [sp, #8]
 8004ade:	9006      	str	r0, [sp, #24]
 8004ae0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	ab21      	add	r3, sp, #132	; 0x84
 8004ae8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004aea:	a902      	add	r1, sp, #8
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	f000 f8a3 	bl	8004c38 <_svfiprintf_r>
 8004af2:	1c43      	adds	r3, r0, #1
 8004af4:	bfbc      	itt	lt
 8004af6:	238b      	movlt	r3, #139	; 0x8b
 8004af8:	602b      	strlt	r3, [r5, #0]
 8004afa:	2c00      	cmp	r4, #0
 8004afc:	d0dd      	beq.n	8004aba <sniprintf+0x16>
 8004afe:	2200      	movs	r2, #0
 8004b00:	9b02      	ldr	r3, [sp, #8]
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e7d9      	b.n	8004aba <sniprintf+0x16>
 8004b06:	bf00      	nop
 8004b08:	2000027c 	.word	0x2000027c

08004b0c <_vsniprintf_r>:
 8004b0c:	b530      	push	{r4, r5, lr}
 8004b0e:	4614      	mov	r4, r2
 8004b10:	2c00      	cmp	r4, #0
 8004b12:	4605      	mov	r5, r0
 8004b14:	461a      	mov	r2, r3
 8004b16:	b09b      	sub	sp, #108	; 0x6c
 8004b18:	da05      	bge.n	8004b26 <_vsniprintf_r+0x1a>
 8004b1a:	238b      	movs	r3, #139	; 0x8b
 8004b1c:	6003      	str	r3, [r0, #0]
 8004b1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b22:	b01b      	add	sp, #108	; 0x6c
 8004b24:	bd30      	pop	{r4, r5, pc}
 8004b26:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004b2a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004b2e:	bf0c      	ite	eq
 8004b30:	4623      	moveq	r3, r4
 8004b32:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8004b36:	9302      	str	r3, [sp, #8]
 8004b38:	9305      	str	r3, [sp, #20]
 8004b3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b3e:	9100      	str	r1, [sp, #0]
 8004b40:	9104      	str	r1, [sp, #16]
 8004b42:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004b46:	4669      	mov	r1, sp
 8004b48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004b4a:	f000 f875 	bl	8004c38 <_svfiprintf_r>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	bfbc      	itt	lt
 8004b52:	238b      	movlt	r3, #139	; 0x8b
 8004b54:	602b      	strlt	r3, [r5, #0]
 8004b56:	2c00      	cmp	r4, #0
 8004b58:	d0e3      	beq.n	8004b22 <_vsniprintf_r+0x16>
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	9b00      	ldr	r3, [sp, #0]
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e7df      	b.n	8004b22 <_vsniprintf_r+0x16>
	...

08004b64 <vsniprintf>:
 8004b64:	b507      	push	{r0, r1, r2, lr}
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	460a      	mov	r2, r1
 8004b6c:	4601      	mov	r1, r0
 8004b6e:	4803      	ldr	r0, [pc, #12]	; (8004b7c <vsniprintf+0x18>)
 8004b70:	6800      	ldr	r0, [r0, #0]
 8004b72:	f7ff ffcb 	bl	8004b0c <_vsniprintf_r>
 8004b76:	b003      	add	sp, #12
 8004b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b7c:	2000027c 	.word	0x2000027c

08004b80 <__ssputs_r>:
 8004b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b84:	688e      	ldr	r6, [r1, #8]
 8004b86:	4682      	mov	sl, r0
 8004b88:	429e      	cmp	r6, r3
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	4690      	mov	r8, r2
 8004b8e:	461f      	mov	r7, r3
 8004b90:	d838      	bhi.n	8004c04 <__ssputs_r+0x84>
 8004b92:	898a      	ldrh	r2, [r1, #12]
 8004b94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004b98:	d032      	beq.n	8004c00 <__ssputs_r+0x80>
 8004b9a:	6825      	ldr	r5, [r4, #0]
 8004b9c:	6909      	ldr	r1, [r1, #16]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	eba5 0901 	sub.w	r9, r5, r1
 8004ba4:	6965      	ldr	r5, [r4, #20]
 8004ba6:	444b      	add	r3, r9
 8004ba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bb0:	106d      	asrs	r5, r5, #1
 8004bb2:	429d      	cmp	r5, r3
 8004bb4:	bf38      	it	cc
 8004bb6:	461d      	movcc	r5, r3
 8004bb8:	0553      	lsls	r3, r2, #21
 8004bba:	d531      	bpl.n	8004c20 <__ssputs_r+0xa0>
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	f000 fb61 	bl	8005284 <_malloc_r>
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	b950      	cbnz	r0, 8004bdc <__ssputs_r+0x5c>
 8004bc6:	230c      	movs	r3, #12
 8004bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bcc:	f8ca 3000 	str.w	r3, [sl]
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd6:	81a3      	strh	r3, [r4, #12]
 8004bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bdc:	464a      	mov	r2, r9
 8004bde:	6921      	ldr	r1, [r4, #16]
 8004be0:	f7ff ff4a 	bl	8004a78 <memcpy>
 8004be4:	89a3      	ldrh	r3, [r4, #12]
 8004be6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	6126      	str	r6, [r4, #16]
 8004bf2:	444e      	add	r6, r9
 8004bf4:	6026      	str	r6, [r4, #0]
 8004bf6:	463e      	mov	r6, r7
 8004bf8:	6165      	str	r5, [r4, #20]
 8004bfa:	eba5 0509 	sub.w	r5, r5, r9
 8004bfe:	60a5      	str	r5, [r4, #8]
 8004c00:	42be      	cmp	r6, r7
 8004c02:	d900      	bls.n	8004c06 <__ssputs_r+0x86>
 8004c04:	463e      	mov	r6, r7
 8004c06:	4632      	mov	r2, r6
 8004c08:	4641      	mov	r1, r8
 8004c0a:	6820      	ldr	r0, [r4, #0]
 8004c0c:	f000 fab8 	bl	8005180 <memmove>
 8004c10:	68a3      	ldr	r3, [r4, #8]
 8004c12:	2000      	movs	r0, #0
 8004c14:	1b9b      	subs	r3, r3, r6
 8004c16:	60a3      	str	r3, [r4, #8]
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	4433      	add	r3, r6
 8004c1c:	6023      	str	r3, [r4, #0]
 8004c1e:	e7db      	b.n	8004bd8 <__ssputs_r+0x58>
 8004c20:	462a      	mov	r2, r5
 8004c22:	f000 fba3 	bl	800536c <_realloc_r>
 8004c26:	4606      	mov	r6, r0
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	d1e1      	bne.n	8004bf0 <__ssputs_r+0x70>
 8004c2c:	4650      	mov	r0, sl
 8004c2e:	6921      	ldr	r1, [r4, #16]
 8004c30:	f000 fac0 	bl	80051b4 <_free_r>
 8004c34:	e7c7      	b.n	8004bc6 <__ssputs_r+0x46>
	...

08004c38 <_svfiprintf_r>:
 8004c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	4698      	mov	r8, r3
 8004c3e:	898b      	ldrh	r3, [r1, #12]
 8004c40:	4607      	mov	r7, r0
 8004c42:	061b      	lsls	r3, r3, #24
 8004c44:	460d      	mov	r5, r1
 8004c46:	4614      	mov	r4, r2
 8004c48:	b09d      	sub	sp, #116	; 0x74
 8004c4a:	d50e      	bpl.n	8004c6a <_svfiprintf_r+0x32>
 8004c4c:	690b      	ldr	r3, [r1, #16]
 8004c4e:	b963      	cbnz	r3, 8004c6a <_svfiprintf_r+0x32>
 8004c50:	2140      	movs	r1, #64	; 0x40
 8004c52:	f000 fb17 	bl	8005284 <_malloc_r>
 8004c56:	6028      	str	r0, [r5, #0]
 8004c58:	6128      	str	r0, [r5, #16]
 8004c5a:	b920      	cbnz	r0, 8004c66 <_svfiprintf_r+0x2e>
 8004c5c:	230c      	movs	r3, #12
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c64:	e0d1      	b.n	8004e0a <_svfiprintf_r+0x1d2>
 8004c66:	2340      	movs	r3, #64	; 0x40
 8004c68:	616b      	str	r3, [r5, #20]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c6e:	2320      	movs	r3, #32
 8004c70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c74:	2330      	movs	r3, #48	; 0x30
 8004c76:	f04f 0901 	mov.w	r9, #1
 8004c7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e24 <_svfiprintf_r+0x1ec>
 8004c82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c86:	4623      	mov	r3, r4
 8004c88:	469a      	mov	sl, r3
 8004c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c8e:	b10a      	cbz	r2, 8004c94 <_svfiprintf_r+0x5c>
 8004c90:	2a25      	cmp	r2, #37	; 0x25
 8004c92:	d1f9      	bne.n	8004c88 <_svfiprintf_r+0x50>
 8004c94:	ebba 0b04 	subs.w	fp, sl, r4
 8004c98:	d00b      	beq.n	8004cb2 <_svfiprintf_r+0x7a>
 8004c9a:	465b      	mov	r3, fp
 8004c9c:	4622      	mov	r2, r4
 8004c9e:	4629      	mov	r1, r5
 8004ca0:	4638      	mov	r0, r7
 8004ca2:	f7ff ff6d 	bl	8004b80 <__ssputs_r>
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f000 80aa 	beq.w	8004e00 <_svfiprintf_r+0x1c8>
 8004cac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cae:	445a      	add	r2, fp
 8004cb0:	9209      	str	r2, [sp, #36]	; 0x24
 8004cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80a2 	beq.w	8004e00 <_svfiprintf_r+0x1c8>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cc6:	f10a 0a01 	add.w	sl, sl, #1
 8004cca:	9304      	str	r3, [sp, #16]
 8004ccc:	9307      	str	r3, [sp, #28]
 8004cce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cd2:	931a      	str	r3, [sp, #104]	; 0x68
 8004cd4:	4654      	mov	r4, sl
 8004cd6:	2205      	movs	r2, #5
 8004cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cdc:	4851      	ldr	r0, [pc, #324]	; (8004e24 <_svfiprintf_r+0x1ec>)
 8004cde:	f000 fa41 	bl	8005164 <memchr>
 8004ce2:	9a04      	ldr	r2, [sp, #16]
 8004ce4:	b9d8      	cbnz	r0, 8004d1e <_svfiprintf_r+0xe6>
 8004ce6:	06d0      	lsls	r0, r2, #27
 8004ce8:	bf44      	itt	mi
 8004cea:	2320      	movmi	r3, #32
 8004cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cf0:	0711      	lsls	r1, r2, #28
 8004cf2:	bf44      	itt	mi
 8004cf4:	232b      	movmi	r3, #43	; 0x2b
 8004cf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfe:	2b2a      	cmp	r3, #42	; 0x2a
 8004d00:	d015      	beq.n	8004d2e <_svfiprintf_r+0xf6>
 8004d02:	4654      	mov	r4, sl
 8004d04:	2000      	movs	r0, #0
 8004d06:	f04f 0c0a 	mov.w	ip, #10
 8004d0a:	9a07      	ldr	r2, [sp, #28]
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d12:	3b30      	subs	r3, #48	; 0x30
 8004d14:	2b09      	cmp	r3, #9
 8004d16:	d94e      	bls.n	8004db6 <_svfiprintf_r+0x17e>
 8004d18:	b1b0      	cbz	r0, 8004d48 <_svfiprintf_r+0x110>
 8004d1a:	9207      	str	r2, [sp, #28]
 8004d1c:	e014      	b.n	8004d48 <_svfiprintf_r+0x110>
 8004d1e:	eba0 0308 	sub.w	r3, r0, r8
 8004d22:	fa09 f303 	lsl.w	r3, r9, r3
 8004d26:	4313      	orrs	r3, r2
 8004d28:	46a2      	mov	sl, r4
 8004d2a:	9304      	str	r3, [sp, #16]
 8004d2c:	e7d2      	b.n	8004cd4 <_svfiprintf_r+0x9c>
 8004d2e:	9b03      	ldr	r3, [sp, #12]
 8004d30:	1d19      	adds	r1, r3, #4
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	9103      	str	r1, [sp, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	bfbb      	ittet	lt
 8004d3a:	425b      	neglt	r3, r3
 8004d3c:	f042 0202 	orrlt.w	r2, r2, #2
 8004d40:	9307      	strge	r3, [sp, #28]
 8004d42:	9307      	strlt	r3, [sp, #28]
 8004d44:	bfb8      	it	lt
 8004d46:	9204      	strlt	r2, [sp, #16]
 8004d48:	7823      	ldrb	r3, [r4, #0]
 8004d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d4c:	d10c      	bne.n	8004d68 <_svfiprintf_r+0x130>
 8004d4e:	7863      	ldrb	r3, [r4, #1]
 8004d50:	2b2a      	cmp	r3, #42	; 0x2a
 8004d52:	d135      	bne.n	8004dc0 <_svfiprintf_r+0x188>
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	3402      	adds	r4, #2
 8004d58:	1d1a      	adds	r2, r3, #4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	9203      	str	r2, [sp, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	bfb8      	it	lt
 8004d62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004d66:	9305      	str	r3, [sp, #20]
 8004d68:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004e28 <_svfiprintf_r+0x1f0>
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	4650      	mov	r0, sl
 8004d70:	7821      	ldrb	r1, [r4, #0]
 8004d72:	f000 f9f7 	bl	8005164 <memchr>
 8004d76:	b140      	cbz	r0, 8004d8a <_svfiprintf_r+0x152>
 8004d78:	2340      	movs	r3, #64	; 0x40
 8004d7a:	eba0 000a 	sub.w	r0, r0, sl
 8004d7e:	fa03 f000 	lsl.w	r0, r3, r0
 8004d82:	9b04      	ldr	r3, [sp, #16]
 8004d84:	3401      	adds	r4, #1
 8004d86:	4303      	orrs	r3, r0
 8004d88:	9304      	str	r3, [sp, #16]
 8004d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d8e:	2206      	movs	r2, #6
 8004d90:	4826      	ldr	r0, [pc, #152]	; (8004e2c <_svfiprintf_r+0x1f4>)
 8004d92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d96:	f000 f9e5 	bl	8005164 <memchr>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d038      	beq.n	8004e10 <_svfiprintf_r+0x1d8>
 8004d9e:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <_svfiprintf_r+0x1f8>)
 8004da0:	bb1b      	cbnz	r3, 8004dea <_svfiprintf_r+0x1b2>
 8004da2:	9b03      	ldr	r3, [sp, #12]
 8004da4:	3307      	adds	r3, #7
 8004da6:	f023 0307 	bic.w	r3, r3, #7
 8004daa:	3308      	adds	r3, #8
 8004dac:	9303      	str	r3, [sp, #12]
 8004dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db0:	4433      	add	r3, r6
 8004db2:	9309      	str	r3, [sp, #36]	; 0x24
 8004db4:	e767      	b.n	8004c86 <_svfiprintf_r+0x4e>
 8004db6:	460c      	mov	r4, r1
 8004db8:	2001      	movs	r0, #1
 8004dba:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dbe:	e7a5      	b.n	8004d0c <_svfiprintf_r+0xd4>
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f04f 0c0a 	mov.w	ip, #10
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	3401      	adds	r4, #1
 8004dca:	9305      	str	r3, [sp, #20]
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dd2:	3a30      	subs	r2, #48	; 0x30
 8004dd4:	2a09      	cmp	r2, #9
 8004dd6:	d903      	bls.n	8004de0 <_svfiprintf_r+0x1a8>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0c5      	beq.n	8004d68 <_svfiprintf_r+0x130>
 8004ddc:	9105      	str	r1, [sp, #20]
 8004dde:	e7c3      	b.n	8004d68 <_svfiprintf_r+0x130>
 8004de0:	4604      	mov	r4, r0
 8004de2:	2301      	movs	r3, #1
 8004de4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004de8:	e7f0      	b.n	8004dcc <_svfiprintf_r+0x194>
 8004dea:	ab03      	add	r3, sp, #12
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	462a      	mov	r2, r5
 8004df0:	4638      	mov	r0, r7
 8004df2:	4b10      	ldr	r3, [pc, #64]	; (8004e34 <_svfiprintf_r+0x1fc>)
 8004df4:	a904      	add	r1, sp, #16
 8004df6:	f3af 8000 	nop.w
 8004dfa:	1c42      	adds	r2, r0, #1
 8004dfc:	4606      	mov	r6, r0
 8004dfe:	d1d6      	bne.n	8004dae <_svfiprintf_r+0x176>
 8004e00:	89ab      	ldrh	r3, [r5, #12]
 8004e02:	065b      	lsls	r3, r3, #25
 8004e04:	f53f af2c 	bmi.w	8004c60 <_svfiprintf_r+0x28>
 8004e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e0a:	b01d      	add	sp, #116	; 0x74
 8004e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e10:	ab03      	add	r3, sp, #12
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	462a      	mov	r2, r5
 8004e16:	4638      	mov	r0, r7
 8004e18:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <_svfiprintf_r+0x1fc>)
 8004e1a:	a904      	add	r1, sp, #16
 8004e1c:	f000 f87c 	bl	8004f18 <_printf_i>
 8004e20:	e7eb      	b.n	8004dfa <_svfiprintf_r+0x1c2>
 8004e22:	bf00      	nop
 8004e24:	08005aca 	.word	0x08005aca
 8004e28:	08005ad0 	.word	0x08005ad0
 8004e2c:	08005ad4 	.word	0x08005ad4
 8004e30:	00000000 	.word	0x00000000
 8004e34:	08004b81 	.word	0x08004b81

08004e38 <_printf_common>:
 8004e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e3c:	4616      	mov	r6, r2
 8004e3e:	4699      	mov	r9, r3
 8004e40:	688a      	ldr	r2, [r1, #8]
 8004e42:	690b      	ldr	r3, [r1, #16]
 8004e44:	4607      	mov	r7, r0
 8004e46:	4293      	cmp	r3, r2
 8004e48:	bfb8      	it	lt
 8004e4a:	4613      	movlt	r3, r2
 8004e4c:	6033      	str	r3, [r6, #0]
 8004e4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e52:	460c      	mov	r4, r1
 8004e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e58:	b10a      	cbz	r2, 8004e5e <_printf_common+0x26>
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	6033      	str	r3, [r6, #0]
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	0699      	lsls	r1, r3, #26
 8004e62:	bf42      	ittt	mi
 8004e64:	6833      	ldrmi	r3, [r6, #0]
 8004e66:	3302      	addmi	r3, #2
 8004e68:	6033      	strmi	r3, [r6, #0]
 8004e6a:	6825      	ldr	r5, [r4, #0]
 8004e6c:	f015 0506 	ands.w	r5, r5, #6
 8004e70:	d106      	bne.n	8004e80 <_printf_common+0x48>
 8004e72:	f104 0a19 	add.w	sl, r4, #25
 8004e76:	68e3      	ldr	r3, [r4, #12]
 8004e78:	6832      	ldr	r2, [r6, #0]
 8004e7a:	1a9b      	subs	r3, r3, r2
 8004e7c:	42ab      	cmp	r3, r5
 8004e7e:	dc28      	bgt.n	8004ed2 <_printf_common+0x9a>
 8004e80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e84:	1e13      	subs	r3, r2, #0
 8004e86:	6822      	ldr	r2, [r4, #0]
 8004e88:	bf18      	it	ne
 8004e8a:	2301      	movne	r3, #1
 8004e8c:	0692      	lsls	r2, r2, #26
 8004e8e:	d42d      	bmi.n	8004eec <_printf_common+0xb4>
 8004e90:	4649      	mov	r1, r9
 8004e92:	4638      	mov	r0, r7
 8004e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e98:	47c0      	blx	r8
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d020      	beq.n	8004ee0 <_printf_common+0xa8>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	68e5      	ldr	r5, [r4, #12]
 8004ea2:	f003 0306 	and.w	r3, r3, #6
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	bf18      	it	ne
 8004eaa:	2500      	movne	r5, #0
 8004eac:	6832      	ldr	r2, [r6, #0]
 8004eae:	f04f 0600 	mov.w	r6, #0
 8004eb2:	68a3      	ldr	r3, [r4, #8]
 8004eb4:	bf08      	it	eq
 8004eb6:	1aad      	subeq	r5, r5, r2
 8004eb8:	6922      	ldr	r2, [r4, #16]
 8004eba:	bf08      	it	eq
 8004ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	bfc4      	itt	gt
 8004ec4:	1a9b      	subgt	r3, r3, r2
 8004ec6:	18ed      	addgt	r5, r5, r3
 8004ec8:	341a      	adds	r4, #26
 8004eca:	42b5      	cmp	r5, r6
 8004ecc:	d11a      	bne.n	8004f04 <_printf_common+0xcc>
 8004ece:	2000      	movs	r0, #0
 8004ed0:	e008      	b.n	8004ee4 <_printf_common+0xac>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	4652      	mov	r2, sl
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	4638      	mov	r0, r7
 8004eda:	47c0      	blx	r8
 8004edc:	3001      	adds	r0, #1
 8004ede:	d103      	bne.n	8004ee8 <_printf_common+0xb0>
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee8:	3501      	adds	r5, #1
 8004eea:	e7c4      	b.n	8004e76 <_printf_common+0x3e>
 8004eec:	2030      	movs	r0, #48	; 0x30
 8004eee:	18e1      	adds	r1, r4, r3
 8004ef0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004efa:	4422      	add	r2, r4
 8004efc:	3302      	adds	r3, #2
 8004efe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f02:	e7c5      	b.n	8004e90 <_printf_common+0x58>
 8004f04:	2301      	movs	r3, #1
 8004f06:	4622      	mov	r2, r4
 8004f08:	4649      	mov	r1, r9
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	47c0      	blx	r8
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d0e6      	beq.n	8004ee0 <_printf_common+0xa8>
 8004f12:	3601      	adds	r6, #1
 8004f14:	e7d9      	b.n	8004eca <_printf_common+0x92>
	...

08004f18 <_printf_i>:
 8004f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1c:	7e0f      	ldrb	r7, [r1, #24]
 8004f1e:	4691      	mov	r9, r2
 8004f20:	2f78      	cmp	r7, #120	; 0x78
 8004f22:	4680      	mov	r8, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	469a      	mov	sl, r3
 8004f28:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f2e:	d807      	bhi.n	8004f40 <_printf_i+0x28>
 8004f30:	2f62      	cmp	r7, #98	; 0x62
 8004f32:	d80a      	bhi.n	8004f4a <_printf_i+0x32>
 8004f34:	2f00      	cmp	r7, #0
 8004f36:	f000 80d9 	beq.w	80050ec <_printf_i+0x1d4>
 8004f3a:	2f58      	cmp	r7, #88	; 0x58
 8004f3c:	f000 80a4 	beq.w	8005088 <_printf_i+0x170>
 8004f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f48:	e03a      	b.n	8004fc0 <_printf_i+0xa8>
 8004f4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f4e:	2b15      	cmp	r3, #21
 8004f50:	d8f6      	bhi.n	8004f40 <_printf_i+0x28>
 8004f52:	a101      	add	r1, pc, #4	; (adr r1, 8004f58 <_printf_i+0x40>)
 8004f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f58:	08004fb1 	.word	0x08004fb1
 8004f5c:	08004fc5 	.word	0x08004fc5
 8004f60:	08004f41 	.word	0x08004f41
 8004f64:	08004f41 	.word	0x08004f41
 8004f68:	08004f41 	.word	0x08004f41
 8004f6c:	08004f41 	.word	0x08004f41
 8004f70:	08004fc5 	.word	0x08004fc5
 8004f74:	08004f41 	.word	0x08004f41
 8004f78:	08004f41 	.word	0x08004f41
 8004f7c:	08004f41 	.word	0x08004f41
 8004f80:	08004f41 	.word	0x08004f41
 8004f84:	080050d3 	.word	0x080050d3
 8004f88:	08004ff5 	.word	0x08004ff5
 8004f8c:	080050b5 	.word	0x080050b5
 8004f90:	08004f41 	.word	0x08004f41
 8004f94:	08004f41 	.word	0x08004f41
 8004f98:	080050f5 	.word	0x080050f5
 8004f9c:	08004f41 	.word	0x08004f41
 8004fa0:	08004ff5 	.word	0x08004ff5
 8004fa4:	08004f41 	.word	0x08004f41
 8004fa8:	08004f41 	.word	0x08004f41
 8004fac:	080050bd 	.word	0x080050bd
 8004fb0:	682b      	ldr	r3, [r5, #0]
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	602a      	str	r2, [r5, #0]
 8004fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0a4      	b.n	800510e <_printf_i+0x1f6>
 8004fc4:	6820      	ldr	r0, [r4, #0]
 8004fc6:	6829      	ldr	r1, [r5, #0]
 8004fc8:	0606      	lsls	r6, r0, #24
 8004fca:	f101 0304 	add.w	r3, r1, #4
 8004fce:	d50a      	bpl.n	8004fe6 <_printf_i+0xce>
 8004fd0:	680e      	ldr	r6, [r1, #0]
 8004fd2:	602b      	str	r3, [r5, #0]
 8004fd4:	2e00      	cmp	r6, #0
 8004fd6:	da03      	bge.n	8004fe0 <_printf_i+0xc8>
 8004fd8:	232d      	movs	r3, #45	; 0x2d
 8004fda:	4276      	negs	r6, r6
 8004fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe0:	230a      	movs	r3, #10
 8004fe2:	485e      	ldr	r0, [pc, #376]	; (800515c <_printf_i+0x244>)
 8004fe4:	e019      	b.n	800501a <_printf_i+0x102>
 8004fe6:	680e      	ldr	r6, [r1, #0]
 8004fe8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	bf18      	it	ne
 8004ff0:	b236      	sxthne	r6, r6
 8004ff2:	e7ef      	b.n	8004fd4 <_printf_i+0xbc>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	6820      	ldr	r0, [r4, #0]
 8004ff8:	1d19      	adds	r1, r3, #4
 8004ffa:	6029      	str	r1, [r5, #0]
 8004ffc:	0601      	lsls	r1, r0, #24
 8004ffe:	d501      	bpl.n	8005004 <_printf_i+0xec>
 8005000:	681e      	ldr	r6, [r3, #0]
 8005002:	e002      	b.n	800500a <_printf_i+0xf2>
 8005004:	0646      	lsls	r6, r0, #25
 8005006:	d5fb      	bpl.n	8005000 <_printf_i+0xe8>
 8005008:	881e      	ldrh	r6, [r3, #0]
 800500a:	2f6f      	cmp	r7, #111	; 0x6f
 800500c:	bf0c      	ite	eq
 800500e:	2308      	moveq	r3, #8
 8005010:	230a      	movne	r3, #10
 8005012:	4852      	ldr	r0, [pc, #328]	; (800515c <_printf_i+0x244>)
 8005014:	2100      	movs	r1, #0
 8005016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800501a:	6865      	ldr	r5, [r4, #4]
 800501c:	2d00      	cmp	r5, #0
 800501e:	bfa8      	it	ge
 8005020:	6821      	ldrge	r1, [r4, #0]
 8005022:	60a5      	str	r5, [r4, #8]
 8005024:	bfa4      	itt	ge
 8005026:	f021 0104 	bicge.w	r1, r1, #4
 800502a:	6021      	strge	r1, [r4, #0]
 800502c:	b90e      	cbnz	r6, 8005032 <_printf_i+0x11a>
 800502e:	2d00      	cmp	r5, #0
 8005030:	d04d      	beq.n	80050ce <_printf_i+0x1b6>
 8005032:	4615      	mov	r5, r2
 8005034:	fbb6 f1f3 	udiv	r1, r6, r3
 8005038:	fb03 6711 	mls	r7, r3, r1, r6
 800503c:	5dc7      	ldrb	r7, [r0, r7]
 800503e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005042:	4637      	mov	r7, r6
 8005044:	42bb      	cmp	r3, r7
 8005046:	460e      	mov	r6, r1
 8005048:	d9f4      	bls.n	8005034 <_printf_i+0x11c>
 800504a:	2b08      	cmp	r3, #8
 800504c:	d10b      	bne.n	8005066 <_printf_i+0x14e>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	07de      	lsls	r6, r3, #31
 8005052:	d508      	bpl.n	8005066 <_printf_i+0x14e>
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	6861      	ldr	r1, [r4, #4]
 8005058:	4299      	cmp	r1, r3
 800505a:	bfde      	ittt	le
 800505c:	2330      	movle	r3, #48	; 0x30
 800505e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005062:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005066:	1b52      	subs	r2, r2, r5
 8005068:	6122      	str	r2, [r4, #16]
 800506a:	464b      	mov	r3, r9
 800506c:	4621      	mov	r1, r4
 800506e:	4640      	mov	r0, r8
 8005070:	f8cd a000 	str.w	sl, [sp]
 8005074:	aa03      	add	r2, sp, #12
 8005076:	f7ff fedf 	bl	8004e38 <_printf_common>
 800507a:	3001      	adds	r0, #1
 800507c:	d14c      	bne.n	8005118 <_printf_i+0x200>
 800507e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005082:	b004      	add	sp, #16
 8005084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005088:	4834      	ldr	r0, [pc, #208]	; (800515c <_printf_i+0x244>)
 800508a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800508e:	6829      	ldr	r1, [r5, #0]
 8005090:	6823      	ldr	r3, [r4, #0]
 8005092:	f851 6b04 	ldr.w	r6, [r1], #4
 8005096:	6029      	str	r1, [r5, #0]
 8005098:	061d      	lsls	r5, r3, #24
 800509a:	d514      	bpl.n	80050c6 <_printf_i+0x1ae>
 800509c:	07df      	lsls	r7, r3, #31
 800509e:	bf44      	itt	mi
 80050a0:	f043 0320 	orrmi.w	r3, r3, #32
 80050a4:	6023      	strmi	r3, [r4, #0]
 80050a6:	b91e      	cbnz	r6, 80050b0 <_printf_i+0x198>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	f023 0320 	bic.w	r3, r3, #32
 80050ae:	6023      	str	r3, [r4, #0]
 80050b0:	2310      	movs	r3, #16
 80050b2:	e7af      	b.n	8005014 <_printf_i+0xfc>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	f043 0320 	orr.w	r3, r3, #32
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	2378      	movs	r3, #120	; 0x78
 80050be:	4828      	ldr	r0, [pc, #160]	; (8005160 <_printf_i+0x248>)
 80050c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050c4:	e7e3      	b.n	800508e <_printf_i+0x176>
 80050c6:	0659      	lsls	r1, r3, #25
 80050c8:	bf48      	it	mi
 80050ca:	b2b6      	uxthmi	r6, r6
 80050cc:	e7e6      	b.n	800509c <_printf_i+0x184>
 80050ce:	4615      	mov	r5, r2
 80050d0:	e7bb      	b.n	800504a <_printf_i+0x132>
 80050d2:	682b      	ldr	r3, [r5, #0]
 80050d4:	6826      	ldr	r6, [r4, #0]
 80050d6:	1d18      	adds	r0, r3, #4
 80050d8:	6961      	ldr	r1, [r4, #20]
 80050da:	6028      	str	r0, [r5, #0]
 80050dc:	0635      	lsls	r5, r6, #24
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	d501      	bpl.n	80050e6 <_printf_i+0x1ce>
 80050e2:	6019      	str	r1, [r3, #0]
 80050e4:	e002      	b.n	80050ec <_printf_i+0x1d4>
 80050e6:	0670      	lsls	r0, r6, #25
 80050e8:	d5fb      	bpl.n	80050e2 <_printf_i+0x1ca>
 80050ea:	8019      	strh	r1, [r3, #0]
 80050ec:	2300      	movs	r3, #0
 80050ee:	4615      	mov	r5, r2
 80050f0:	6123      	str	r3, [r4, #16]
 80050f2:	e7ba      	b.n	800506a <_printf_i+0x152>
 80050f4:	682b      	ldr	r3, [r5, #0]
 80050f6:	2100      	movs	r1, #0
 80050f8:	1d1a      	adds	r2, r3, #4
 80050fa:	602a      	str	r2, [r5, #0]
 80050fc:	681d      	ldr	r5, [r3, #0]
 80050fe:	6862      	ldr	r2, [r4, #4]
 8005100:	4628      	mov	r0, r5
 8005102:	f000 f82f 	bl	8005164 <memchr>
 8005106:	b108      	cbz	r0, 800510c <_printf_i+0x1f4>
 8005108:	1b40      	subs	r0, r0, r5
 800510a:	6060      	str	r0, [r4, #4]
 800510c:	6863      	ldr	r3, [r4, #4]
 800510e:	6123      	str	r3, [r4, #16]
 8005110:	2300      	movs	r3, #0
 8005112:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005116:	e7a8      	b.n	800506a <_printf_i+0x152>
 8005118:	462a      	mov	r2, r5
 800511a:	4649      	mov	r1, r9
 800511c:	4640      	mov	r0, r8
 800511e:	6923      	ldr	r3, [r4, #16]
 8005120:	47d0      	blx	sl
 8005122:	3001      	adds	r0, #1
 8005124:	d0ab      	beq.n	800507e <_printf_i+0x166>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	079b      	lsls	r3, r3, #30
 800512a:	d413      	bmi.n	8005154 <_printf_i+0x23c>
 800512c:	68e0      	ldr	r0, [r4, #12]
 800512e:	9b03      	ldr	r3, [sp, #12]
 8005130:	4298      	cmp	r0, r3
 8005132:	bfb8      	it	lt
 8005134:	4618      	movlt	r0, r3
 8005136:	e7a4      	b.n	8005082 <_printf_i+0x16a>
 8005138:	2301      	movs	r3, #1
 800513a:	4632      	mov	r2, r6
 800513c:	4649      	mov	r1, r9
 800513e:	4640      	mov	r0, r8
 8005140:	47d0      	blx	sl
 8005142:	3001      	adds	r0, #1
 8005144:	d09b      	beq.n	800507e <_printf_i+0x166>
 8005146:	3501      	adds	r5, #1
 8005148:	68e3      	ldr	r3, [r4, #12]
 800514a:	9903      	ldr	r1, [sp, #12]
 800514c:	1a5b      	subs	r3, r3, r1
 800514e:	42ab      	cmp	r3, r5
 8005150:	dcf2      	bgt.n	8005138 <_printf_i+0x220>
 8005152:	e7eb      	b.n	800512c <_printf_i+0x214>
 8005154:	2500      	movs	r5, #0
 8005156:	f104 0619 	add.w	r6, r4, #25
 800515a:	e7f5      	b.n	8005148 <_printf_i+0x230>
 800515c:	08005adb 	.word	0x08005adb
 8005160:	08005aec 	.word	0x08005aec

08005164 <memchr>:
 8005164:	4603      	mov	r3, r0
 8005166:	b510      	push	{r4, lr}
 8005168:	b2c9      	uxtb	r1, r1
 800516a:	4402      	add	r2, r0
 800516c:	4293      	cmp	r3, r2
 800516e:	4618      	mov	r0, r3
 8005170:	d101      	bne.n	8005176 <memchr+0x12>
 8005172:	2000      	movs	r0, #0
 8005174:	e003      	b.n	800517e <memchr+0x1a>
 8005176:	7804      	ldrb	r4, [r0, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	428c      	cmp	r4, r1
 800517c:	d1f6      	bne.n	800516c <memchr+0x8>
 800517e:	bd10      	pop	{r4, pc}

08005180 <memmove>:
 8005180:	4288      	cmp	r0, r1
 8005182:	b510      	push	{r4, lr}
 8005184:	eb01 0402 	add.w	r4, r1, r2
 8005188:	d902      	bls.n	8005190 <memmove+0x10>
 800518a:	4284      	cmp	r4, r0
 800518c:	4623      	mov	r3, r4
 800518e:	d807      	bhi.n	80051a0 <memmove+0x20>
 8005190:	1e43      	subs	r3, r0, #1
 8005192:	42a1      	cmp	r1, r4
 8005194:	d008      	beq.n	80051a8 <memmove+0x28>
 8005196:	f811 2b01 	ldrb.w	r2, [r1], #1
 800519a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800519e:	e7f8      	b.n	8005192 <memmove+0x12>
 80051a0:	4601      	mov	r1, r0
 80051a2:	4402      	add	r2, r0
 80051a4:	428a      	cmp	r2, r1
 80051a6:	d100      	bne.n	80051aa <memmove+0x2a>
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051b2:	e7f7      	b.n	80051a4 <memmove+0x24>

080051b4 <_free_r>:
 80051b4:	b538      	push	{r3, r4, r5, lr}
 80051b6:	4605      	mov	r5, r0
 80051b8:	2900      	cmp	r1, #0
 80051ba:	d040      	beq.n	800523e <_free_r+0x8a>
 80051bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051c0:	1f0c      	subs	r4, r1, #4
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	bfb8      	it	lt
 80051c6:	18e4      	addlt	r4, r4, r3
 80051c8:	f000 f910 	bl	80053ec <__malloc_lock>
 80051cc:	4a1c      	ldr	r2, [pc, #112]	; (8005240 <_free_r+0x8c>)
 80051ce:	6813      	ldr	r3, [r2, #0]
 80051d0:	b933      	cbnz	r3, 80051e0 <_free_r+0x2c>
 80051d2:	6063      	str	r3, [r4, #4]
 80051d4:	6014      	str	r4, [r2, #0]
 80051d6:	4628      	mov	r0, r5
 80051d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051dc:	f000 b90c 	b.w	80053f8 <__malloc_unlock>
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	d908      	bls.n	80051f6 <_free_r+0x42>
 80051e4:	6820      	ldr	r0, [r4, #0]
 80051e6:	1821      	adds	r1, r4, r0
 80051e8:	428b      	cmp	r3, r1
 80051ea:	bf01      	itttt	eq
 80051ec:	6819      	ldreq	r1, [r3, #0]
 80051ee:	685b      	ldreq	r3, [r3, #4]
 80051f0:	1809      	addeq	r1, r1, r0
 80051f2:	6021      	streq	r1, [r4, #0]
 80051f4:	e7ed      	b.n	80051d2 <_free_r+0x1e>
 80051f6:	461a      	mov	r2, r3
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	b10b      	cbz	r3, 8005200 <_free_r+0x4c>
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	d9fa      	bls.n	80051f6 <_free_r+0x42>
 8005200:	6811      	ldr	r1, [r2, #0]
 8005202:	1850      	adds	r0, r2, r1
 8005204:	42a0      	cmp	r0, r4
 8005206:	d10b      	bne.n	8005220 <_free_r+0x6c>
 8005208:	6820      	ldr	r0, [r4, #0]
 800520a:	4401      	add	r1, r0
 800520c:	1850      	adds	r0, r2, r1
 800520e:	4283      	cmp	r3, r0
 8005210:	6011      	str	r1, [r2, #0]
 8005212:	d1e0      	bne.n	80051d6 <_free_r+0x22>
 8005214:	6818      	ldr	r0, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	4401      	add	r1, r0
 800521a:	6011      	str	r1, [r2, #0]
 800521c:	6053      	str	r3, [r2, #4]
 800521e:	e7da      	b.n	80051d6 <_free_r+0x22>
 8005220:	d902      	bls.n	8005228 <_free_r+0x74>
 8005222:	230c      	movs	r3, #12
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	e7d6      	b.n	80051d6 <_free_r+0x22>
 8005228:	6820      	ldr	r0, [r4, #0]
 800522a:	1821      	adds	r1, r4, r0
 800522c:	428b      	cmp	r3, r1
 800522e:	bf01      	itttt	eq
 8005230:	6819      	ldreq	r1, [r3, #0]
 8005232:	685b      	ldreq	r3, [r3, #4]
 8005234:	1809      	addeq	r1, r1, r0
 8005236:	6021      	streq	r1, [r4, #0]
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	6054      	str	r4, [r2, #4]
 800523c:	e7cb      	b.n	80051d6 <_free_r+0x22>
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	20002f2c 	.word	0x20002f2c

08005244 <sbrk_aligned>:
 8005244:	b570      	push	{r4, r5, r6, lr}
 8005246:	4e0e      	ldr	r6, [pc, #56]	; (8005280 <sbrk_aligned+0x3c>)
 8005248:	460c      	mov	r4, r1
 800524a:	6831      	ldr	r1, [r6, #0]
 800524c:	4605      	mov	r5, r0
 800524e:	b911      	cbnz	r1, 8005256 <sbrk_aligned+0x12>
 8005250:	f000 f8bc 	bl	80053cc <_sbrk_r>
 8005254:	6030      	str	r0, [r6, #0]
 8005256:	4621      	mov	r1, r4
 8005258:	4628      	mov	r0, r5
 800525a:	f000 f8b7 	bl	80053cc <_sbrk_r>
 800525e:	1c43      	adds	r3, r0, #1
 8005260:	d00a      	beq.n	8005278 <sbrk_aligned+0x34>
 8005262:	1cc4      	adds	r4, r0, #3
 8005264:	f024 0403 	bic.w	r4, r4, #3
 8005268:	42a0      	cmp	r0, r4
 800526a:	d007      	beq.n	800527c <sbrk_aligned+0x38>
 800526c:	1a21      	subs	r1, r4, r0
 800526e:	4628      	mov	r0, r5
 8005270:	f000 f8ac 	bl	80053cc <_sbrk_r>
 8005274:	3001      	adds	r0, #1
 8005276:	d101      	bne.n	800527c <sbrk_aligned+0x38>
 8005278:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800527c:	4620      	mov	r0, r4
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	20002f30 	.word	0x20002f30

08005284 <_malloc_r>:
 8005284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005288:	1ccd      	adds	r5, r1, #3
 800528a:	f025 0503 	bic.w	r5, r5, #3
 800528e:	3508      	adds	r5, #8
 8005290:	2d0c      	cmp	r5, #12
 8005292:	bf38      	it	cc
 8005294:	250c      	movcc	r5, #12
 8005296:	2d00      	cmp	r5, #0
 8005298:	4607      	mov	r7, r0
 800529a:	db01      	blt.n	80052a0 <_malloc_r+0x1c>
 800529c:	42a9      	cmp	r1, r5
 800529e:	d905      	bls.n	80052ac <_malloc_r+0x28>
 80052a0:	230c      	movs	r3, #12
 80052a2:	2600      	movs	r6, #0
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	4630      	mov	r0, r6
 80052a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ac:	4e2e      	ldr	r6, [pc, #184]	; (8005368 <_malloc_r+0xe4>)
 80052ae:	f000 f89d 	bl	80053ec <__malloc_lock>
 80052b2:	6833      	ldr	r3, [r6, #0]
 80052b4:	461c      	mov	r4, r3
 80052b6:	bb34      	cbnz	r4, 8005306 <_malloc_r+0x82>
 80052b8:	4629      	mov	r1, r5
 80052ba:	4638      	mov	r0, r7
 80052bc:	f7ff ffc2 	bl	8005244 <sbrk_aligned>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	4604      	mov	r4, r0
 80052c4:	d14d      	bne.n	8005362 <_malloc_r+0xde>
 80052c6:	6834      	ldr	r4, [r6, #0]
 80052c8:	4626      	mov	r6, r4
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	d140      	bne.n	8005350 <_malloc_r+0xcc>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	4631      	mov	r1, r6
 80052d2:	4638      	mov	r0, r7
 80052d4:	eb04 0803 	add.w	r8, r4, r3
 80052d8:	f000 f878 	bl	80053cc <_sbrk_r>
 80052dc:	4580      	cmp	r8, r0
 80052de:	d13a      	bne.n	8005356 <_malloc_r+0xd2>
 80052e0:	6821      	ldr	r1, [r4, #0]
 80052e2:	3503      	adds	r5, #3
 80052e4:	1a6d      	subs	r5, r5, r1
 80052e6:	f025 0503 	bic.w	r5, r5, #3
 80052ea:	3508      	adds	r5, #8
 80052ec:	2d0c      	cmp	r5, #12
 80052ee:	bf38      	it	cc
 80052f0:	250c      	movcc	r5, #12
 80052f2:	4638      	mov	r0, r7
 80052f4:	4629      	mov	r1, r5
 80052f6:	f7ff ffa5 	bl	8005244 <sbrk_aligned>
 80052fa:	3001      	adds	r0, #1
 80052fc:	d02b      	beq.n	8005356 <_malloc_r+0xd2>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	442b      	add	r3, r5
 8005302:	6023      	str	r3, [r4, #0]
 8005304:	e00e      	b.n	8005324 <_malloc_r+0xa0>
 8005306:	6822      	ldr	r2, [r4, #0]
 8005308:	1b52      	subs	r2, r2, r5
 800530a:	d41e      	bmi.n	800534a <_malloc_r+0xc6>
 800530c:	2a0b      	cmp	r2, #11
 800530e:	d916      	bls.n	800533e <_malloc_r+0xba>
 8005310:	1961      	adds	r1, r4, r5
 8005312:	42a3      	cmp	r3, r4
 8005314:	6025      	str	r5, [r4, #0]
 8005316:	bf18      	it	ne
 8005318:	6059      	strne	r1, [r3, #4]
 800531a:	6863      	ldr	r3, [r4, #4]
 800531c:	bf08      	it	eq
 800531e:	6031      	streq	r1, [r6, #0]
 8005320:	5162      	str	r2, [r4, r5]
 8005322:	604b      	str	r3, [r1, #4]
 8005324:	4638      	mov	r0, r7
 8005326:	f104 060b 	add.w	r6, r4, #11
 800532a:	f000 f865 	bl	80053f8 <__malloc_unlock>
 800532e:	f026 0607 	bic.w	r6, r6, #7
 8005332:	1d23      	adds	r3, r4, #4
 8005334:	1af2      	subs	r2, r6, r3
 8005336:	d0b6      	beq.n	80052a6 <_malloc_r+0x22>
 8005338:	1b9b      	subs	r3, r3, r6
 800533a:	50a3      	str	r3, [r4, r2]
 800533c:	e7b3      	b.n	80052a6 <_malloc_r+0x22>
 800533e:	6862      	ldr	r2, [r4, #4]
 8005340:	42a3      	cmp	r3, r4
 8005342:	bf0c      	ite	eq
 8005344:	6032      	streq	r2, [r6, #0]
 8005346:	605a      	strne	r2, [r3, #4]
 8005348:	e7ec      	b.n	8005324 <_malloc_r+0xa0>
 800534a:	4623      	mov	r3, r4
 800534c:	6864      	ldr	r4, [r4, #4]
 800534e:	e7b2      	b.n	80052b6 <_malloc_r+0x32>
 8005350:	4634      	mov	r4, r6
 8005352:	6876      	ldr	r6, [r6, #4]
 8005354:	e7b9      	b.n	80052ca <_malloc_r+0x46>
 8005356:	230c      	movs	r3, #12
 8005358:	4638      	mov	r0, r7
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	f000 f84c 	bl	80053f8 <__malloc_unlock>
 8005360:	e7a1      	b.n	80052a6 <_malloc_r+0x22>
 8005362:	6025      	str	r5, [r4, #0]
 8005364:	e7de      	b.n	8005324 <_malloc_r+0xa0>
 8005366:	bf00      	nop
 8005368:	20002f2c 	.word	0x20002f2c

0800536c <_realloc_r>:
 800536c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005370:	4680      	mov	r8, r0
 8005372:	4614      	mov	r4, r2
 8005374:	460e      	mov	r6, r1
 8005376:	b921      	cbnz	r1, 8005382 <_realloc_r+0x16>
 8005378:	4611      	mov	r1, r2
 800537a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800537e:	f7ff bf81 	b.w	8005284 <_malloc_r>
 8005382:	b92a      	cbnz	r2, 8005390 <_realloc_r+0x24>
 8005384:	f7ff ff16 	bl	80051b4 <_free_r>
 8005388:	4625      	mov	r5, r4
 800538a:	4628      	mov	r0, r5
 800538c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005390:	f000 f838 	bl	8005404 <_malloc_usable_size_r>
 8005394:	4284      	cmp	r4, r0
 8005396:	4607      	mov	r7, r0
 8005398:	d802      	bhi.n	80053a0 <_realloc_r+0x34>
 800539a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800539e:	d812      	bhi.n	80053c6 <_realloc_r+0x5a>
 80053a0:	4621      	mov	r1, r4
 80053a2:	4640      	mov	r0, r8
 80053a4:	f7ff ff6e 	bl	8005284 <_malloc_r>
 80053a8:	4605      	mov	r5, r0
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d0ed      	beq.n	800538a <_realloc_r+0x1e>
 80053ae:	42bc      	cmp	r4, r7
 80053b0:	4622      	mov	r2, r4
 80053b2:	4631      	mov	r1, r6
 80053b4:	bf28      	it	cs
 80053b6:	463a      	movcs	r2, r7
 80053b8:	f7ff fb5e 	bl	8004a78 <memcpy>
 80053bc:	4631      	mov	r1, r6
 80053be:	4640      	mov	r0, r8
 80053c0:	f7ff fef8 	bl	80051b4 <_free_r>
 80053c4:	e7e1      	b.n	800538a <_realloc_r+0x1e>
 80053c6:	4635      	mov	r5, r6
 80053c8:	e7df      	b.n	800538a <_realloc_r+0x1e>
	...

080053cc <_sbrk_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	2300      	movs	r3, #0
 80053d0:	4d05      	ldr	r5, [pc, #20]	; (80053e8 <_sbrk_r+0x1c>)
 80053d2:	4604      	mov	r4, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	602b      	str	r3, [r5, #0]
 80053d8:	f7fc fa78 	bl	80018cc <_sbrk>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_sbrk_r+0x1a>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_sbrk_r+0x1a>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	20002f34 	.word	0x20002f34

080053ec <__malloc_lock>:
 80053ec:	4801      	ldr	r0, [pc, #4]	; (80053f4 <__malloc_lock+0x8>)
 80053ee:	f000 b811 	b.w	8005414 <__retarget_lock_acquire_recursive>
 80053f2:	bf00      	nop
 80053f4:	20002f38 	.word	0x20002f38

080053f8 <__malloc_unlock>:
 80053f8:	4801      	ldr	r0, [pc, #4]	; (8005400 <__malloc_unlock+0x8>)
 80053fa:	f000 b80c 	b.w	8005416 <__retarget_lock_release_recursive>
 80053fe:	bf00      	nop
 8005400:	20002f38 	.word	0x20002f38

08005404 <_malloc_usable_size_r>:
 8005404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005408:	1f18      	subs	r0, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	bfbc      	itt	lt
 800540e:	580b      	ldrlt	r3, [r1, r0]
 8005410:	18c0      	addlt	r0, r0, r3
 8005412:	4770      	bx	lr

08005414 <__retarget_lock_acquire_recursive>:
 8005414:	4770      	bx	lr

08005416 <__retarget_lock_release_recursive>:
 8005416:	4770      	bx	lr

08005418 <_init>:
 8005418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541a:	bf00      	nop
 800541c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541e:	bc08      	pop	{r3}
 8005420:	469e      	mov	lr, r3
 8005422:	4770      	bx	lr

08005424 <_fini>:
 8005424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005426:	bf00      	nop
 8005428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800542a:	bc08      	pop	{r3}
 800542c:	469e      	mov	lr, r3
 800542e:	4770      	bx	lr
