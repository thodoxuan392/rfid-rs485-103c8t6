
rs485-slave-103c8t6-spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006518  08006518  00020434  2**0
                  CONTENTS
  4 .ARM          00000000  08006518  08006518  00020434  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006518  08006518  00020434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006518  08006518  00016518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  08006528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d5c  20000434  0800695c  00020434  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003190  0800695c  00023190  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014053  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003953  00000000  00000000  000344b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00037e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  00039228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d217  00000000  00000000  0003a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180c5  00000000  00000000  000576b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000900bf  00000000  00000000  0006f77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff83b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000564c  00000000  00000000  000ff88c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000434 	.word	0x20000434
 8000128:	00000000 	.word	0x00000000
 800012c:	08005e38 	.word	0x08005e38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000438 	.word	0x20000438
 8000148:	08005e38 	.word	0x08005e38

0800014c <COMMANDHANDLER_run>:

void COMMANDHANDLER_init(void) {}

void COMMANDHANDLER_deinit(void) {}

void COMMANDHANDLER_run(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	// Handle RS485 Message
	if(RS485_receive(&COMMANDHANDLER_rxRs485Message)){
 8000150:	480f      	ldr	r0, [pc, #60]	; (8000190 <COMMANDHANDLER_run+0x44>)
 8000152:	f001 f923 	bl	800139c <RS485_receive>
 8000156:	4603      	mov	r3, r0
 8000158:	2b00      	cmp	r3, #0
 800015a:	d018      	beq.n	800018e <COMMANDHANDLER_run+0x42>
		if(!COMMANDHANDLER_isRs485MessageValid(&COMMANDHANDLER_rxRs485Message)){
 800015c:	480c      	ldr	r0, [pc, #48]	; (8000190 <COMMANDHANDLER_run+0x44>)
 800015e:	f000 f819 	bl	8000194 <COMMANDHANDLER_isRs485MessageValid>
 8000162:	4603      	mov	r3, r0
 8000164:	f083 0301 	eor.w	r3, r3, #1
 8000168:	b2db      	uxtb	r3, r3
 800016a:	2b00      	cmp	r3, #0
 800016c:	d10e      	bne.n	800018c <COMMANDHANDLER_run+0x40>
			return;
		}
		switch (COMMANDHANDLER_rxRs485Message.messageId) {
 800016e:	4b08      	ldr	r3, [pc, #32]	; (8000190 <COMMANDHANDLER_run+0x44>)
 8000170:	78db      	ldrb	r3, [r3, #3]
 8000172:	2b01      	cmp	r3, #1
 8000174:	d002      	beq.n	800017c <COMMANDHANDLER_run+0x30>
 8000176:	2b03      	cmp	r3, #3
 8000178:	d004      	beq.n	8000184 <COMMANDHANDLER_run+0x38>
				break;
			case COMMANDHANDLER_RFID_485_MESSAGE_ID_REQUEST_UPDATE:
				COMMANDHANDLER_handleRequestRFIDUpdate(&COMMANDHANDLER_rxRs485Message);
				break;
			default:
				break;
 800017a:	e008      	b.n	800018e <COMMANDHANDLER_run+0x42>
				COMMANDHANDLER_handleRequestRFIDStatus(&COMMANDHANDLER_rxRs485Message);
 800017c:	4804      	ldr	r0, [pc, #16]	; (8000190 <COMMANDHANDLER_run+0x44>)
 800017e:	f000 f829 	bl	80001d4 <COMMANDHANDLER_handleRequestRFIDStatus>
				break;
 8000182:	e004      	b.n	800018e <COMMANDHANDLER_run+0x42>
				COMMANDHANDLER_handleRequestRFIDUpdate(&COMMANDHANDLER_rxRs485Message);
 8000184:	4802      	ldr	r0, [pc, #8]	; (8000190 <COMMANDHANDLER_run+0x44>)
 8000186:	f000 f84a 	bl	800021e <COMMANDHANDLER_handleRequestRFIDUpdate>
				break;
 800018a:	e000      	b.n	800018e <COMMANDHANDLER_run+0x42>
			return;
 800018c:	bf00      	nop
		}
	}
}
 800018e:	bd80      	pop	{r7, pc}
 8000190:	20000450 	.word	0x20000450

08000194 <COMMANDHANDLER_isRs485MessageValid>:

static bool COMMANDHANDLER_isRs485MessageValid(RS485_Message *message){
 8000194:	b580      	push	{r7, lr}
 8000196:	b084      	sub	sp, #16
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	uint8_t nodeId = DIPSWITCH_get();
 800019c:	f000 fa0a 	bl	80005b4 <DIPSWITCH_get>
 80001a0:	4603      	mov	r3, r0
 80001a2:	73fb      	strb	r3, [r7, #15]
	if(message->networkId != COMMANDHANDLER_RFID_485_NETWORK_ID){
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d001      	beq.n	80001b0 <COMMANDHANDLER_isRs485MessageValid+0x1c>
		return false;
 80001ac:	2300      	movs	r3, #0
 80001ae:	e00d      	b.n	80001cc <COMMANDHANDLER_isRs485MessageValid+0x38>
	}
	if(message->srcNode != COMMANDHANDLER_RFID_485_MASTER_NODE_ID){
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	785b      	ldrb	r3, [r3, #1]
 80001b4:	2bff      	cmp	r3, #255	; 0xff
 80001b6:	d001      	beq.n	80001bc <COMMANDHANDLER_isRs485MessageValid+0x28>
		return false;
 80001b8:	2300      	movs	r3, #0
 80001ba:	e007      	b.n	80001cc <COMMANDHANDLER_isRs485MessageValid+0x38>
	}
	if(message->desNode != nodeId){
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	789b      	ldrb	r3, [r3, #2]
 80001c0:	7bfa      	ldrb	r2, [r7, #15]
 80001c2:	429a      	cmp	r2, r3
 80001c4:	d001      	beq.n	80001ca <COMMANDHANDLER_isRs485MessageValid+0x36>
		return false;
 80001c6:	2300      	movs	r3, #0
 80001c8:	e000      	b.n	80001cc <COMMANDHANDLER_isRs485MessageValid+0x38>
	}
	return true;
 80001ca:	2301      	movs	r3, #1
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3710      	adds	r7, #16
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <COMMANDHANDLER_handleRequestRFIDStatus>:

static void COMMANDHANDLER_handleRequestRFIDStatus(RS485_Message *message){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	uint8_t nodeId = DIPSWITCH_get();
 80001dc:	f000 f9ea 	bl	80005b4 <DIPSWITCH_get>
 80001e0:	4603      	mov	r3, r0
 80001e2:	77fb      	strb	r3, [r7, #31]
	if(!RFID_isPlaced()){
 80001e4:	f000 fab6 	bl	8000754 <RFID_isPlaced>
 80001e8:	4603      	mov	r3, r0
 80001ea:	f083 0301 	eor.w	r3, r3, #1
 80001ee:	b2db      	uxtb	r3, r3
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d005      	beq.n	8000200 <COMMANDHANDLER_handleRequestRFIDStatus+0x2c>
		COMMANDHANDLER_sendRFIDStatusResponse(nodeId, NULL);
 80001f4:	7ffb      	ldrb	r3, [r7, #31]
 80001f6:	2100      	movs	r1, #0
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f852 	bl	80002a2 <COMMANDHANDLER_sendRFIDStatusResponse>
 80001fe:	e00b      	b.n	8000218 <COMMANDHANDLER_handleRequestRFIDStatus+0x44>
		return;
	}
	RFID_t rfid;
	RFID_get(&rfid);
 8000200:	f107 030c 	add.w	r3, r7, #12
 8000204:	4618      	mov	r0, r3
 8000206:	f000 fa8b 	bl	8000720 <RFID_get>
	COMMANDHANDLER_sendRFIDStatusResponse(nodeId, &rfid);
 800020a:	f107 020c 	add.w	r2, r7, #12
 800020e:	7ffb      	ldrb	r3, [r7, #31]
 8000210:	4611      	mov	r1, r2
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f845 	bl	80002a2 <COMMANDHANDLER_sendRFIDStatusResponse>
}
 8000218:	3720      	adds	r7, #32
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}

0800021e <COMMANDHANDLER_handleRequestRFIDUpdate>:

static void COMMANDHANDLER_handleRequestRFIDUpdate(RS485_Message *message){
 800021e:	b580      	push	{r7, lr}
 8000220:	b088      	sub	sp, #32
 8000222:	af00      	add	r7, sp, #0
 8000224:	6078      	str	r0, [r7, #4]
	RFID_t rfid;
	rfid.id_len = message->data[0];
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	799b      	ldrb	r3, [r3, #6]
 800022a:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < rfid.id_len; ++i) {
 800022c:	2300      	movs	r3, #0
 800022e:	77fb      	strb	r3, [r7, #31]
 8000230:	e00c      	b.n	800024c <COMMANDHANDLER_handleRequestRFIDUpdate+0x2e>
		rfid.id[i] = message->data[1 + i];
 8000232:	7ffb      	ldrb	r3, [r7, #31]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	7ffb      	ldrb	r3, [r7, #31]
 8000238:	6879      	ldr	r1, [r7, #4]
 800023a:	440a      	add	r2, r1
 800023c:	7992      	ldrb	r2, [r2, #6]
 800023e:	3320      	adds	r3, #32
 8000240:	443b      	add	r3, r7
 8000242:	f803 2c18 	strb.w	r2, [r3, #-24]
	for (uint8_t i = 0; i < rfid.id_len; ++i) {
 8000246:	7ffb      	ldrb	r3, [r7, #31]
 8000248:	3301      	adds	r3, #1
 800024a:	77fb      	strb	r3, [r7, #31]
 800024c:	7dfb      	ldrb	r3, [r7, #23]
 800024e:	7ffa      	ldrb	r2, [r7, #31]
 8000250:	429a      	cmp	r2, r3
 8000252:	d3ee      	bcc.n	8000232 <COMMANDHANDLER_handleRequestRFIDUpdate+0x14>
	}
	rfid.code = message->data[rfid.id_len + 1];
 8000254:	7dfb      	ldrb	r3, [r7, #23]
 8000256:	3301      	adds	r3, #1
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	4413      	add	r3, r2
 800025c:	799b      	ldrb	r3, [r3, #6]
 800025e:	763b      	strb	r3, [r7, #24]
	rfid.type = message->data[rfid.id_len + 2];
 8000260:	7dfb      	ldrb	r3, [r7, #23]
 8000262:	3302      	adds	r3, #2
 8000264:	687a      	ldr	r2, [r7, #4]
 8000266:	4413      	add	r3, r2
 8000268:	799b      	ldrb	r3, [r3, #6]
 800026a:	767b      	strb	r3, [r7, #25]
	rfid.isUsed = message->data[rfid.id_len + 3];
 800026c:	7dfb      	ldrb	r3, [r7, #23]
 800026e:	3303      	adds	r3, #3
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	4413      	add	r3, r2
 8000274:	799b      	ldrb	r3, [r3, #6]
 8000276:	76bb      	strb	r3, [r7, #26]
	RFID_Error_t error = RFID_set(&rfid);
 8000278:	f107 0308 	add.w	r3, r7, #8
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fa75 	bl	800076c <RFID_set>
 8000282:	4603      	mov	r3, r0
 8000284:	77bb      	strb	r3, [r7, #30]

	uint8_t nodeId = DIPSWITCH_get();
 8000286:	f000 f995 	bl	80005b4 <DIPSWITCH_get>
 800028a:	4603      	mov	r3, r0
 800028c:	777b      	strb	r3, [r7, #29]
	COMMANDHANDLER_sendRFIDUpdateResponse(nodeId, error);
 800028e:	7fba      	ldrb	r2, [r7, #30]
 8000290:	7f7b      	ldrb	r3, [r7, #29]
 8000292:	4611      	mov	r1, r2
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f8ed 	bl	8000474 <COMMANDHANDLER_sendRFIDUpdateResponse>
}
 800029a:	bf00      	nop
 800029c:	3720      	adds	r7, #32
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}

080002a2 <COMMANDHANDLER_sendRFIDStatusResponse>:

/**
 * @defgroup Response Function
 */

static void COMMANDHANDLER_sendRFIDStatusResponse(uint8_t nodeId, RFID_t *rfid){
 80002a2:	b580      	push	{r7, lr}
 80002a4:	b0c6      	sub	sp, #280	; 0x118
 80002a6:	af00      	add	r7, sp, #0
 80002a8:	4602      	mov	r2, r0
 80002aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002ae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80002b2:	6019      	str	r1, [r3, #0]
 80002b4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002b8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80002bc:	701a      	strb	r2, [r3, #0]
	RS485_Message message;
	message.networkId = COMMANDHANDLER_RFID_485_NETWORK_ID;
 80002be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002c6:	2201      	movs	r2, #1
 80002c8:	701a      	strb	r2, [r3, #0]
	message.srcNode = nodeId;
 80002ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002d2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80002d6:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 80002da:	7812      	ldrb	r2, [r2, #0]
 80002dc:	705a      	strb	r2, [r3, #1]
	message.desNode = COMMANDHANDLER_RFID_485_MASTER_NODE_ID;
 80002de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002e6:	22ff      	movs	r2, #255	; 0xff
 80002e8:	709a      	strb	r2, [r3, #2]
	message.messageId = COMMANDHANDLER_RFID_485_MESSAGE_ID_RESPONSE_STATUS;
 80002ea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80002f2:	2202      	movs	r2, #2
 80002f4:	70da      	strb	r2, [r3, #3]

	// Has RFID
	if(rfid != NULL){
 80002f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80002fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	2b00      	cmp	r3, #0
 8000302:	f000 80a1 	beq.w	8000448 <COMMANDHANDLER_sendRFIDStatusResponse+0x1a6>
		message.resultCode = RS485_RESULT_CODE_SUCCESS;
 8000306:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800030a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800030e:	2200      	movs	r2, #0
 8000310:	711a      	strb	r2, [r3, #4]
		message.dataLen = 0;
 8000312:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000316:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800031a:	2200      	movs	r2, #0
 800031c:	715a      	strb	r2, [r3, #5]
		message.data[message.dataLen++] =rfid->id_len;
 800031e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000322:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000326:	795b      	ldrb	r3, [r3, #5]
 8000328:	1c5a      	adds	r2, r3, #1
 800032a:	b2d1      	uxtb	r1, r2
 800032c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000330:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000334:	7151      	strb	r1, [r2, #5]
 8000336:	4619      	mov	r1, r3
 8000338:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800033c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	7bda      	ldrb	r2, [r3, #15]
 8000344:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000348:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800034c:	440b      	add	r3, r1
 800034e:	719a      	strb	r2, [r3, #6]
		for (int i = 0; i < rfid->id_len; i++) {
 8000350:	2300      	movs	r3, #0
 8000352:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000356:	e020      	b.n	800039a <COMMANDHANDLER_sendRFIDStatusResponse+0xf8>
			message.data[message.dataLen++] = rfid->id[i];
 8000358:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800035c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000360:	795b      	ldrb	r3, [r3, #5]
 8000362:	1c5a      	adds	r2, r3, #1
 8000364:	b2d1      	uxtb	r1, r2
 8000366:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800036a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800036e:	7151      	strb	r1, [r2, #5]
 8000370:	4619      	mov	r1, r3
 8000372:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000376:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000380:	4413      	add	r3, r2
 8000382:	781a      	ldrb	r2, [r3, #0]
 8000384:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000388:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800038c:	440b      	add	r3, r1
 800038e:	719a      	strb	r2, [r3, #6]
		for (int i = 0; i < rfid->id_len; i++) {
 8000390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000394:	3301      	adds	r3, #1
 8000396:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800039a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800039e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	7bdb      	ldrb	r3, [r3, #15]
 80003a6:	461a      	mov	r2, r3
 80003a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80003ac:	4293      	cmp	r3, r2
 80003ae:	dbd3      	blt.n	8000358 <COMMANDHANDLER_sendRFIDStatusResponse+0xb6>
		}
		message.data[message.dataLen++] =rfid->code;
 80003b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003b8:	795b      	ldrb	r3, [r3, #5]
 80003ba:	1c5a      	adds	r2, r3, #1
 80003bc:	b2d1      	uxtb	r1, r2
 80003be:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80003c2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80003c6:	7151      	strb	r1, [r2, #5]
 80003c8:	4619      	mov	r1, r3
 80003ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	7c1a      	ldrb	r2, [r3, #16]
 80003d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003de:	440b      	add	r3, r1
 80003e0:	719a      	strb	r2, [r3, #6]
		message.data[message.dataLen++] =rfid->type;
 80003e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80003e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	1c5a      	adds	r2, r3, #1
 80003ee:	b2d1      	uxtb	r1, r2
 80003f0:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80003f4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80003f8:	7151      	strb	r1, [r2, #5]
 80003fa:	4619      	mov	r1, r3
 80003fc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000400:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	7c5a      	ldrb	r2, [r3, #17]
 8000408:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800040c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000410:	440b      	add	r3, r1
 8000412:	719a      	strb	r2, [r3, #6]
		message.data[message.dataLen++] =rfid->isUsed;
 8000414:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000418:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800041c:	795b      	ldrb	r3, [r3, #5]
 800041e:	1c5a      	adds	r2, r3, #1
 8000420:	b2d1      	uxtb	r1, r2
 8000422:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000426:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800042a:	7151      	strb	r1, [r2, #5]
 800042c:	4619      	mov	r1, r3
 800042e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000432:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	7c9a      	ldrb	r2, [r3, #18]
 800043a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800043e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000442:	440b      	add	r3, r1
 8000444:	719a      	strb	r2, [r3, #6]
 8000446:	e00b      	b.n	8000460 <COMMANDHANDLER_sendRFIDStatusResponse+0x1be>
	}else{
		message.resultCode = RS485_RESULT_CODE_FAILED;
 8000448:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800044c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000450:	2201      	movs	r2, #1
 8000452:	711a      	strb	r2, [r3, #4]
		message.dataLen = 0;
 8000454:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000458:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800045c:	2200      	movs	r2, #0
 800045e:	715a      	strb	r2, [r3, #5]
	}
	RS485_send(&message);
 8000460:	f107 030c 	add.w	r3, r7, #12
 8000464:	4618      	mov	r0, r3
 8000466:	f000 ff81 	bl	800136c <RS485_send>
}
 800046a:	bf00      	nop
 800046c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <COMMANDHANDLER_sendRFIDUpdateResponse>:

static void COMMANDHANDLER_sendRFIDUpdateResponse(uint8_t nodeId, RFID_Error_t error){
 8000474:	b580      	push	{r7, lr}
 8000476:	b0c4      	sub	sp, #272	; 0x110
 8000478:	af00      	add	r7, sp, #0
 800047a:	4602      	mov	r2, r0
 800047c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000480:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000484:	701a      	strb	r2, [r3, #0]
 8000486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800048a:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 800048e:	460a      	mov	r2, r1
 8000490:	701a      	strb	r2, [r3, #0]
	RS485_Message message;
	message.networkId = COMMANDHANDLER_RFID_485_NETWORK_ID;
 8000492:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800049a:	2201      	movs	r2, #1
 800049c:	701a      	strb	r2, [r3, #0]
	message.srcNode = nodeId;
 800049e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80004a6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80004aa:	f2a2 1209 	subw	r2, r2, #265	; 0x109
 80004ae:	7812      	ldrb	r2, [r2, #0]
 80004b0:	705a      	strb	r2, [r3, #1]
	message.desNode = COMMANDHANDLER_RFID_485_MASTER_NODE_ID;
 80004b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80004ba:	22ff      	movs	r2, #255	; 0xff
 80004bc:	709a      	strb	r2, [r3, #2]
	message.messageId = COMMANDHANDLER_RFID_485_MESSAGE_ID_RESPONSE_UPDATE;
 80004be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80004c6:	2204      	movs	r2, #4
 80004c8:	70da      	strb	r2, [r3, #3]
	message.resultCode = RS485_RESULT_CODE_SUCCESS;
 80004ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80004d2:	2200      	movs	r2, #0
 80004d4:	711a      	strb	r2, [r3, #4]
	message.dataLen = 1;
 80004d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80004de:	2201      	movs	r2, #1
 80004e0:	715a      	strb	r2, [r3, #5]
	message.data[0] = error;
 80004e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80004e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80004ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80004ee:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80004f2:	7812      	ldrb	r2, [r2, #0]
 80004f4:	719a      	strb	r2, [r3, #6]
	RS485_send(&message);
 80004f6:	f107 0308 	add.w	r3, r7, #8
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 ff36 	bl	800136c <RS485_send>
}
 8000500:	bf00      	nop
 8000502:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
	...

0800050c <CRC_calculate>:
    0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d,
    0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74,
    0x2e93, 0x3eb2, 0x0ed1, 0x1ef0,
};

uint16_t CRC_calculate(uint8_t *data, uint32_t dataLen) {
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  uint8_t counter;
  uint16_t checkSum = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	81bb      	strh	r3, [r7, #12]
  for (counter = 0; counter < dataLen; counter++)
 800051a:	2300      	movs	r3, #0
 800051c:	73fb      	strb	r3, [r7, #15]
 800051e:	e016      	b.n	800054e <CRC_calculate+0x42>
    checkSum =
        (checkSum << 8) ^ CRC_16Acorn[((checkSum >> 8) ^ *data++) & 0x00FF];
 8000520:	89bb      	ldrh	r3, [r7, #12]
 8000522:	021b      	lsls	r3, r3, #8
 8000524:	b21a      	sxth	r2, r3
 8000526:	89bb      	ldrh	r3, [r7, #12]
 8000528:	0a1b      	lsrs	r3, r3, #8
 800052a:	b29b      	uxth	r3, r3
 800052c:	4618      	mov	r0, r3
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	1c59      	adds	r1, r3, #1
 8000532:	6079      	str	r1, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4043      	eors	r3, r0
 8000538:	b2db      	uxtb	r3, r3
 800053a:	490a      	ldr	r1, [pc, #40]	; (8000564 <CRC_calculate+0x58>)
 800053c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000540:	b21b      	sxth	r3, r3
 8000542:	4053      	eors	r3, r2
 8000544:	b21b      	sxth	r3, r3
    checkSum =
 8000546:	81bb      	strh	r3, [r7, #12]
  for (counter = 0; counter < dataLen; counter++)
 8000548:	7bfb      	ldrb	r3, [r7, #15]
 800054a:	3301      	adds	r3, #1
 800054c:	73fb      	strb	r3, [r7, #15]
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	429a      	cmp	r2, r3
 8000554:	d8e4      	bhi.n	8000520 <CRC_calculate+0x14>
  return checkSum;
 8000556:	89bb      	ldrh	r3, [r7, #12]
 8000558:	4618      	mov	r0, r3
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	080062a8 	.word	0x080062a8

08000568 <DIPSWITCH_init>:
static GPIO_info_t DIPSWITCH_gpioTable[] = {
	{GPIOB, { GPIO_PIN_13, GPIO_MODE_INPUT, GPIO_PULLUP, GPIO_SPEED_FREQ_LOW}},
	{GPIOB, { GPIO_PIN_14, GPIO_MODE_INPUT, GPIO_PULLUP, GPIO_SPEED_FREQ_LOW}},
};

void DIPSWITCH_init(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	for (int dipswitchIdx = 0; dipswitchIdx < NB_ELEMENT(DIPSWITCH_gpioTable); ++dipswitchIdx) {
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	e015      	b.n	80005a0 <DIPSWITCH_init+0x38>
		HAL_GPIO_Init(DIPSWITCH_gpioTable[dipswitchIdx].port, &DIPSWITCH_gpioTable[dipswitchIdx].init_info);
 8000574:	490e      	ldr	r1, [pc, #56]	; (80005b0 <DIPSWITCH_init+0x48>)
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	4613      	mov	r3, r2
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	440b      	add	r3, r1
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4613      	mov	r3, r2
 8000588:	009b      	lsls	r3, r3, #2
 800058a:	4413      	add	r3, r2
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	4a08      	ldr	r2, [pc, #32]	; (80005b0 <DIPSWITCH_init+0x48>)
 8000590:	4413      	add	r3, r2
 8000592:	3304      	adds	r3, #4
 8000594:	4619      	mov	r1, r3
 8000596:	f001 fd87 	bl	80020a8 <HAL_GPIO_Init>
	for (int dipswitchIdx = 0; dipswitchIdx < NB_ELEMENT(DIPSWITCH_gpioTable); ++dipswitchIdx) {
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	3301      	adds	r3, #1
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d9e6      	bls.n	8000574 <DIPSWITCH_init+0xc>
	}
}
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000000 	.word	0x20000000

080005b4 <DIPSWITCH_get>:

void DIPSWTICH_deinit(void){

}

uint8_t DIPSWITCH_get(void){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
	for (int dipswitchIdx = 0; dipswitchIdx < NB_ELEMENT(DIPSWITCH_gpioTable); ++dipswitchIdx) {
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	e027      	b.n	8000614 <DIPSWITCH_get+0x60>
		ret |= (uint8_t)(!HAL_GPIO_ReadPin(DIPSWITCH_gpioTable[dipswitchIdx].port, DIPSWITCH_gpioTable[dipswitchIdx].init_info.Pin)) << dipswitchIdx;
 80005c4:	4917      	ldr	r1, [pc, #92]	; (8000624 <DIPSWITCH_get+0x70>)
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	4613      	mov	r3, r2
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	4413      	add	r3, r2
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	440b      	add	r3, r1
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	4913      	ldr	r1, [pc, #76]	; (8000624 <DIPSWITCH_get+0x70>)
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	4613      	mov	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4413      	add	r3, r2
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	3304      	adds	r3, #4
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	4619      	mov	r1, r3
 80005ea:	f001 fee1 	bl	80023b0 <HAL_GPIO_ReadPin>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf0c      	ite	eq
 80005f4:	2301      	moveq	r3, #1
 80005f6:	2300      	movne	r3, #0
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	b25a      	sxtb	r2, r3
 8000604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000608:	4313      	orrs	r3, r2
 800060a:	b25b      	sxtb	r3, r3
 800060c:	71fb      	strb	r3, [r7, #7]
	for (int dipswitchIdx = 0; dipswitchIdx < NB_ELEMENT(DIPSWITCH_gpioTable); ++dipswitchIdx) {
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d9d4      	bls.n	80005c4 <DIPSWITCH_get+0x10>
	}
	return ret;
 800061a:	79fb      	ldrb	r3, [r7, #7]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000000 	.word	0x20000000

08000628 <LOADCELL_writeIo>:

float LOADCELL_get(void){
	return LOADCELL_hx711.get_units();
}

void LOADCELL_writeIo(uint8_t io, uint8_t level){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	460a      	mov	r2, r1
 8000632:	71fb      	strb	r3, [r7, #7]
 8000634:	4613      	mov	r3, r2
 8000636:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(LOADCELL_ioTable[io].port, LOADCELL_ioTable[io].init_info.Pin, (GPIO_PinState)level);
 8000638:	79fa      	ldrb	r2, [r7, #7]
 800063a:	490c      	ldr	r1, [pc, #48]	; (800066c <LOADCELL_writeIo+0x44>)
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	4908      	ldr	r1, [pc, #32]	; (800066c <LOADCELL_writeIo+0x44>)
 800064c:	4613      	mov	r3, r2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	4413      	add	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	440b      	add	r3, r1
 8000656:	3304      	adds	r3, #4
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	b29b      	uxth	r3, r3
 800065c:	79ba      	ldrb	r2, [r7, #6]
 800065e:	4619      	mov	r1, r3
 8000660:	f001 febd 	bl	80023de <HAL_GPIO_WritePin>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	20000028 	.word	0x20000028

08000670 <_Z41__static_initialization_and_destruction_0ii>:
	}
}


#ifdef __cplusplus
}
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d107      	bne.n	8000690 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000686:	4293      	cmp	r3, r2
 8000688:	d102      	bne.n	8000690 <_Z41__static_initialization_and_destruction_0ii+0x20>
static HX711 LOADCELL_hx711;
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800068c:	f004 f964 	bl	8004958 <_ZN5HX711C1Ev>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d107      	bne.n	80006a6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800069c:	4293      	cmp	r3, r2
 800069e:	d102      	bne.n	80006a6 <_Z41__static_initialization_and_destruction_0ii+0x36>
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80006a2:	f004 f97c 	bl	800499e <_ZN5HX711D1Ev>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000558 	.word	0x20000558

080006b4 <_GLOBAL__sub_I_LOADCELL_init>:
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006bc:	2001      	movs	r0, #1
 80006be:	f7ff ffd7 	bl	8000670 <_Z41__static_initialization_and_destruction_0ii>
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <_GLOBAL__sub_D_LOADCELL_init>:
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80006cc:	2000      	movs	r0, #0
 80006ce:	f7ff ffcf 	bl	8000670 <_Z41__static_initialization_and_destruction_0ii>
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <RFID_init>:
				},
			},
	}
};

void RFID_init(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < RFID_ID_MAX; i++)
 80006da:	2300      	movs	r3, #0
 80006dc:	71fb      	strb	r3, [r7, #7]
 80006de:	e00c      	b.n	80006fa <RFID_init+0x26>
	{
		PN532_begin(&RFID_handleTable[i].pn532_handle);
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	4613      	mov	r3, r2
 80006e4:	00db      	lsls	r3, r3, #3
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	4a08      	ldr	r2, [pc, #32]	; (800070c <RFID_init+0x38>)
 80006ec:	4413      	add	r3, r2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 f99c 	bl	8004a2c <PN532_begin>
	for (uint8_t i = 0; i < RFID_ID_MAX; i++)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	3301      	adds	r3, #1
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b02      	cmp	r3, #2
 80006fe:	d9ef      	bls.n	80006e0 <RFID_init+0xc>
	}
}
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000050 	.word	0x20000050

08000710 <RFID_run>:

void RFID_run(void){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	RFID_runById(RFID_ID_1);
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f893 	bl	8000840 <RFID_runById>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <RFID_get>:


void RFID_get(RFID_t * rfid){
 8000720:	b4b0      	push	{r4, r5, r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	memcpy(rfid, &RFID_handleTable[RFID_ID_1].rfid, sizeof(RFID_t));
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <RFID_get+0x30>)
 800072c:	335b      	adds	r3, #91	; 0x5b
 800072e:	681d      	ldr	r5, [r3, #0]
 8000730:	685c      	ldr	r4, [r3, #4]
 8000732:	6898      	ldr	r0, [r3, #8]
 8000734:	68d9      	ldr	r1, [r3, #12]
 8000736:	6015      	str	r5, [r2, #0]
 8000738:	6054      	str	r4, [r2, #4]
 800073a:	6090      	str	r0, [r2, #8]
 800073c:	60d1      	str	r1, [r2, #12]
 800073e:	8a19      	ldrh	r1, [r3, #16]
 8000740:	7c9b      	ldrb	r3, [r3, #18]
 8000742:	8211      	strh	r1, [r2, #16]
 8000744:	7493      	strb	r3, [r2, #18]
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	bcb0      	pop	{r4, r5, r7}
 800074e:	4770      	bx	lr
 8000750:	20000050 	.word	0x20000050

08000754 <RFID_isPlaced>:

bool RFID_isPlaced(){
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
	return RFID_handleTable[RFID_ID_1].isPlaced;
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <RFID_isPlaced+0x14>)
 800075a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
}
 800075e:	4618      	mov	r0, r3
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	20000050 	.word	0x20000050

0800076c <RFID_set>:

void RFID_clearDetected(){
	RFID_handleTable[RFID_ID_1].isDetected = false;
}

RFID_Error_t RFID_set(RFID_t * rfid){
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af02      	add	r7, sp, #8
 8000772:	6078      	str	r0, [r7, #4]
	// Check RFID is available
	if(!RFID_handleTable[RFID_ID_1].isPlaced){
 8000774:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <RFID_set+0xc8>)
 8000776:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800077a:	f083 0301 	eor.w	r3, r3, #1
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <RFID_set+0x1c>
		return RFID_ERROR_NOT_AVAILABLE;
 8000784:	2370      	movs	r3, #112	; 0x70
 8000786:	e051      	b.n	800082c <RFID_set+0xc0>
	}
	// Check RFID uid is matched
	if(rfid->id_len != RFID_handleTable[RFID_ID_1].rfid.id_len){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7bda      	ldrb	r2, [r3, #15]
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <RFID_set+0xc8>)
 800078e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8000792:	429a      	cmp	r2, r3
 8000794:	d001      	beq.n	800079a <RFID_set+0x2e>
		return RFID_ERROR_INVALID_FORMAT;
 8000796:	2371      	movs	r3, #113	; 0x71
 8000798:	e048      	b.n	800082c <RFID_set+0xc0>
	}
	if(memcmp(rfid->id, RFID_handleTable[RFID_ID_1].rfid.id, rfid->id_len) != 0){
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	7bdb      	ldrb	r3, [r3, #15]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4925      	ldr	r1, [pc, #148]	; (8000838 <RFID_set+0xcc>)
 80007a4:	f004 fe68 	bl	8005478 <memcmp>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <RFID_set+0x46>
		return RFID_ERROR_ID_NOT_MATCHED;
 80007ae:	2372      	movs	r3, #114	; 0x72
 80007b0:	e03c      	b.n	800082c <RFID_set+0xc0>
	}
	uint8_t writeData[16] = {0};
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
	RFID_buildToBlockData(rfid, writeData, sizeof(writeData));
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	2210      	movs	r2, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f992 	bl	8000af4 <RFID_buildToBlockData>
	if(!PN532_readPassiveTargetID(&RFID_handleTable[RFID_ID_1], PN532_MIFARE_ISO14443A, rfid->id, &rfid->id_len, 100)){
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	330f      	adds	r3, #15
 80007d6:	2164      	movs	r1, #100	; 0x64
 80007d8:	9100      	str	r1, [sp, #0]
 80007da:	2100      	movs	r1, #0
 80007dc:	4815      	ldr	r0, [pc, #84]	; (8000834 <RFID_set+0xc8>)
 80007de:	f004 fa33 	bl	8004c48 <PN532_readPassiveTargetID>
 80007e2:	4603      	mov	r3, r0
 80007e4:	f083 0301 	eor.w	r3, r3, #1
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <RFID_set+0x86>
		return RFID_ERROR_NOT_AVAILABLE;
 80007ee:	2370      	movs	r3, #112	; 0x70
 80007f0:	e01c      	b.n	800082c <RFID_set+0xc0>
	}
	if(!PN532_mifareclassic_AuthenticateBlock(&RFID_handleTable[RFID_ID_1], rfid->id, rfid->id_len, RFID_PN532_DATA_BLOCK, 1, RFID_key)){
 80007f2:	6879      	ldr	r1, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	7bda      	ldrb	r2, [r3, #15]
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <RFID_set+0xd0>)
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	2301      	movs	r3, #1
 80007fe:	9300      	str	r3, [sp, #0]
 8000800:	2308      	movs	r3, #8
 8000802:	480c      	ldr	r0, [pc, #48]	; (8000834 <RFID_set+0xc8>)
 8000804:	f004 fa96 	bl	8004d34 <PN532_mifareclassic_AuthenticateBlock>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d101      	bne.n	8000812 <RFID_set+0xa6>
		return RFID_ERROR_AUTHEN_FAILED;
 800080e:	2373      	movs	r3, #115	; 0x73
 8000810:	e00c      	b.n	800082c <RFID_set+0xc0>
	}
	if(!PN532_mifareclassic_WriteDataBlock(&RFID_handleTable[RFID_ID_1], RFID_PN532_DATA_BLOCK , writeData)){
 8000812:	f107 0308 	add.w	r3, r7, #8
 8000816:	461a      	mov	r2, r3
 8000818:	2108      	movs	r1, #8
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <RFID_set+0xc8>)
 800081c:	f004 fb4c 	bl	8004eb8 <PN532_mifareclassic_WriteDataBlock>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d101      	bne.n	800082a <RFID_set+0xbe>
		return RFID_ERROR_CANNOT_WRITE;
 8000826:	2374      	movs	r3, #116	; 0x74
 8000828:	e000      	b.n	800082c <RFID_set+0xc0>
	}
	return RFID_SUCCESS;
 800082a:	2300      	movs	r3, #0
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000050 	.word	0x20000050
 8000838:	200000ab 	.word	0x200000ab
 800083c:	080064a8 	.word	0x080064a8

08000840 <RFID_runById>:
		HAL_Delay(1000);
		RFID_set(&rfid);
	}
}

static void RFID_runById(RFID_Id_t id){
 8000840:	b5b0      	push	{r4, r5, r7, lr}
 8000842:	b090      	sub	sp, #64	; 0x40
 8000844:	af02      	add	r7, sp, #8
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
	uint8_t uid[] = { 0, 0, 0, 0, 0, 0, 0 };  // Buffer to store the returned UID
 800084a:	4a6e      	ldr	r2, [pc, #440]	; (8000a04 <RFID_runById+0x1c4>)
 800084c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000850:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000854:	6018      	str	r0, [r3, #0]
 8000856:	3304      	adds	r3, #4
 8000858:	8019      	strh	r1, [r3, #0]
 800085a:	3302      	adds	r3, #2
 800085c:	0c0a      	lsrs	r2, r1, #16
 800085e:	701a      	strb	r2, [r3, #0]
	uint8_t uidLength;                        // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
	uint8_t readBlockData[16] = {0};
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
 8000864:	f107 0320 	add.w	r3, r7, #32
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
	if(!PN532_readPassiveTargetID(&RFID_handleTable[id], PN532_MIFARE_ISO14443A, uid, &uidLength, 100)){
 8000870:	79fa      	ldrb	r2, [r7, #7]
 8000872:	4613      	mov	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	1a9b      	subs	r3, r3, r2
 8000878:	011b      	lsls	r3, r3, #4
 800087a:	4a63      	ldr	r2, [pc, #396]	; (8000a08 <RFID_runById+0x1c8>)
 800087c:	1898      	adds	r0, r3, r2
 800087e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000882:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000886:	2164      	movs	r1, #100	; 0x64
 8000888:	9100      	str	r1, [sp, #0]
 800088a:	2100      	movs	r1, #0
 800088c:	f004 f9dc 	bl	8004c48 <PN532_readPassiveTargetID>
 8000890:	4603      	mov	r3, r0
 8000892:	f083 0301 	eor.w	r3, r3, #1
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d014      	beq.n	80008c6 <RFID_runById+0x86>
		RFID_handleTable[id].isPlaced = false;
 800089c:	79fa      	ldrb	r2, [r7, #7]
 800089e:	495a      	ldr	r1, [pc, #360]	; (8000a08 <RFID_runById+0x1c8>)
 80008a0:	4613      	mov	r3, r2
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	1a9b      	subs	r3, r3, r2
 80008a6:	011b      	lsls	r3, r3, #4
 80008a8:	440b      	add	r3, r1
 80008aa:	3359      	adds	r3, #89	; 0x59
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
		RFID_handleTable[id].rfid.code = RFID_ERROR_NOT_AVAILABLE;
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	4955      	ldr	r1, [pc, #340]	; (8000a08 <RFID_runById+0x1c8>)
 80008b4:	4613      	mov	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	1a9b      	subs	r3, r3, r2
 80008ba:	011b      	lsls	r3, r3, #4
 80008bc:	440b      	add	r3, r1
 80008be:	336b      	adds	r3, #107	; 0x6b
 80008c0:	2270      	movs	r2, #112	; 0x70
 80008c2:	701a      	strb	r2, [r3, #0]
		return;
 80008c4:	e09b      	b.n	80009fe <RFID_runById+0x1be>
	}
	if(!RFID_handleTable[id].isPlaced){
 80008c6:	79fa      	ldrb	r2, [r7, #7]
 80008c8:	494f      	ldr	r1, [pc, #316]	; (8000a08 <RFID_runById+0x1c8>)
 80008ca:	4613      	mov	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	1a9b      	subs	r3, r3, r2
 80008d0:	011b      	lsls	r3, r3, #4
 80008d2:	440b      	add	r3, r1
 80008d4:	3359      	adds	r3, #89	; 0x59
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	f083 0301 	eor.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d009      	beq.n	80008f6 <RFID_runById+0xb6>
		RFID_handleTable[id].isDetected = true;
 80008e2:	79fa      	ldrb	r2, [r7, #7]
 80008e4:	4948      	ldr	r1, [pc, #288]	; (8000a08 <RFID_runById+0x1c8>)
 80008e6:	4613      	mov	r3, r2
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	1a9b      	subs	r3, r3, r2
 80008ec:	011b      	lsls	r3, r3, #4
 80008ee:	440b      	add	r3, r1
 80008f0:	335a      	adds	r3, #90	; 0x5a
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
	}
	RFID_handleTable[id].isPlaced = true;
 80008f6:	79fa      	ldrb	r2, [r7, #7]
 80008f8:	4943      	ldr	r1, [pc, #268]	; (8000a08 <RFID_runById+0x1c8>)
 80008fa:	4613      	mov	r3, r2
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	1a9b      	subs	r3, r3, r2
 8000900:	011b      	lsls	r3, r3, #4
 8000902:	440b      	add	r3, r1
 8000904:	3359      	adds	r3, #89	; 0x59
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
	if(!PN532_mifareclassic_AuthenticateBlock(&RFID_handleTable[id], uid, uidLength, RFID_PN532_DATA_BLOCK, 1, RFID_key)){
 800090a:	79fa      	ldrb	r2, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	1a9b      	subs	r3, r3, r2
 8000912:	011b      	lsls	r3, r3, #4
 8000914:	4a3c      	ldr	r2, [pc, #240]	; (8000a08 <RFID_runById+0x1c8>)
 8000916:	1898      	adds	r0, r3, r2
 8000918:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800091c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000920:	4b3a      	ldr	r3, [pc, #232]	; (8000a0c <RFID_runById+0x1cc>)
 8000922:	9301      	str	r3, [sp, #4]
 8000924:	2301      	movs	r3, #1
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	2308      	movs	r3, #8
 800092a:	f004 fa03 	bl	8004d34 <PN532_mifareclassic_AuthenticateBlock>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d10a      	bne.n	800094a <RFID_runById+0x10a>
		RFID_handleTable[id].rfid.code = RFID_ERROR_AUTHEN_FAILED;
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	4934      	ldr	r1, [pc, #208]	; (8000a08 <RFID_runById+0x1c8>)
 8000938:	4613      	mov	r3, r2
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	1a9b      	subs	r3, r3, r2
 800093e:	011b      	lsls	r3, r3, #4
 8000940:	440b      	add	r3, r1
 8000942:	336b      	adds	r3, #107	; 0x6b
 8000944:	2273      	movs	r2, #115	; 0x73
 8000946:	701a      	strb	r2, [r3, #0]
		return;
 8000948:	e059      	b.n	80009fe <RFID_runById+0x1be>
	}
	if(!PN532_mifareclassic_ReadDataBlock(&RFID_handleTable[id], RFID_PN532_DATA_BLOCK, readBlockData)){
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	4613      	mov	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	1a9b      	subs	r3, r3, r2
 8000952:	011b      	lsls	r3, r3, #4
 8000954:	4a2c      	ldr	r2, [pc, #176]	; (8000a08 <RFID_runById+0x1c8>)
 8000956:	4413      	add	r3, r2
 8000958:	f107 021c 	add.w	r2, r7, #28
 800095c:	2108      	movs	r1, #8
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fa6c 	bl	8004e3c <PN532_mifareclassic_ReadDataBlock>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10a      	bne.n	8000980 <RFID_runById+0x140>
		RFID_handleTable[id].rfid.code = RFID_ERROR_CANNOT_READ;
 800096a:	79fa      	ldrb	r2, [r7, #7]
 800096c:	4926      	ldr	r1, [pc, #152]	; (8000a08 <RFID_runById+0x1c8>)
 800096e:	4613      	mov	r3, r2
 8000970:	00db      	lsls	r3, r3, #3
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	011b      	lsls	r3, r3, #4
 8000976:	440b      	add	r3, r1
 8000978:	336b      	adds	r3, #107	; 0x6b
 800097a:	2275      	movs	r2, #117	; 0x75
 800097c:	701a      	strb	r2, [r3, #0]
		return;
 800097e:	e03e      	b.n	80009fe <RFID_runById+0x1be>
	}
	// Assign uuid to RFID
	RFID_t rfid;
	rfid.id_len = uidLength;
 8000980:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000984:	75fb      	strb	r3, [r7, #23]
	memcpy(rfid.id, uid, uidLength);
 8000986:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800098a:	461a      	mov	r2, r3
 800098c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	4618      	mov	r0, r3
 8000996:	f004 fd7f 	bl	8005498 <memcpy>

	// Parse RFID
	if(!RFID_parseFromBlockData(readBlockData, sizeof(readBlockData), &rfid)){
 800099a:	f107 0208 	add.w	r2, r7, #8
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	2110      	movs	r1, #16
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 f8ef 	bl	8000b88 <RFID_parseFromBlockData>
 80009aa:	4603      	mov	r3, r0
 80009ac:	f083 0301 	eor.w	r3, r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d00c      	beq.n	80009d0 <RFID_runById+0x190>
		rfid.code = RFID_ERROR_INVALID_FORMAT;
 80009b6:	2371      	movs	r3, #113	; 0x71
 80009b8:	763b      	strb	r3, [r7, #24]
		RFID_handleTable[id].error = RFID_ERROR_INVALID_FORMAT;
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	4912      	ldr	r1, [pc, #72]	; (8000a08 <RFID_runById+0x1c8>)
 80009be:	4613      	mov	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	1a9b      	subs	r3, r3, r2
 80009c4:	011b      	lsls	r3, r3, #4
 80009c6:	440b      	add	r3, r1
 80009c8:	3358      	adds	r3, #88	; 0x58
 80009ca:	2271      	movs	r2, #113	; 0x71
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	e001      	b.n	80009d4 <RFID_runById+0x194>
	}else {
		rfid.code = RFID_SUCCESS;
 80009d0:	2300      	movs	r3, #0
 80009d2:	763b      	strb	r3, [r7, #24]
	}
	RFID_handleTable[id].rfid = rfid;
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	490c      	ldr	r1, [pc, #48]	; (8000a08 <RFID_runById+0x1c8>)
 80009d8:	4613      	mov	r3, r2
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	1a9b      	subs	r3, r3, r2
 80009de:	011b      	lsls	r3, r3, #4
 80009e0:	440b      	add	r3, r1
 80009e2:	3358      	adds	r3, #88	; 0x58
 80009e4:	1cdd      	adds	r5, r3, #3
 80009e6:	f107 0408 	add.w	r4, r7, #8
 80009ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ec:	6028      	str	r0, [r5, #0]
 80009ee:	6069      	str	r1, [r5, #4]
 80009f0:	60aa      	str	r2, [r5, #8]
 80009f2:	60eb      	str	r3, [r5, #12]
 80009f4:	8823      	ldrh	r3, [r4, #0]
 80009f6:	78a2      	ldrb	r2, [r4, #2]
 80009f8:	822b      	strh	r3, [r5, #16]
 80009fa:	4613      	mov	r3, r2
 80009fc:	74ab      	strb	r3, [r5, #18]
}
 80009fe:	3738      	adds	r7, #56	; 0x38
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bdb0      	pop	{r4, r5, r7, pc}
 8000a04:	08005e60 	.word	0x08005e60
 8000a08:	20000050 	.word	0x20000050
 8000a0c:	080064a8 	.word	0x080064a8

08000a10 <SPI_CS1_write>:

static void SPI_CS1_write(const uint8_t *data, const uint32_t data_len){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
	SPI_transmit(SPI_CS_1, data, data_len, 1000);
 8000a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	6879      	ldr	r1, [r7, #4]
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 fa1e 	bl	8000e64 <SPI_transmit>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <SPI_CS1_writeThenRead>:
static void SPI_CS1_writeThenRead(uint8_t* tx_buf, uint32_t tx_len, uint8_t *rx_buf, uint32_t rx_len){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
 8000a3c:	603b      	str	r3, [r7, #0]
	SPI_transmitAndReceive(SPI_CS_1, tx_buf, tx_len, rx_buf, rx_len, 1000);
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	9301      	str	r3, [sp, #4]
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68ba      	ldr	r2, [r7, #8]
 8000a4c:	68f9      	ldr	r1, [r7, #12]
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fa28 	bl	8000ea4 <SPI_transmitAndReceive>
}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <SPI_CS2_write>:
static void SPI_CS2_write(const uint8_t *data, const uint32_t data_len){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
	SPI_transmit(SPI_CS_2, data, data_len, 1000);
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	683a      	ldr	r2, [r7, #0]
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f000 f9f8 	bl	8000e64 <SPI_transmit>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SPI_CS2_writeThenRead>:
static void SPI_CS2_writeThenRead(uint8_t* tx_buf, uint32_t tx_len, uint8_t *rx_buf, uint32_t rx_len){
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
 8000a88:	603b      	str	r3, [r7, #0]
	SPI_transmitAndReceive(SPI_CS_2, tx_buf, tx_len, rx_buf, rx_len, 1000);
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	9301      	str	r3, [sp, #4]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	68f9      	ldr	r1, [r7, #12]
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f000 fa02 	bl	8000ea4 <SPI_transmitAndReceive>
}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <SPI_CS3_write>:
static void SPI_CS3_write(const uint8_t *data, const uint32_t data_len){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	SPI_transmit(SPI_CS_3, data, data_len, 1000);
 8000ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab6:	683a      	ldr	r2, [r7, #0]
 8000ab8:	6879      	ldr	r1, [r7, #4]
 8000aba:	2002      	movs	r0, #2
 8000abc:	f000 f9d2 	bl	8000e64 <SPI_transmit>
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <SPI_CS3_writeThenRead>:
static void SPI_CS3_writeThenRead(uint8_t* tx_buf, uint32_t tx_len, uint8_t *rx_buf, uint32_t rx_len){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	603b      	str	r3, [r7, #0]
	SPI_transmitAndReceive(SPI_CS_3, tx_buf, tx_len, rx_buf, rx_len, 1000);
 8000ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	68f9      	ldr	r1, [r7, #12]
 8000ae6:	2002      	movs	r0, #2
 8000ae8:	f000 f9dc 	bl	8000ea4 <SPI_transmitAndReceive>
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <RFID_buildToBlockData>:
static void RFID_buildToBlockData(RFID_t *rfid, uint8_t *data, uint32_t data_len){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	uint8_t data_len_out = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	75fb      	strb	r3, [r7, #23]
	data[data_len_out++] = rfid->type;
 8000b04:	7dfb      	ldrb	r3, [r7, #23]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	75fa      	strb	r2, [r7, #23]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	4413      	add	r3, r2
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	7c52      	ldrb	r2, [r2, #17]
 8000b14:	701a      	strb	r2, [r3, #0]
	data[data_len_out++] = rfid->isUsed;
 8000b16:	7dfb      	ldrb	r3, [r7, #23]
 8000b18:	1c5a      	adds	r2, r3, #1
 8000b1a:	75fa      	strb	r2, [r7, #23]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	4413      	add	r3, r2
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	7c92      	ldrb	r2, [r2, #18]
 8000b26:	701a      	strb	r2, [r3, #0]

	uint16_t dataKey = RFID_getBlockDataKey(data, data_len_out);
 8000b28:	7dfb      	ldrb	r3, [r7, #23]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	68b8      	ldr	r0, [r7, #8]
 8000b2e:	f000 f86d 	bl	8000c0c <RFID_getBlockDataKey>
 8000b32:	4603      	mov	r3, r0
 8000b34:	82bb      	strh	r3, [r7, #20]
	data[data_len_out++] = (dataKey >> 8 & 0xFF);
 8000b36:	8abb      	ldrh	r3, [r7, #20]
 8000b38:	0a1b      	lsrs	r3, r3, #8
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	7dfb      	ldrb	r3, [r7, #23]
 8000b3e:	1c59      	adds	r1, r3, #1
 8000b40:	75f9      	strb	r1, [r7, #23]
 8000b42:	4619      	mov	r1, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	440b      	add	r3, r1
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	701a      	strb	r2, [r3, #0]
	data[data_len_out++] = dataKey & 0xFF;
 8000b4c:	7dfb      	ldrb	r3, [r7, #23]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	75fa      	strb	r2, [r7, #23]
 8000b52:	461a      	mov	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4413      	add	r3, r2
 8000b58:	8aba      	ldrh	r2, [r7, #20]
 8000b5a:	b2d2      	uxtb	r2, r2
 8000b5c:	701a      	strb	r2, [r3, #0]

	uint8_t idKey = RFID_getIdKey(rfid->id, rfid->id_len);
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	7bdb      	ldrb	r3, [r3, #15]
 8000b64:	4619      	mov	r1, r3
 8000b66:	4610      	mov	r0, r2
 8000b68:	f000 f87f 	bl	8000c6a <RFID_getIdKey>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	74fb      	strb	r3, [r7, #19]
	data[data_len_out++] = idKey;
 8000b70:	7dfb      	ldrb	r3, [r7, #23]
 8000b72:	1c5a      	adds	r2, r3, #1
 8000b74:	75fa      	strb	r2, [r7, #23]
 8000b76:	461a      	mov	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	7cfa      	ldrb	r2, [r7, #19]
 8000b7e:	701a      	strb	r2, [r3, #0]
}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <RFID_parseFromBlockData>:

static bool RFID_parseFromBlockData(uint8_t *data, uint32_t data_len, RFID_t *rfid){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
	if(data_len != 16){
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	2b10      	cmp	r3, #16
 8000b98:	d001      	beq.n	8000b9e <RFID_parseFromBlockData+0x16>
		return false;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e032      	b.n	8000c04 <RFID_parseFromBlockData+0x7c>
	}
	rfid->type = data[0];
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	745a      	strb	r2, [r3, #17]
	rfid->isUsed = data[1];
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	785a      	ldrb	r2, [r3, #1]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	749a      	strb	r2, [r3, #18]

	uint16_t dataKey = RFID_getBlockDataKey(data, 2);
 8000bae:	2102      	movs	r1, #2
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 f82b 	bl	8000c0c <RFID_getBlockDataKey>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	82fb      	strh	r3, [r7, #22]
	uint16_t expectedDataKey = ((uint16_t)data[2] << 8) | data[3];
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	b21a      	sxth	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	3303      	adds	r3, #3
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	b21b      	sxth	r3, r3
 8000bd0:	82bb      	strh	r3, [r7, #20]
	if(dataKey != expectedDataKey){
 8000bd2:	8afa      	ldrh	r2, [r7, #22]
 8000bd4:	8abb      	ldrh	r3, [r7, #20]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d001      	beq.n	8000bde <RFID_parseFromBlockData+0x56>
		return false;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e012      	b.n	8000c04 <RFID_parseFromBlockData+0x7c>
	}

	uint8_t idKey = data[4];
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	74fb      	strb	r3, [r7, #19]
	uint8_t expectedIdKey = RFID_getIdKey(rfid->id, rfid->id_len);
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7bdb      	ldrb	r3, [r3, #15]
 8000bea:	4619      	mov	r1, r3
 8000bec:	4610      	mov	r0, r2
 8000bee:	f000 f83c 	bl	8000c6a <RFID_getIdKey>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	74bb      	strb	r3, [r7, #18]

	if(idKey != expectedIdKey){
 8000bf6:	7cfa      	ldrb	r2, [r7, #19]
 8000bf8:	7cbb      	ldrb	r3, [r7, #18]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d001      	beq.n	8000c02 <RFID_parseFromBlockData+0x7a>
		return false;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <RFID_parseFromBlockData+0x7c>
	}
	return true;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <RFID_getBlockDataKey>:

static uint16_t RFID_getBlockDataKey(uint8_t *data, uint32_t data_size){
 8000c0c:	b480      	push	{r7}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	uint8_t xor = 0xFF;
 8000c16:	23ff      	movs	r3, #255	; 0xff
 8000c18:	75fb      	strb	r3, [r7, #23]
	uint8_t sum = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < data_size; ++i) {
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	e010      	b.n	8000c46 <RFID_getBlockDataKey+0x3a>
		xor ^= data[i];
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	7dfb      	ldrb	r3, [r7, #23]
 8000c2e:	4053      	eors	r3, r2
 8000c30:	75fb      	strb	r3, [r7, #23]
		sum += data[i];
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	4413      	add	r3, r2
 8000c38:	781a      	ldrb	r2, [r3, #0]
 8000c3a:	7dbb      	ldrb	r3, [r7, #22]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < data_size; ++i) {
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	3301      	adds	r3, #1
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	683a      	ldr	r2, [r7, #0]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d8ea      	bhi.n	8000c24 <RFID_getBlockDataKey+0x18>
	}
	uint16_t ret = ((uint16_t)xor << 8) | sum;
 8000c4e:	7dfb      	ldrb	r3, [r7, #23]
 8000c50:	021b      	lsls	r3, r3, #8
 8000c52:	b21a      	sxth	r2, r3
 8000c54:	7dbb      	ldrb	r3, [r7, #22]
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	81fb      	strh	r3, [r7, #14]
	return ret;
 8000c5e:	89fb      	ldrh	r3, [r7, #14]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	371c      	adds	r7, #28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <RFID_getIdKey>:


static uint8_t RFID_getIdKey(uint8_t *id, uint32_t id_len){
 8000c6a:	b480      	push	{r7}
 8000c6c:	b085      	sub	sp, #20
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	6039      	str	r1, [r7, #0]
	uint8_t id_key = 0xFF;
 8000c74:	23ff      	movs	r3, #255	; 0xff
 8000c76:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < id_len; ++i) {
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	e009      	b.n	8000c92 <RFID_getIdKey+0x28>
		id_key ^= id[i];
 8000c7e:	68bb      	ldr	r3, [r7, #8]
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	4413      	add	r3, r2
 8000c84:	781a      	ldrb	r2, [r3, #0]
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	4053      	eors	r3, r2
 8000c8a:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < id_len; ++i) {
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d8f1      	bhi.n	8000c7e <RFID_getIdKey+0x14>
	}
	return id_key;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <CLOCK_init>:
 */
#include "main.h"
#include "Hal/clock.h"

bool CLOCK_init(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b090      	sub	sp, #64	; 0x40
 8000caa:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cac:	f107 0318 	add.w	r3, r7, #24
 8000cb0:	2228      	movs	r2, #40	; 0x28
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f004 fbfd 	bl	80054b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000cc8:	230a      	movs	r3, #10
 8000cca:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd0:	2310      	movs	r3, #16
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000ce0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce6:	f107 0318 	add.w	r3, r7, #24
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fb90 	bl	8002410 <HAL_RCC_OscConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <CLOCK_init+0x54>
	{
		Error_Handler();
 8000cf6:	f000 fd70 	bl	80017da <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	607b      	str	r3, [r7, #4]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 fdfe 	bl	8002914 <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <CLOCK_init+0x7c>
	{
		Error_Handler();
 8000d1e:	f000 fd5c 	bl	80017da <Error_Handler>
	}
}
 8000d22:	bf00      	nop
 8000d24:	4618      	mov	r0, r3
 8000d26:	3740      	adds	r7, #64	; 0x40
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <CLOCK_getTick>:

uint32_t CLOCK_getTick(void){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	HAL_GetTick();
 8000d30:	f000 ffcc 	bl	8001ccc <HAL_GetTick>
}
 8000d34:	bf00      	nop
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <CLOCK_delayUs>:
void CLOCK_delayMs(uint32_t ms){
	HAL_Delay(ms);
}
void CLOCK_delayUs(uint32_t us){
 8000d3a:	b480      	push	{r7}
 8000d3c:	b085      	sub	sp, #20
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	uint32_t delayUs = us * 2;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
	while(delayUs--);
 8000d48:	bf00      	nop
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	1e5a      	subs	r2, r3, #1
 8000d4e:	60fa      	str	r2, [r7, #12]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d1fa      	bne.n	8000d4a <CLOCK_delayUs+0x10>
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <GPIO_init>:
#define SRC_HAL_GPIO_C_

#include "main.h"
#include "Hal/gpio.h"

bool GPIO_init(){
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <GPIO_init+0x74>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <GPIO_init+0x74>)
 8000d6c:	f043 0304 	orr.w	r3, r3, #4
 8000d70:	6193      	str	r3, [r2, #24]
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <GPIO_init+0x74>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0304 	and.w	r3, r3, #4
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <GPIO_init+0x74>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <GPIO_init+0x74>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6193      	str	r3, [r2, #24]
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <GPIO_init+0x74>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <GPIO_init+0x74>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <GPIO_init+0x74>)
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	6193      	str	r3, [r2, #24]
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <GPIO_init+0x74>)
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <GPIO_init+0x74>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <GPIO_init+0x74>)
 8000db4:	f043 0320 	orr.w	r3, r3, #32
 8000db8:	6193      	str	r3, [r2, #24]
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <GPIO_init+0x74>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f003 0320 	and.w	r3, r3, #32
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <SPI_init>:
};

static uint8_t SPI_txBuffer[SPI_TX_RX_BUFFER_MAX];
static uint8_t SPI_rxBuffer[SPI_TX_RX_BUFFER_MAX];

void SPI_init(void){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dde:	481f      	ldr	r0, [pc, #124]	; (8000e5c <SPI_init+0x84>)
 8000de0:	f001 ff26 	bl	8002c30 <HAL_SPI_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <SPI_init+0x16>
    {
        Error_Handler();
 8000dea:	f000 fcf6 	bl	80017da <Error_Handler>
    }
    for (size_t i = 0; i <= SPI_CS_1; i++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	e02b      	b.n	8000e4c <SPI_init+0x74>
    {
        HAL_GPIO_Init(SPI_csTable[i].port , &SPI_csTable[i].init_info);
 8000df4:	491a      	ldr	r1, [pc, #104]	; (8000e60 <SPI_init+0x88>)
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	440b      	add	r3, r1
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <SPI_init+0x88>)
 8000e10:	4413      	add	r3, r2
 8000e12:	3304      	adds	r3, #4
 8000e14:	4619      	mov	r1, r3
 8000e16:	f001 f947 	bl	80020a8 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(SPI_csTable[i].port, SPI_csTable[i].init_info.Pin, GPIO_PIN_SET);
 8000e1a:	4911      	ldr	r1, [pc, #68]	; (8000e60 <SPI_init+0x88>)
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	490d      	ldr	r1, [pc, #52]	; (8000e60 <SPI_init+0x88>)
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	4413      	add	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	440b      	add	r3, r1
 8000e38:	3304      	adds	r3, #4
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	2201      	movs	r2, #1
 8000e40:	4619      	mov	r1, r3
 8000e42:	f001 facc 	bl	80023de <HAL_GPIO_WritePin>
    for (size_t i = 0; i <= SPI_CS_1; i++)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0d0      	beq.n	8000df4 <SPI_init+0x1c>
    }
}
 8000e52:	bf00      	nop
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200001dc 	.word	0x200001dc
 8000e60:	200001a0 	.word	0x200001a0

08000e64 <SPI_transmit>:
void SPI_transmit(SPI_CS cs, uint8_t *txBuffer,  uint32_t size, uint32_t timeout){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	4603      	mov	r3, r0
 8000e72:	73fb      	strb	r3, [r7, #15]
	SPI_select(cs);
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f84c 	bl	8000f14 <SPI_select>
	HAL_Delay(1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f000 ff2f 	bl	8001ce0 <HAL_Delay>
	HAL_SPI_Transmit(&hspi1, txBuffer, size, timeout);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <SPI_transmit+0x3c>)
 8000e8c:	f001 ff54 	bl	8002d38 <HAL_SPI_Transmit>
	SPI_deselect(cs);
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f860 	bl	8000f58 <SPI_deselect>
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	200001dc 	.word	0x200001dc

08000ea4 <SPI_transmitAndReceive>:

void SPI_transmitAndReceive(SPI_CS cs, uint8_t *txBuffer, uint32_t txSize,  uint8_t *rxBuffer, uint32_t rxSize, uint32_t timeout){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]
	SPI_select(cs);
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f82c 	bl	8000f14 <SPI_select>
	HAL_Delay(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f000 ff0f 	bl	8001ce0 <HAL_Delay>
	memcpy(SPI_txBuffer, txBuffer, txSize);
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <SPI_transmitAndReceive+0x64>)
 8000ec8:	f004 fae6 	bl	8005498 <memcpy>
	HAL_SPI_TransmitReceive(&hspi1, SPI_txBuffer, SPI_rxBuffer, txSize + rxSize, timeout);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	4613      	mov	r3, r2
 8000ede:	4a0b      	ldr	r2, [pc, #44]	; (8000f0c <SPI_transmitAndReceive+0x68>)
 8000ee0:	4909      	ldr	r1, [pc, #36]	; (8000f08 <SPI_transmitAndReceive+0x64>)
 8000ee2:	480b      	ldr	r0, [pc, #44]	; (8000f10 <SPI_transmitAndReceive+0x6c>)
 8000ee4:	f002 f86b 	bl	8002fbe <HAL_SPI_TransmitReceive>
	memcpy(rxBuffer, &SPI_rxBuffer[txSize], rxSize);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	4a08      	ldr	r2, [pc, #32]	; (8000f0c <SPI_transmitAndReceive+0x68>)
 8000eec:	4413      	add	r3, r2
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6838      	ldr	r0, [r7, #0]
 8000ef4:	f004 fad0 	bl	8005498 <memcpy>
	SPI_deselect(cs);
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f82c 	bl	8000f58 <SPI_deselect>
}
 8000f00:	bf00      	nop
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000570 	.word	0x20000570
 8000f0c:	200005f0 	.word	0x200005f0
 8000f10:	200001dc 	.word	0x200001dc

08000f14 <SPI_select>:

void SPI_select(SPI_CS cs){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SPI_csTable[cs].port, SPI_csTable[cs].init_info.Pin, GPIO_PIN_RESET);
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <SPI_select+0x40>)
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	4908      	ldr	r1, [pc, #32]	; (8000f54 <SPI_select+0x40>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	2200      	movs	r2, #0
 8000f44:	4619      	mov	r1, r3
 8000f46:	f001 fa4a 	bl	80023de <HAL_GPIO_WritePin>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200001a0 	.word	0x200001a0

08000f58 <SPI_deselect>:

void SPI_deselect(SPI_CS cs){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SPI_csTable[cs].port, SPI_csTable[cs].init_info.Pin, GPIO_PIN_SET);
 8000f62:	79fa      	ldrb	r2, [r7, #7]
 8000f64:	490c      	ldr	r1, [pc, #48]	; (8000f98 <SPI_deselect+0x40>)
 8000f66:	4613      	mov	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4413      	add	r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	6818      	ldr	r0, [r3, #0]
 8000f72:	79fa      	ldrb	r2, [r7, #7]
 8000f74:	4908      	ldr	r1, [pc, #32]	; (8000f98 <SPI_deselect+0x40>)
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	3304      	adds	r3, #4
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	2201      	movs	r2, #1
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f001 fa28 	bl	80023de <HAL_GPIO_WritePin>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200001a0 	.word	0x200001a0

08000f9c <TIMER_init>:
		.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE
	}
};


bool TIMER_init(){
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa2:	f107 0308 	add.w	r3, r7, #8
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]

	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fb8:	4818      	ldr	r0, [pc, #96]	; (800101c <TIMER_init+0x80>)
 8000fba:	f002 fa57 	bl	800346c <HAL_TIM_Base_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <TIMER_init+0x2c>
	{
		Error_Handler();
 8000fc4:	f000 fc09 	bl	80017da <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fce:	f107 0308 	add.w	r3, r7, #8
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4811      	ldr	r0, [pc, #68]	; (800101c <TIMER_init+0x80>)
 8000fd6:	f002 fbf3 	bl	80037c0 <HAL_TIM_ConfigClockSource>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <TIMER_init+0x48>
	{
		Error_Handler();
 8000fe0:	f000 fbfb 	bl	80017da <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480a      	ldr	r0, [pc, #40]	; (800101c <TIMER_init+0x80>)
 8000ff2:	f002 fdc9 	bl	8003b88 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <TIMER_init+0x64>
	{
		Error_Handler();
 8000ffc:	f000 fbed 	bl	80017da <Error_Handler>
	}
	if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8001000:	4806      	ldr	r0, [pc, #24]	; (800101c <TIMER_init+0x80>)
 8001002:	f002 fa83 	bl	800350c <HAL_TIM_Base_Start_IT>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <TIMER_init+0x74>
	{
		Error_Handler();
 800100c:	f000 fbe5 	bl	80017da <Error_Handler>
	}
	return true;
 8001010:	2301      	movs	r3, #1
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000234 	.word	0x20000234

08001020 <TIMER_attach_intr_1ms>:

bool TIMER_attach_intr_1ms(void (*fn)(void)){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if(fn_table_len >= TIMER_FN_MAX_SIZE){
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <TIMER_attach_intr_1ms+0x34>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b09      	cmp	r3, #9
 800102e:	d901      	bls.n	8001034 <TIMER_attach_intr_1ms+0x14>
		return false;
 8001030:	2300      	movs	r3, #0
 8001032:	e009      	b.n	8001048 <TIMER_attach_intr_1ms+0x28>
	}
	fn_table[fn_table_len++] = fn;
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <TIMER_attach_intr_1ms+0x34>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1c5a      	adds	r2, r3, #1
 800103a:	4906      	ldr	r1, [pc, #24]	; (8001054 <TIMER_attach_intr_1ms+0x34>)
 800103c:	600a      	str	r2, [r1, #0]
 800103e:	4906      	ldr	r1, [pc, #24]	; (8001058 <TIMER_attach_intr_1ms+0x38>)
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return true;
 8001046:	2301      	movs	r3, #1
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000698 	.word	0x20000698
 8001058:	20000670 	.word	0x20000670

0800105c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim3.Instance){
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d10f      	bne.n	8001090 <HAL_TIM_PeriodElapsedCallback+0x34>
		for (int fn_idx = 0; fn_idx < fn_table_len; ++fn_idx) {
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e007      	b.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x2a>
			fn_table[fn_idx]();
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	4798      	blx	r3
		for (int fn_idx = 0; fn_idx < fn_table_len; ++fn_idx) {
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3301      	adds	r3, #1
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d3f2      	bcc.n	8001076 <HAL_TIM_PeriodElapsedCallback+0x1a>
		}
	}
}
 8001090:	bf00      	nop
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000234 	.word	0x20000234
 800109c:	20000670 	.word	0x20000670
 80010a0:	20000698 	.word	0x20000698

080010a4 <UART_init>:
			.buffer = &uart_buffer[UART_3]
		},
};


bool UART_init(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	bool success = true;
 80010aa:	2301      	movs	r3, #1
 80010ac:	71fb      	strb	r3, [r7, #7]
	// Init hal
//	success = (HAL_UART_Init(uart_table[UART_1].huart_p) == HAL_OK) && success;
	success = (HAL_UART_Init(uart_table[UART_2].huart_p) == HAL_OK) && success;
 80010ae:	4b30      	ldr	r3, [pc, #192]	; (8001170 <UART_init+0xcc>)
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fdd8 	bl	8003c68 <HAL_UART_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d104      	bne.n	80010c8 <UART_init+0x24>
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <UART_init+0x24>
 80010c4:	2301      	movs	r3, #1
 80010c6:	e000      	b.n	80010ca <UART_init+0x26>
 80010c8:	2300      	movs	r3, #0
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	71fb      	strb	r3, [r7, #7]
	success = (HAL_UART_Init(uart_table[UART_3].huart_p) == HAL_OK) && success;
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <UART_init+0xcc>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4618      	mov	r0, r3
 80010da:	f002 fdc5 	bl	8003c68 <HAL_UART_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d104      	bne.n	80010ee <UART_init+0x4a>
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <UART_init+0x4a>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <UART_init+0x4c>
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	71fb      	strb	r3, [r7, #7]
	// Init buffer
//	success = utils_buffer_init(uart_table[UART_1].buffer, sizeof(uint8_t)) && success;
	success = utils_buffer_init(uart_table[UART_2].buffer, sizeof(uint8_t)) && success;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <UART_init+0xcc>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f004 f891 	bl	8005228 <utils_buffer_init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d004      	beq.n	8001116 <UART_init+0x72>
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <UART_init+0x72>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <UART_init+0x74>
 8001116:	2300      	movs	r3, #0
 8001118:	71fb      	strb	r3, [r7, #7]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
	success = utils_buffer_init(uart_table[UART_3].buffer, sizeof(uint8_t)) && success;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <UART_init+0xcc>)
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	2101      	movs	r1, #1
 8001128:	4618      	mov	r0, r3
 800112a:	f004 f87d 	bl	8005228 <utils_buffer_init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <UART_init+0x9a>
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <UART_init+0x9a>
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <UART_init+0x9c>
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]

//	HAL_UART_Receive_IT(uart_table[UART_1].huart_p, (uint8_t*)&uart_table[UART_1].temp_data, 1);
	HAL_UART_Receive_IT(uart_table[UART_2].huart_p, (uint8_t*)&uart_table[UART_2].temp_data, 1);
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <UART_init+0xcc>)
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	2201      	movs	r2, #1
 8001150:	4908      	ldr	r1, [pc, #32]	; (8001174 <UART_init+0xd0>)
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fe5b 	bl	8003e0e <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(uart_table[UART_3].huart_p, (uint8_t*)&uart_table[UART_3].temp_data, 1);
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <UART_init+0xcc>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	2201      	movs	r2, #1
 800115e:	4906      	ldr	r1, [pc, #24]	; (8001178 <UART_init+0xd4>)
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fe54 	bl	8003e0e <HAL_UART_Receive_IT>
	return success;
 8001166:	79fb      	ldrb	r3, [r7, #7]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000354 	.word	0x20000354
 8001174:	20000370 	.word	0x20000370
 8001178:	20000380 	.word	0x20000380

0800117c <UART_send>:
bool UART_send(UART_id_t id, uint8_t *data , size_t len){
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(uart_table[id].huart_p, data, len, 100);
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	4a07      	ldr	r2, [pc, #28]	; (80011ac <UART_send+0x30>)
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4413      	add	r3, r2
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	b29a      	uxth	r2, r3
 8001198:	2364      	movs	r3, #100	; 0x64
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	f002 fdb4 	bl	8003d08 <HAL_UART_Transmit>
}
 80011a0:	bf00      	nop
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000354 	.word	0x20000354

080011b0 <UART_set_receive_callback>:
	uint16_t data;
	utils_buffer_pop(uart_table[id].buffer, &data);
	return data;
}

void UART_set_receive_callback(UART_id_t id, void (*callback)(uint8_t * data, uint32_t data_len)){
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
	uart_table[id].callback = callback;
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <UART_set_receive_callback+0x24>)
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	4413      	add	r3, r2
 80011c4:	3304      	adds	r3, #4
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	601a      	str	r2, [r3, #0]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000354 	.word	0x20000354

080011d8 <HAL_UART_RxCpltCallback>:
			}
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uart_table[UART_1].huart_p->Instance){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d116      	bne.n	800121c <HAL_UART_RxCpltCallback+0x44>
		utils_buffer_push(uart_table[UART_1].buffer, &uart_table[UART_1].temp_data);
 80011ee:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	492b      	ldr	r1, [pc, #172]	; (80012a0 <HAL_UART_RxCpltCallback+0xc8>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 f837 	bl	8005268 <utils_buffer_push>
		if(uart_table[UART_1].callback) uart_table[UART_1].callback(&uart_table[UART_1].temp_data, 1);
 80011fa:	4b28      	ldr	r3, [pc, #160]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <HAL_UART_RxCpltCallback+0x34>
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2101      	movs	r1, #1
 8001208:	4825      	ldr	r0, [pc, #148]	; (80012a0 <HAL_UART_RxCpltCallback+0xc8>)
 800120a:	4798      	blx	r3
		HAL_UART_Receive_IT(uart_table[UART_1].huart_p, &uart_table[UART_1].temp_data, 1);
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2201      	movs	r2, #1
 8001212:	4923      	ldr	r1, [pc, #140]	; (80012a0 <HAL_UART_RxCpltCallback+0xc8>)
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fdfa 	bl	8003e0e <HAL_UART_Receive_IT>
	}else if(huart->Instance == uart_table[UART_3].huart_p->Instance){
		utils_buffer_push(uart_table[UART_3].buffer, &uart_table[UART_3].temp_data);
		if(uart_table[UART_3].callback) uart_table[UART_3].callback(&uart_table[UART_3].temp_data, 1);
		HAL_UART_Receive_IT(uart_table[UART_3].huart_p, &uart_table[UART_3].temp_data, 1);
	}
}
 800121a:	e03a      	b.n	8001292 <HAL_UART_RxCpltCallback+0xba>
	}else if(huart->Instance == uart_table[UART_2].huart_p->Instance){
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d116      	bne.n	8001258 <HAL_UART_RxCpltCallback+0x80>
		utils_buffer_push(uart_table[UART_2].buffer, &uart_table[UART_2].temp_data);
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	491d      	ldr	r1, [pc, #116]	; (80012a4 <HAL_UART_RxCpltCallback+0xcc>)
 8001230:	4618      	mov	r0, r3
 8001232:	f004 f819 	bl	8005268 <utils_buffer_push>
		if(uart_table[UART_2].callback) uart_table[UART_2].callback(&uart_table[UART_2].temp_data, 1);
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d004      	beq.n	8001248 <HAL_UART_RxCpltCallback+0x70>
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	2101      	movs	r1, #1
 8001244:	4817      	ldr	r0, [pc, #92]	; (80012a4 <HAL_UART_RxCpltCallback+0xcc>)
 8001246:	4798      	blx	r3
		HAL_UART_Receive_IT(uart_table[UART_2].huart_p, &uart_table[UART_2].temp_data, 1);
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	2201      	movs	r2, #1
 800124e:	4915      	ldr	r1, [pc, #84]	; (80012a4 <HAL_UART_RxCpltCallback+0xcc>)
 8001250:	4618      	mov	r0, r3
 8001252:	f002 fddc 	bl	8003e0e <HAL_UART_Receive_IT>
}
 8001256:	e01c      	b.n	8001292 <HAL_UART_RxCpltCallback+0xba>
	}else if(huart->Instance == uart_table[UART_3].huart_p->Instance){
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d115      	bne.n	8001292 <HAL_UART_RxCpltCallback+0xba>
		utils_buffer_push(uart_table[UART_3].buffer, &uart_table[UART_3].temp_data);
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	490f      	ldr	r1, [pc, #60]	; (80012a8 <HAL_UART_RxCpltCallback+0xd0>)
 800126c:	4618      	mov	r0, r3
 800126e:	f003 fffb 	bl	8005268 <utils_buffer_push>
		if(uart_table[UART_3].callback) uart_table[UART_3].callback(&uart_table[UART_3].temp_data, 1);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 8001274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <HAL_UART_RxCpltCallback+0xac>
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	2101      	movs	r1, #1
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <HAL_UART_RxCpltCallback+0xd0>)
 8001282:	4798      	blx	r3
		HAL_UART_Receive_IT(uart_table[UART_3].huart_p, &uart_table[UART_3].temp_data, 1);
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_UART_RxCpltCallback+0xc4>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	2201      	movs	r2, #1
 800128a:	4907      	ldr	r1, [pc, #28]	; (80012a8 <HAL_UART_RxCpltCallback+0xd0>)
 800128c:	4618      	mov	r0, r3
 800128e:	f002 fdbe 	bl	8003e0e <HAL_UART_Receive_IT>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000354 	.word	0x20000354
 80012a0:	20000360 	.word	0x20000360
 80012a4:	20000370 	.word	0x20000370
 80012a8:	20000380 	.word	0x20000380

080012ac <RS485_init>:
static uint32_t RS485_rxBufferLen = 0;
static uint8_t RS485_MessagexBuffer[RS485_RX_BUFFER_MAX];
static uint32_t RS485_rxTimeCnt = 0;

void RS485_init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
	TIMER_attach_intr_1ms(RS485_interrupt1ms);
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <RS485_init+0x18>)
 80012b2:	f7ff feb5 	bl	8001020 <TIMER_attach_intr_1ms>
	UART_set_receive_callback(RS485_UART_ID, RS485_onUartCallback);
 80012b6:	4904      	ldr	r1, [pc, #16]	; (80012c8 <RS485_init+0x1c>)
 80012b8:	2002      	movs	r0, #2
 80012ba:	f7ff ff79 	bl	80011b0 <UART_set_receive_callback>
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	08001411 	.word	0x08001411
 80012c8:	08001739 	.word	0x08001739

080012cc <RS485_run>:

void RS485_run(void){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af02      	add	r7, sp, #8
	bool cleanUp;
	uint32_t cutIdx;
	if(RS485_parse(RS485_rxBuffer, RS485_rxBufferLen, &RS485_message, &cleanUp, &cutIdx))
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <RS485_run+0x88>)
 80012d4:	6819      	ldr	r1, [r3, #0]
 80012d6:	1dfa      	adds	r2, r7, #7
 80012d8:	463b      	mov	r3, r7
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	4613      	mov	r3, r2
 80012de:	4a1e      	ldr	r2, [pc, #120]	; (8001358 <RS485_run+0x8c>)
 80012e0:	481e      	ldr	r0, [pc, #120]	; (800135c <RS485_run+0x90>)
 80012e2:	f000 f8af 	bl	8001444 <RS485_parse>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d029      	beq.n	8001340 <RS485_run+0x74>
	{
		// Cut Buffer
		RS485_cutBuffer(RS485_rxBuffer, RS485_rxBufferLen, cutIdx, &RS485_rxBufferLen);
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <RS485_run+0x88>)
 80012ee:	6819      	ldr	r1, [r3, #0]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <RS485_run+0x88>)
 80012f4:	4819      	ldr	r0, [pc, #100]	; (800135c <RS485_run+0x90>)
 80012f6:	f000 f9f4 	bl	80016e2 <RS485_cutBuffer>

		RS485_rxQueue[RS485_rxQueueHead] = RS485_message;
 80012fa:	4b19      	ldr	r3, [pc, #100]	; (8001360 <RS485_run+0x94>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	4918      	ldr	r1, [pc, #96]	; (8001364 <RS485_run+0x98>)
 8001302:	4613      	mov	r3, r2
 8001304:	019b      	lsls	r3, r3, #6
 8001306:	4413      	add	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	440b      	add	r3, r1
 800130e:	4a12      	ldr	r2, [pc, #72]	; (8001358 <RS485_run+0x8c>)
 8001310:	4618      	mov	r0, r3
 8001312:	4611      	mov	r1, r2
 8001314:	f240 1305 	movw	r3, #261	; 0x105
 8001318:	461a      	mov	r2, r3
 800131a:	f004 f8bd 	bl	8005498 <memcpy>
		RS485_rxQueueHead = (RS485_rxQueueHead + 1) % RS485_RX_MESSAGE_QUEUE_MAX_SIZE;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <RS485_run+0x94>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	4b10      	ldr	r3, [pc, #64]	; (8001368 <RS485_run+0x9c>)
 8001326:	fb83 1302 	smull	r1, r3, r3, r2
 800132a:	1059      	asrs	r1, r3, #1
 800132c:	17d3      	asrs	r3, r2, #31
 800132e:	1ac9      	subs	r1, r1, r3
 8001330:	460b      	mov	r3, r1
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	440b      	add	r3, r1
 8001336:	1ad1      	subs	r1, r2, r3
 8001338:	b2ca      	uxtb	r2, r1
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <RS485_run+0x94>)
 800133c:	701a      	strb	r2, [r3, #0]
	}else if(cleanUp){
		RS485_rxBufferLen = 0;
	}
}
 800133e:	e005      	b.n	800134c <RS485_run+0x80>
	}else if(cleanUp){
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <RS485_run+0x80>
		RS485_rxBufferLen = 0;
 8001346:	4b03      	ldr	r3, [pc, #12]	; (8001354 <RS485_run+0x88>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200028f0 	.word	0x200028f0
 8001358:	20001ecc 	.word	0x20001ecc
 800135c:	200024f0 	.word	0x200024f0
 8001360:	200024ee 	.word	0x200024ee
 8001364:	20001fd4 	.word	0x20001fd4
 8001368:	66666667 	.word	0x66666667

0800136c <RS485_send>:

bool RS485_send(RS485_Message* message)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	size_t tx_len;
	RS485_serialize(message, RS485_MessagexBuffer, &tx_len);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	461a      	mov	r2, r3
 800137a:	4907      	ldr	r1, [pc, #28]	; (8001398 <RS485_send+0x2c>)
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f925 	bl	80015cc <RS485_serialize>
	return UART_send(RS485_UART_ID, RS485_MessagexBuffer, tx_len);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	461a      	mov	r2, r3
 8001386:	4904      	ldr	r1, [pc, #16]	; (8001398 <RS485_send+0x2c>)
 8001388:	2002      	movs	r0, #2
 800138a:	f7ff fef7 	bl	800117c <UART_send>
 800138e:	4603      	mov	r3, r0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	200028f4 	.word	0x200028f4

0800139c <RS485_receive>:

bool RS485_receive(RS485_Message* message)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	if(RS485_rxQueueHead != RS485_rxQueueTail)
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <RS485_receive+0x64>)
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <RS485_receive+0x68>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d021      	beq.n	80013f4 <RS485_receive+0x58>
	{
		memcpy(message, &RS485_rxQueue[RS485_rxQueueTail], sizeof(RS485_Message));
 80013b0:	4b14      	ldr	r3, [pc, #80]	; (8001404 <RS485_receive+0x68>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4613      	mov	r3, r2
 80013b8:	019b      	lsls	r3, r3, #6
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	4a11      	ldr	r2, [pc, #68]	; (8001408 <RS485_receive+0x6c>)
 80013c2:	4413      	add	r3, r2
 80013c4:	f240 1205 	movw	r2, #261	; 0x105
 80013c8:	4619      	mov	r1, r3
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f004 f864 	bl	8005498 <memcpy>
		RS485_rxQueueTail = (RS485_rxQueueTail + 1) % RS485_RX_MESSAGE_QUEUE_MAX_SIZE;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <RS485_receive+0x68>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <RS485_receive+0x70>)
 80013d8:	fb83 1302 	smull	r1, r3, r3, r2
 80013dc:	1059      	asrs	r1, r3, #1
 80013de:	17d3      	asrs	r3, r2, #31
 80013e0:	1ac9      	subs	r1, r1, r3
 80013e2:	460b      	mov	r3, r1
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	1ad1      	subs	r1, r2, r3
 80013ea:	b2ca      	uxtb	r2, r1
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <RS485_receive+0x68>)
 80013ee:	701a      	strb	r2, [r3, #0]
		return true;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <RS485_receive+0x5a>
	}
	return false;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200024ee 	.word	0x200024ee
 8001404:	200024ed 	.word	0x200024ed
 8001408:	20001fd4 	.word	0x20001fd4
 800140c:	66666667 	.word	0x66666667

08001410 <RS485_interrupt1ms>:

static void RS485_interrupt1ms(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
	if(RS485_rxTimeCnt > 0)
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <RS485_interrupt1ms+0x2c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00b      	beq.n	8001434 <RS485_interrupt1ms+0x24>
	{
		RS485_rxTimeCnt--;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <RS485_interrupt1ms+0x2c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3b01      	subs	r3, #1
 8001422:	4a06      	ldr	r2, [pc, #24]	; (800143c <RS485_interrupt1ms+0x2c>)
 8001424:	6013      	str	r3, [r2, #0]
		if(RS485_rxTimeCnt == 0)
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <RS485_interrupt1ms+0x2c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d102      	bne.n	8001434 <RS485_interrupt1ms+0x24>
		{
			RS485_rxBufferLen = 0;
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <RS485_interrupt1ms+0x30>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20002974 	.word	0x20002974
 8001440:	200028f0 	.word	0x200028f0

08001444 <RS485_parse>:

static bool RS485_parse(uint8_t* data, size_t data_len, RS485_Message* message, bool *cleanUp, uint32_t *cutIdx)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
 8001450:	603b      	str	r3, [r7, #0]
	bool foundStartByte = false;
 8001452:	2300      	movs	r3, #0
 8001454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t startByteIdx = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
	// Find Start Byte
	for (startByteIdx = 0; startByteIdx < data_len; ++startByteIdx) {
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
 8001460:	e00c      	b.n	800147c <RS485_parse+0x38>
		if(data[startByteIdx] == RS485_MESSAGE_START_BYTE){
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	4413      	add	r3, r2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b88      	cmp	r3, #136	; 0x88
 800146c:	d103      	bne.n	8001476 <RS485_parse+0x32>
			foundStartByte = true;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001474:	e006      	b.n	8001484 <RS485_parse+0x40>
	for (startByteIdx = 0; startByteIdx < data_len; ++startByteIdx) {
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	3301      	adds	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	6a3a      	ldr	r2, [r7, #32]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	429a      	cmp	r2, r3
 8001482:	d3ee      	bcc.n	8001462 <RS485_parse+0x1e>
		}
	}
	if(!foundStartByte){
 8001484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001488:	f083 0301 	eor.w	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <RS485_parse+0x52>
		return false;
 8001492:	2300      	movs	r3, #0
 8001494:	e086      	b.n	80015a4 <RS485_parse+0x160>
	}

	RS485_NetworkId networkId = data[startByteIdx + 1];
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	3301      	adds	r3, #1
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	4413      	add	r3, r2
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	77fb      	strb	r3, [r7, #31]
	RS485_NodeId srcNode = data[startByteIdx + 2];
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	3302      	adds	r3, #2
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	4413      	add	r3, r2
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	77bb      	strb	r3, [r7, #30]
	RS485_NodeId desNode = data[startByteIdx + 3];
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	3303      	adds	r3, #3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	777b      	strb	r3, [r7, #29]
	RS485_MessageId messageId = data[startByteIdx + 4];
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	3304      	adds	r3, #4
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	773b      	strb	r3, [r7, #28]
	RS485_ResultCode resultCode = data[startByteIdx + 5];
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	3305      	adds	r3, #5
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4413      	add	r3, r2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	76fb      	strb	r3, [r7, #27]

	uint8_t dataL = data[startByteIdx + 6];
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	3306      	adds	r3, #6
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4413      	add	r3, r2
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	76bb      	strb	r3, [r7, #26]
	if(data[startByteIdx + 9 + dataL] != RS485_MESSAGE_STOP_BYTE)
 80014de:	7eba      	ldrb	r2, [r7, #26]
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	4413      	add	r3, r2
 80014e4:	3309      	adds	r3, #9
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b89      	cmp	r3, #137	; 0x89
 80014ee:	d001      	beq.n	80014f4 <RS485_parse+0xb0>
	{
		return false;
 80014f0:	2300      	movs	r3, #0
 80014f2:	e057      	b.n	80015a4 <RS485_parse+0x160>
	}
	if(data_len < startByteIdx + 10 + dataL)
 80014f4:	7eba      	ldrb	r2, [r7, #26]
 80014f6:	6a3b      	ldr	r3, [r7, #32]
 80014f8:	4413      	add	r3, r2
 80014fa:	330a      	adds	r3, #10
 80014fc:	68ba      	ldr	r2, [r7, #8]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d201      	bcs.n	8001506 <RS485_parse+0xc2>
	{
		return false;
 8001502:	2300      	movs	r3, #0
 8001504:	e04e      	b.n	80015a4 <RS485_parse+0x160>
	}
	uint16_t expectedChecksum = RS485_calCheckSum(&data[startByteIdx + 7], dataL);
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	3307      	adds	r3, #7
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	4413      	add	r3, r2
 800150e:	7eba      	ldrb	r2, [r7, #26]
 8001510:	4611      	mov	r1, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f84a 	bl	80015ac <RS485_calCheckSum>
 8001518:	4603      	mov	r3, r0
 800151a:	833b      	strh	r3, [r7, #24]
	uint16_t checksum = ((uint16_t)data[startByteIdx + 7 + dataL] << 8) | data[startByteIdx + 8 + dataL];
 800151c:	7eba      	ldrb	r2, [r7, #26]
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	4413      	add	r3, r2
 8001522:	3307      	adds	r3, #7
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21a      	sxth	r2, r3
 800152e:	7eb9      	ldrb	r1, [r7, #26]
 8001530:	6a3b      	ldr	r3, [r7, #32]
 8001532:	440b      	add	r3, r1
 8001534:	3308      	adds	r3, #8
 8001536:	68f9      	ldr	r1, [r7, #12]
 8001538:	440b      	add	r3, r1
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21b      	sxth	r3, r3
 8001542:	82fb      	strh	r3, [r7, #22]
	if(expectedChecksum != checksum)
 8001544:	8b3a      	ldrh	r2, [r7, #24]
 8001546:	8afb      	ldrh	r3, [r7, #22]
 8001548:	429a      	cmp	r2, r3
 800154a:	d004      	beq.n	8001556 <RS485_parse+0x112>
	{
		* cleanUp = true;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
		return false;
 8001552:	2300      	movs	r3, #0
 8001554:	e026      	b.n	80015a4 <RS485_parse+0x160>
	}
	message->networkId = networkId;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	7ffa      	ldrb	r2, [r7, #31]
 800155a:	701a      	strb	r2, [r3, #0]
	message->srcNode = srcNode;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7fba      	ldrb	r2, [r7, #30]
 8001560:	705a      	strb	r2, [r3, #1]
	message->desNode = desNode;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	7f7a      	ldrb	r2, [r7, #29]
 8001566:	709a      	strb	r2, [r3, #2]
	message->messageId = messageId;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7f3a      	ldrb	r2, [r7, #28]
 800156c:	70da      	strb	r2, [r3, #3]
	message->resultCode = resultCode;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7efa      	ldrb	r2, [r7, #27]
 8001572:	711a      	strb	r2, [r3, #4]
	memcpy(message->data, &data[startByteIdx + 7], dataL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	1d98      	adds	r0, r3, #6
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	3307      	adds	r3, #7
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	7eba      	ldrb	r2, [r7, #26]
 8001582:	4619      	mov	r1, r3
 8001584:	f003 ff88 	bl	8005498 <memcpy>
	message->dataLen = dataL;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7eba      	ldrb	r2, [r7, #26]
 800158c:	715a      	strb	r2, [r3, #5]

	*cleanUp = false;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
	*cutIdx = startByteIdx + 10 + dataL;
 8001594:	7eba      	ldrb	r2, [r7, #26]
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	4413      	add	r3, r2
 800159a:	f103 020a 	add.w	r2, r3, #10
 800159e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a0:	601a      	str	r2, [r3, #0]
	return true;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3728      	adds	r7, #40	; 0x28
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <RS485_calCheckSum>:

static uint16_t RS485_calCheckSum(uint8_t* data, uint8_t data_len)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
	return CRC_calculate(data, data_len);
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	4619      	mov	r1, r3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7fe ffa5 	bl	800050c <CRC_calculate>
 80015c2:	4603      	mov	r3, r0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <RS485_serialize>:

static void RS485_serialize(RS485_Message* message, uint8_t* data, size_t* data_len)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
	uint8_t data_len_temp = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	77fb      	strb	r3, [r7, #31]
	data[data_len_temp++] = RS485_MESSAGE_START_BYTE;
 80015dc:	7ffb      	ldrb	r3, [r7, #31]
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	77fa      	strb	r2, [r7, #31]
 80015e2:	461a      	mov	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4413      	add	r3, r2
 80015e8:	2288      	movs	r2, #136	; 0x88
 80015ea:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = message->networkId;
 80015ec:	7ffb      	ldrb	r3, [r7, #31]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	77fa      	strb	r2, [r7, #31]
 80015f2:	461a      	mov	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4413      	add	r3, r2
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	7812      	ldrb	r2, [r2, #0]
 80015fc:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = message->srcNode;
 80015fe:	7ffb      	ldrb	r3, [r7, #31]
 8001600:	1c5a      	adds	r2, r3, #1
 8001602:	77fa      	strb	r2, [r7, #31]
 8001604:	461a      	mov	r2, r3
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	4413      	add	r3, r2
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	7852      	ldrb	r2, [r2, #1]
 800160e:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = message->desNode;
 8001610:	7ffb      	ldrb	r3, [r7, #31]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	77fa      	strb	r2, [r7, #31]
 8001616:	461a      	mov	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4413      	add	r3, r2
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	7892      	ldrb	r2, [r2, #2]
 8001620:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = message->messageId;
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	77fa      	strb	r2, [r7, #31]
 8001628:	461a      	mov	r2, r3
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	4413      	add	r3, r2
 800162e:	68fa      	ldr	r2, [r7, #12]
 8001630:	78d2      	ldrb	r2, [r2, #3]
 8001632:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = message->resultCode;
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	77fa      	strb	r2, [r7, #31]
 800163a:	461a      	mov	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	4413      	add	r3, r2
 8001640:	68fa      	ldr	r2, [r7, #12]
 8001642:	7912      	ldrb	r2, [r2, #4]
 8001644:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = message->dataLen;
 8001646:	7ffb      	ldrb	r3, [r7, #31]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	77fa      	strb	r2, [r7, #31]
 800164c:	461a      	mov	r2, r3
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	4413      	add	r3, r2
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	7952      	ldrb	r2, [r2, #5]
 8001656:	701a      	strb	r2, [r3, #0]
	for(int var = 0; var < message->dataLen; ++var)
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	e00e      	b.n	800167c <RS485_serialize+0xb0>
	{
		data[data_len_temp++] = message->data[var];
 800165e:	7ffb      	ldrb	r3, [r7, #31]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	77fa      	strb	r2, [r7, #31]
 8001664:	461a      	mov	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	4413      	add	r3, r2
 800166a:	68f9      	ldr	r1, [r7, #12]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	440a      	add	r2, r1
 8001670:	3206      	adds	r2, #6
 8001672:	7812      	ldrb	r2, [r2, #0]
 8001674:	701a      	strb	r2, [r3, #0]
	for(int var = 0; var < message->dataLen; ++var)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	3301      	adds	r3, #1
 800167a:	61bb      	str	r3, [r7, #24]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	795b      	ldrb	r3, [r3, #5]
 8001680:	461a      	mov	r2, r3
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	4293      	cmp	r3, r2
 8001686:	dbea      	blt.n	800165e <RS485_serialize+0x92>
	}
	uint16_t checksum = RS485_calCheckSum(message->data, message->dataLen);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1d9a      	adds	r2, r3, #6
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	795b      	ldrb	r3, [r3, #5]
 8001690:	4619      	mov	r1, r3
 8001692:	4610      	mov	r0, r2
 8001694:	f7ff ff8a 	bl	80015ac <RS485_calCheckSum>
 8001698:	4603      	mov	r3, r0
 800169a:	82fb      	strh	r3, [r7, #22]
	data[data_len_temp++] = (uint8_t)(checksum >> 8);
 800169c:	8afb      	ldrh	r3, [r7, #22]
 800169e:	0a1b      	lsrs	r3, r3, #8
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	7ffb      	ldrb	r3, [r7, #31]
 80016a4:	1c59      	adds	r1, r3, #1
 80016a6:	77f9      	strb	r1, [r7, #31]
 80016a8:	4619      	mov	r1, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	440b      	add	r3, r1
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = (uint8_t)(checksum & 0xFF);
 80016b2:	7ffb      	ldrb	r3, [r7, #31]
 80016b4:	1c5a      	adds	r2, r3, #1
 80016b6:	77fa      	strb	r2, [r7, #31]
 80016b8:	461a      	mov	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	4413      	add	r3, r2
 80016be:	8afa      	ldrh	r2, [r7, #22]
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	701a      	strb	r2, [r3, #0]
	data[data_len_temp++] = RS485_MESSAGE_STOP_BYTE;
 80016c4:	7ffb      	ldrb	r3, [r7, #31]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	77fa      	strb	r2, [r7, #31]
 80016ca:	461a      	mov	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4413      	add	r3, r2
 80016d0:	2289      	movs	r2, #137	; 0x89
 80016d2:	701a      	strb	r2, [r3, #0]
	*data_len = data_len_temp;
 80016d4:	7ffa      	ldrb	r2, [r7, #31]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	601a      	str	r2, [r3, #0]
}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <RS485_cutBuffer>:

static void RS485_cutBuffer(uint8_t *buffer, uint32_t bufferLenIn, uint32_t cutIdx, uint32_t *bufferLenOut){
 80016e2:	b480      	push	{r7}
 80016e4:	b087      	sub	sp, #28
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	603b      	str	r3, [r7, #0]
	if(cutIdx > bufferLenIn){
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d819      	bhi.n	800172c <RS485_cutBuffer+0x4a>
		return;
	}
	for (int var = cutIdx; var < bufferLenIn; ++var) {
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e00c      	b.n	8001718 <RS485_cutBuffer+0x36>
		buffer[var - cutIdx] = buffer[var];
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	441a      	add	r2, r3
 8001704:	6979      	ldr	r1, [r7, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	1acb      	subs	r3, r1, r3
 800170a:	68f9      	ldr	r1, [r7, #12]
 800170c:	440b      	add	r3, r1
 800170e:	7812      	ldrb	r2, [r2, #0]
 8001710:	701a      	strb	r2, [r3, #0]
	for (int var = cutIdx; var < bufferLenIn; ++var) {
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8ee      	bhi.n	80016fe <RS485_cutBuffer+0x1c>
	}
	*bufferLenOut = bufferLenIn - cutIdx;
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	1ad2      	subs	r2, r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	e000      	b.n	800172e <RS485_cutBuffer+0x4c>
		return;
 800172c:	bf00      	nop
}
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
	...

08001738 <RS485_onUartCallback>:
static void RS485_onUartCallback(uint8_t *dataP, uint32_t dataLen){
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
	RS485_rxTimeCnt = RS485_RX_TIMEOUT;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <RS485_onUartCallback+0x58>)
 8001744:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001748:	601a      	str	r2, [r3, #0]
	if(RS485_rxBufferLen + dataLen > RS485_RX_BUFFER_MAX)
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <RS485_onUartCallback+0x5c>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	4413      	add	r3, r2
 8001752:	2b80      	cmp	r3, #128	; 0x80
 8001754:	d909      	bls.n	800176a <RS485_onUartCallback+0x32>
	{
		utils_log_error("[PROTOCOL] Rx buffer overflow, cleaning up\r\n");
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <RS485_onUartCallback+0x60>)
 8001758:	22b9      	movs	r2, #185	; 0xb9
 800175a:	4910      	ldr	r1, [pc, #64]	; (800179c <RS485_onUartCallback+0x64>)
 800175c:	2002      	movs	r0, #2
 800175e:	f003 fdfd 	bl	800535c <utils_log_log>
		RS485_rxBufferLen = 0;
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <RS485_onUartCallback+0x5c>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
		return;
 8001768:	e00e      	b.n	8001788 <RS485_onUartCallback+0x50>
	}
	memcpy(&RS485_rxBuffer[RS485_rxBufferLen], dataP, dataLen);
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <RS485_onUartCallback+0x5c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <RS485_onUartCallback+0x68>)
 8001770:	4413      	add	r3, r2
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	4618      	mov	r0, r3
 8001778:	f003 fe8e 	bl	8005498 <memcpy>
	RS485_rxBufferLen += dataLen;
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <RS485_onUartCallback+0x5c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4413      	add	r3, r2
 8001784:	4a03      	ldr	r2, [pc, #12]	; (8001794 <RS485_onUartCallback+0x5c>)
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20002974 	.word	0x20002974
 8001794:	200028f0 	.word	0x200028f0
 8001798:	08005e68 	.word	0x08005e68
 800179c:	08005e98 	.word	0x08005e98
 80017a0:	200024f0 	.word	0x200024f0

080017a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017a8:	f000 fa38 	bl	8001c1c <HAL_Init>

  /* USER CODE BEGIN Init */
  CLOCK_init();
 80017ac:	f7ff fa7b 	bl	8000ca6 <CLOCK_init>
  GPIO_init();
 80017b0:	f7ff fad6 	bl	8000d60 <GPIO_init>
  TIMER_init();
 80017b4:	f7ff fbf2 	bl	8000f9c <TIMER_init>
  UART_init();
 80017b8:	f7ff fc74 	bl	80010a4 <UART_init>
  SPI_init();
 80017bc:	f7ff fb0c 	bl	8000dd8 <SPI_init>
//  WATCHDOG_init();

  DIPSWITCH_init();
 80017c0:	f7fe fed2 	bl	8000568 <DIPSWITCH_init>
//  LOADCELL_init();
  RFID_init();
 80017c4:	f7fe ff86 	bl	80006d4 <RFID_init>
  RS485_init();
 80017c8:	f7ff fd70 	bl	80012ac <RS485_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  WATCHDOG_refresh();
	  COMMANDHANDLER_run();
 80017cc:	f7fe fcbe 	bl	800014c <COMMANDHANDLER_run>
	  RS485_run();
 80017d0:	f7ff fd7c 	bl	80012cc <RS485_run>
	  RFID_run();
 80017d4:	f7fe ff9c 	bl	8000710 <RFID_run>
	  COMMANDHANDLER_run();
 80017d8:	e7f8      	b.n	80017cc <main+0x28>

080017da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017de:	b672      	cpsid	i
}
 80017e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e2:	e7fe      	b.n	80017e2 <Error_Handler+0x8>

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_MspInit+0x40>)
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <HAL_MspInit+0x40>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6193      	str	r3, [r2, #24]
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_MspInit+0x40>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_MspInit+0x40>)
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_MspInit+0x40>)
 8001808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180c:	61d3      	str	r3, [r2, #28]
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_MspInit+0x40>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <HAL_SPI_MspInit+0x88>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d12f      	bne.n	80018a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001848:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <HAL_SPI_MspInit+0x8c>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_SPI_MspInit+0x8c>)
 800184e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001852:	6193      	str	r3, [r2, #24]
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_SPI_MspInit+0x8c>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001860:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <HAL_SPI_MspInit+0x8c>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a13      	ldr	r2, [pc, #76]	; (80018b4 <HAL_SPI_MspInit+0x8c>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_SPI_MspInit+0x8c>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001878:	23a0      	movs	r3, #160	; 0xa0
 800187a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 0310 	add.w	r3, r7, #16
 8001888:	4619      	mov	r1, r3
 800188a:	480b      	ldr	r0, [pc, #44]	; (80018b8 <HAL_SPI_MspInit+0x90>)
 800188c:	f000 fc0c 	bl	80020a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001890:	2340      	movs	r3, #64	; 0x40
 8001892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	4619      	mov	r1, r3
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_SPI_MspInit+0x90>)
 80018a4:	f000 fc00 	bl	80020a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40013000 	.word	0x40013000
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40010800 	.word	0x40010800

080018bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <HAL_TIM_Base_MspInit+0x44>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d113      	bne.n	80018f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ce:	4b0d      	ldr	r3, [pc, #52]	; (8001904 <HAL_TIM_Base_MspInit+0x48>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a0c      	ldr	r2, [pc, #48]	; (8001904 <HAL_TIM_Base_MspInit+0x48>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	61d3      	str	r3, [r2, #28]
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_TIM_Base_MspInit+0x48>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2100      	movs	r1, #0
 80018ea:	201d      	movs	r0, #29
 80018ec:	f000 faf3 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018f0:	201d      	movs	r0, #29
 80018f2:	f000 fb0c 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40000400 	.word	0x40000400
 8001904:	40021000 	.word	0x40021000

08001908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08c      	sub	sp, #48	; 0x30
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a5f      	ldr	r2, [pc, #380]	; (8001aa0 <HAL_UART_MspInit+0x198>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d13a      	bne.n	800199e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001928:	4b5e      	ldr	r3, [pc, #376]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	4a5d      	ldr	r2, [pc, #372]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 800192e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001932:	6193      	str	r3, [r2, #24]
 8001934:	4b5b      	ldr	r3, [pc, #364]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001940:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	4a57      	ldr	r2, [pc, #348]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6193      	str	r3, [r2, #24]
 800194c:	4b55      	ldr	r3, [pc, #340]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001958:	f44f 7300 	mov.w	r3, #512	; 0x200
 800195c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	4619      	mov	r1, r3
 800196c:	484e      	ldr	r0, [pc, #312]	; (8001aa8 <HAL_UART_MspInit+0x1a0>)
 800196e:	f000 fb9b 	bl	80020a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	4619      	mov	r1, r3
 8001986:	4848      	ldr	r0, [pc, #288]	; (8001aa8 <HAL_UART_MspInit+0x1a0>)
 8001988:	f000 fb8e 	bl	80020a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2100      	movs	r1, #0
 8001990:	2025      	movs	r0, #37	; 0x25
 8001992:	f000 faa0 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001996:	2025      	movs	r0, #37	; 0x25
 8001998:	f000 fab9 	bl	8001f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800199c:	e07c      	b.n	8001a98 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a42      	ldr	r2, [pc, #264]	; (8001aac <HAL_UART_MspInit+0x1a4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d138      	bne.n	8001a1a <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019a8:	4b3e      	ldr	r3, [pc, #248]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	4a3d      	ldr	r2, [pc, #244]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 80019ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b2:	61d3      	str	r3, [r2, #28]
 80019b4:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	4b38      	ldr	r3, [pc, #224]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a37      	ldr	r2, [pc, #220]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019d8:	2304      	movs	r3, #4
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	4619      	mov	r1, r3
 80019ea:	482f      	ldr	r0, [pc, #188]	; (8001aa8 <HAL_UART_MspInit+0x1a0>)
 80019ec:	f000 fb5c 	bl	80020a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019f0:	2308      	movs	r3, #8
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	4619      	mov	r1, r3
 8001a02:	4829      	ldr	r0, [pc, #164]	; (8001aa8 <HAL_UART_MspInit+0x1a0>)
 8001a04:	f000 fb50 	bl	80020a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2026      	movs	r0, #38	; 0x26
 8001a0e:	f000 fa62 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a12:	2026      	movs	r0, #38	; 0x26
 8001a14:	f000 fa7b 	bl	8001f0e <HAL_NVIC_EnableIRQ>
}
 8001a18:	e03e      	b.n	8001a98 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <HAL_UART_MspInit+0x1a8>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d139      	bne.n	8001a98 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a24:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 8001a2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2e:	61d3      	str	r3, [r2, #28]
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_UART_MspInit+0x19c>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	4619      	mov	r1, r3
 8001a68:	4812      	ldr	r0, [pc, #72]	; (8001ab4 <HAL_UART_MspInit+0x1ac>)
 8001a6a:	f000 fb1d 	bl	80020a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	4619      	mov	r1, r3
 8001a82:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <HAL_UART_MspInit+0x1ac>)
 8001a84:	f000 fb10 	bl	80020a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	2027      	movs	r0, #39	; 0x27
 8001a8e:	f000 fa22 	bl	8001ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a92:	2027      	movs	r0, #39	; 0x27
 8001a94:	f000 fa3b 	bl	8001f0e <HAL_NVIC_EnableIRQ>
}
 8001a98:	bf00      	nop
 8001a9a:	3730      	adds	r7, #48	; 0x30
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40013800 	.word	0x40013800
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010800 	.word	0x40010800
 8001aac:	40004400 	.word	0x40004400
 8001ab0:	40004800 	.word	0x40004800
 8001ab4:	40010c00 	.word	0x40010c00

08001ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001abc:	e7fe      	b.n	8001abc <NMI_Handler+0x4>

08001abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac2:	e7fe      	b.n	8001ac2 <HardFault_Handler+0x4>

08001ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac8:	e7fe      	b.n	8001ac8 <MemManage_Handler+0x4>

08001aca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <BusFault_Handler+0x4>

08001ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <UsageFault_Handler+0x4>

08001ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afe:	f000 f8d3 	bl	8001ca8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <TIM3_IRQHandler+0x10>)
 8001b0e:	f001 fd4f 	bl	80035b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000234 	.word	0x20000234

08001b1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <USART1_IRQHandler+0x10>)
 8001b22:	f002 f999 	bl	8003e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000027c 	.word	0x2000027c

08001b30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <USART2_IRQHandler+0x10>)
 8001b36:	f002 f98f 	bl	8003e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200002c4 	.word	0x200002c4

08001b44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <USART3_IRQHandler+0x10>)
 8001b4a:	f002 f985 	bl	8003e58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000030c 	.word	0x2000030c

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f003 fc4c 	bl	8005424 <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20005000 	.word	0x20005000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	20002978 	.word	0x20002978
 8001bc0:	20003190 	.word	0x20003190

08001bc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd0:	f7ff fff8 	bl	8001bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bd4:	480b      	ldr	r0, [pc, #44]	; (8001c04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bd6:	490c      	ldr	r1, [pc, #48]	; (8001c08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bd8:	4a0c      	ldr	r2, [pc, #48]	; (8001c0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a09      	ldr	r2, [pc, #36]	; (8001c10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bec:	4c09      	ldr	r4, [pc, #36]	; (8001c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f003 fc19 	bl	8005430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bfe:	f7ff fdd1 	bl	80017a4 <main>
  bx lr
 8001c02:	4770      	bx	lr
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	20000434 	.word	0x20000434
  ldr r2, =_sidata
 8001c0c:	08006528 	.word	0x08006528
  ldr r2, =_sbss
 8001c10:	20000434 	.word	0x20000434
  ldr r4, =_ebss
 8001c14:	20003190 	.word	0x20003190

08001c18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC1_2_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <HAL_Init+0x28>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_Init+0x28>)
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f000 f947 	bl	8001ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c32:	200f      	movs	r0, #15
 8001c34:	f000 f808 	bl	8001c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c38:	f7ff fdd4 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40022000 	.word	0x40022000

08001c48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_InitTick+0x54>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_InitTick+0x58>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f95f 	bl	8001f2a <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e00e      	b.n	8001c94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0f      	cmp	r3, #15
 8001c7a:	d80a      	bhi.n	8001c92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c84:	f000 f927 	bl	8001ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <HAL_InitTick+0x5c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e000      	b.n	8001c94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000384 	.word	0x20000384
 8001ca0:	2000038c 	.word	0x2000038c
 8001ca4:	20000388 	.word	0x20000388

08001ca8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_IncTick+0x1c>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a03      	ldr	r2, [pc, #12]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	2000038c 	.word	0x2000038c
 8001cc8:	2000297c 	.word	0x2000297c

08001ccc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	; (8001cdc <HAL_GetTick+0x10>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	2000297c 	.word	0x2000297c

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff fff0 	bl	8001ccc <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf8:	d005      	beq.n	8001d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <HAL_Delay+0x44>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d06:	bf00      	nop
 8001d08:	f7ff ffe0 	bl	8001ccc <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d8f7      	bhi.n	8001d08 <HAL_Delay+0x28>
  {
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000038c 	.word	0x2000038c

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	; (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	; (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4906      	ldr	r1, [pc, #24]	; (8001dc0 <__NVIC_EnableIRQ+0x34>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	; (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
         );
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e8c:	d301      	bcc.n	8001e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00f      	b.n	8001eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e92:	4a0a      	ldr	r2, [pc, #40]	; (8001ebc <SysTick_Config+0x40>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e9a:	210f      	movs	r1, #15
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea0:	f7ff ff90 	bl	8001dc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <SysTick_Config+0x40>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <SysTick_Config+0x40>)
 8001eac:	2207      	movs	r2, #7
 8001eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	e000e010 	.word	0xe000e010

08001ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ff2d 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b086      	sub	sp, #24
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ee8:	f7ff ff42 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	6978      	ldr	r0, [r7, #20]
 8001ef4:	f7ff ff90 	bl	8001e18 <NVIC_EncodePriority>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	4611      	mov	r1, r2
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff5f 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff35 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffa2 	bl	8001e7c <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d008      	beq.n	8001f6c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e020      	b.n	8001fae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 020e 	bic.w	r2, r2, #14
 8001f7a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f94:	2101      	movs	r1, #1
 8001f96:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d005      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e051      	b.n	8002080 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 020e 	bic.w	r2, r2, #14
 8001fea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0201 	bic.w	r2, r2, #1
 8001ffa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a22      	ldr	r2, [pc, #136]	; (800208c <HAL_DMA_Abort_IT+0xd4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d029      	beq.n	800205a <HAL_DMA_Abort_IT+0xa2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a21      	ldr	r2, [pc, #132]	; (8002090 <HAL_DMA_Abort_IT+0xd8>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d022      	beq.n	8002056 <HAL_DMA_Abort_IT+0x9e>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_DMA_Abort_IT+0xdc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d01a      	beq.n	8002050 <HAL_DMA_Abort_IT+0x98>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <HAL_DMA_Abort_IT+0xe0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d012      	beq.n	800204a <HAL_DMA_Abort_IT+0x92>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1c      	ldr	r2, [pc, #112]	; (800209c <HAL_DMA_Abort_IT+0xe4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00a      	beq.n	8002044 <HAL_DMA_Abort_IT+0x8c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_DMA_Abort_IT+0xe8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d102      	bne.n	800203e <HAL_DMA_Abort_IT+0x86>
 8002038:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800203c:	e00e      	b.n	800205c <HAL_DMA_Abort_IT+0xa4>
 800203e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002042:	e00b      	b.n	800205c <HAL_DMA_Abort_IT+0xa4>
 8002044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002048:	e008      	b.n	800205c <HAL_DMA_Abort_IT+0xa4>
 800204a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204e:	e005      	b.n	800205c <HAL_DMA_Abort_IT+0xa4>
 8002050:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002054:	e002      	b.n	800205c <HAL_DMA_Abort_IT+0xa4>
 8002056:	2310      	movs	r3, #16
 8002058:	e000      	b.n	800205c <HAL_DMA_Abort_IT+0xa4>
 800205a:	2301      	movs	r3, #1
 800205c:	4a11      	ldr	r2, [pc, #68]	; (80020a4 <HAL_DMA_Abort_IT+0xec>)
 800205e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
    } 
  }
  return status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40020008 	.word	0x40020008
 8002090:	4002001c 	.word	0x4002001c
 8002094:	40020030 	.word	0x40020030
 8002098:	40020044 	.word	0x40020044
 800209c:	40020058 	.word	0x40020058
 80020a0:	4002006c 	.word	0x4002006c
 80020a4:	40020000 	.word	0x40020000

080020a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b08b      	sub	sp, #44	; 0x2c
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ba:	e169      	b.n	8002390 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020bc:	2201      	movs	r2, #1
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f040 8158 	bne.w	800238a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4a9a      	ldr	r2, [pc, #616]	; (8002348 <HAL_GPIO_Init+0x2a0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d05e      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 80020e4:	4a98      	ldr	r2, [pc, #608]	; (8002348 <HAL_GPIO_Init+0x2a0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d875      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 80020ea:	4a98      	ldr	r2, [pc, #608]	; (800234c <HAL_GPIO_Init+0x2a4>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d058      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 80020f0:	4a96      	ldr	r2, [pc, #600]	; (800234c <HAL_GPIO_Init+0x2a4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d86f      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 80020f6:	4a96      	ldr	r2, [pc, #600]	; (8002350 <HAL_GPIO_Init+0x2a8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d052      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 80020fc:	4a94      	ldr	r2, [pc, #592]	; (8002350 <HAL_GPIO_Init+0x2a8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d869      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 8002102:	4a94      	ldr	r2, [pc, #592]	; (8002354 <HAL_GPIO_Init+0x2ac>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04c      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 8002108:	4a92      	ldr	r2, [pc, #584]	; (8002354 <HAL_GPIO_Init+0x2ac>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d863      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 800210e:	4a92      	ldr	r2, [pc, #584]	; (8002358 <HAL_GPIO_Init+0x2b0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d046      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
 8002114:	4a90      	ldr	r2, [pc, #576]	; (8002358 <HAL_GPIO_Init+0x2b0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d85d      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 800211a:	2b12      	cmp	r3, #18
 800211c:	d82a      	bhi.n	8002174 <HAL_GPIO_Init+0xcc>
 800211e:	2b12      	cmp	r3, #18
 8002120:	d859      	bhi.n	80021d6 <HAL_GPIO_Init+0x12e>
 8002122:	a201      	add	r2, pc, #4	; (adr r2, 8002128 <HAL_GPIO_Init+0x80>)
 8002124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002128:	080021a3 	.word	0x080021a3
 800212c:	0800217d 	.word	0x0800217d
 8002130:	0800218f 	.word	0x0800218f
 8002134:	080021d1 	.word	0x080021d1
 8002138:	080021d7 	.word	0x080021d7
 800213c:	080021d7 	.word	0x080021d7
 8002140:	080021d7 	.word	0x080021d7
 8002144:	080021d7 	.word	0x080021d7
 8002148:	080021d7 	.word	0x080021d7
 800214c:	080021d7 	.word	0x080021d7
 8002150:	080021d7 	.word	0x080021d7
 8002154:	080021d7 	.word	0x080021d7
 8002158:	080021d7 	.word	0x080021d7
 800215c:	080021d7 	.word	0x080021d7
 8002160:	080021d7 	.word	0x080021d7
 8002164:	080021d7 	.word	0x080021d7
 8002168:	080021d7 	.word	0x080021d7
 800216c:	08002185 	.word	0x08002185
 8002170:	08002199 	.word	0x08002199
 8002174:	4a79      	ldr	r2, [pc, #484]	; (800235c <HAL_GPIO_Init+0x2b4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800217a:	e02c      	b.n	80021d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	623b      	str	r3, [r7, #32]
          break;
 8002182:	e029      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	3304      	adds	r3, #4
 800218a:	623b      	str	r3, [r7, #32]
          break;
 800218c:	e024      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	3308      	adds	r3, #8
 8002194:	623b      	str	r3, [r7, #32]
          break;
 8002196:	e01f      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	330c      	adds	r3, #12
 800219e:	623b      	str	r3, [r7, #32]
          break;
 80021a0:	e01a      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021aa:	2304      	movs	r3, #4
 80021ac:	623b      	str	r3, [r7, #32]
          break;
 80021ae:	e013      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d105      	bne.n	80021c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021b8:	2308      	movs	r3, #8
 80021ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69fa      	ldr	r2, [r7, #28]
 80021c0:	611a      	str	r2, [r3, #16]
          break;
 80021c2:	e009      	b.n	80021d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c4:	2308      	movs	r3, #8
 80021c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	615a      	str	r2, [r3, #20]
          break;
 80021ce:	e003      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021d0:	2300      	movs	r3, #0
 80021d2:	623b      	str	r3, [r7, #32]
          break;
 80021d4:	e000      	b.n	80021d8 <HAL_GPIO_Init+0x130>
          break;
 80021d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	2bff      	cmp	r3, #255	; 0xff
 80021dc:	d801      	bhi.n	80021e2 <HAL_GPIO_Init+0x13a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	e001      	b.n	80021e6 <HAL_GPIO_Init+0x13e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3304      	adds	r3, #4
 80021e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2bff      	cmp	r3, #255	; 0xff
 80021ec:	d802      	bhi.n	80021f4 <HAL_GPIO_Init+0x14c>
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	e002      	b.n	80021fa <HAL_GPIO_Init+0x152>
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	3b08      	subs	r3, #8
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	210f      	movs	r1, #15
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	401a      	ands	r2, r3
 800220c:	6a39      	ldr	r1, [r7, #32]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	431a      	orrs	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 80b1 	beq.w	800238a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002228:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <HAL_GPIO_Init+0x2b8>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	4a4c      	ldr	r2, [pc, #304]	; (8002360 <HAL_GPIO_Init+0x2b8>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6193      	str	r3, [r2, #24]
 8002234:	4b4a      	ldr	r3, [pc, #296]	; (8002360 <HAL_GPIO_Init+0x2b8>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002240:	4a48      	ldr	r2, [pc, #288]	; (8002364 <HAL_GPIO_Init+0x2bc>)
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	220f      	movs	r2, #15
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4013      	ands	r3, r2
 8002262:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a40      	ldr	r2, [pc, #256]	; (8002368 <HAL_GPIO_Init+0x2c0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d013      	beq.n	8002294 <HAL_GPIO_Init+0x1ec>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a3f      	ldr	r2, [pc, #252]	; (800236c <HAL_GPIO_Init+0x2c4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00d      	beq.n	8002290 <HAL_GPIO_Init+0x1e8>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a3e      	ldr	r2, [pc, #248]	; (8002370 <HAL_GPIO_Init+0x2c8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d007      	beq.n	800228c <HAL_GPIO_Init+0x1e4>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3d      	ldr	r2, [pc, #244]	; (8002374 <HAL_GPIO_Init+0x2cc>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d101      	bne.n	8002288 <HAL_GPIO_Init+0x1e0>
 8002284:	2303      	movs	r3, #3
 8002286:	e006      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 8002288:	2304      	movs	r3, #4
 800228a:	e004      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 800228c:	2302      	movs	r3, #2
 800228e:	e002      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 8002290:	2301      	movs	r3, #1
 8002292:	e000      	b.n	8002296 <HAL_GPIO_Init+0x1ee>
 8002294:	2300      	movs	r3, #0
 8002296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002298:	f002 0203 	and.w	r2, r2, #3
 800229c:	0092      	lsls	r2, r2, #2
 800229e:	4093      	lsls	r3, r2
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022a6:	492f      	ldr	r1, [pc, #188]	; (8002364 <HAL_GPIO_Init+0x2bc>)
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	3302      	adds	r3, #2
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d006      	beq.n	80022ce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	492c      	ldr	r1, [pc, #176]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	608b      	str	r3, [r1, #8]
 80022cc:	e006      	b.n	80022dc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	4928      	ldr	r1, [pc, #160]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022e8:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	4922      	ldr	r1, [pc, #136]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60cb      	str	r3, [r1, #12]
 80022f4:	e006      	b.n	8002304 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022f6:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	491e      	ldr	r1, [pc, #120]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002300:	4013      	ands	r3, r2
 8002302:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d006      	beq.n	800231e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	4918      	ldr	r1, [pc, #96]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800231e:	4b16      	ldr	r3, [pc, #88]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	43db      	mvns	r3, r3
 8002326:	4914      	ldr	r1, [pc, #80]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 8002328:	4013      	ands	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d021      	beq.n	800237c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002338:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	490e      	ldr	r1, [pc, #56]	; (8002378 <HAL_GPIO_Init+0x2d0>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	4313      	orrs	r3, r2
 8002342:	600b      	str	r3, [r1, #0]
 8002344:	e021      	b.n	800238a <HAL_GPIO_Init+0x2e2>
 8002346:	bf00      	nop
 8002348:	10320000 	.word	0x10320000
 800234c:	10310000 	.word	0x10310000
 8002350:	10220000 	.word	0x10220000
 8002354:	10210000 	.word	0x10210000
 8002358:	10120000 	.word	0x10120000
 800235c:	10110000 	.word	0x10110000
 8002360:	40021000 	.word	0x40021000
 8002364:	40010000 	.word	0x40010000
 8002368:	40010800 	.word	0x40010800
 800236c:	40010c00 	.word	0x40010c00
 8002370:	40011000 	.word	0x40011000
 8002374:	40011400 	.word	0x40011400
 8002378:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800237c:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_GPIO_Init+0x304>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	43db      	mvns	r3, r3
 8002384:	4909      	ldr	r1, [pc, #36]	; (80023ac <HAL_GPIO_Init+0x304>)
 8002386:	4013      	ands	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	3301      	adds	r3, #1
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	f47f ae8e 	bne.w	80020bc <HAL_GPIO_Init+0x14>
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	372c      	adds	r7, #44	; 0x2c
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40010400 	.word	0x40010400

080023b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	887b      	ldrh	r3, [r7, #2]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
 80023cc:	e001      	b.n	80023d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	bc80      	pop	{r7}
 80023dc:	4770      	bx	lr

080023de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	807b      	strh	r3, [r7, #2]
 80023ea:	4613      	mov	r3, r2
 80023ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ee:	787b      	ldrb	r3, [r7, #1]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023f4:	887a      	ldrh	r2, [r7, #2]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023fa:	e003      	b.n	8002404 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023fc:	887b      	ldrh	r3, [r7, #2]
 80023fe:	041a      	lsls	r2, r3, #16
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	611a      	str	r2, [r3, #16]
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
	...

08002410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e272      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8087 	beq.w	800253e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002430:	4b92      	ldr	r3, [pc, #584]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b04      	cmp	r3, #4
 800243a:	d00c      	beq.n	8002456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800243c:	4b8f      	ldr	r3, [pc, #572]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d112      	bne.n	800246e <HAL_RCC_OscConfig+0x5e>
 8002448:	4b8c      	ldr	r3, [pc, #560]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002454:	d10b      	bne.n	800246e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002456:	4b89      	ldr	r3, [pc, #548]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d06c      	beq.n	800253c <HAL_RCC_OscConfig+0x12c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d168      	bne.n	800253c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e24c      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002476:	d106      	bne.n	8002486 <HAL_RCC_OscConfig+0x76>
 8002478:	4b80      	ldr	r3, [pc, #512]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a7f      	ldr	r2, [pc, #508]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800247e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002482:	6013      	str	r3, [r2, #0]
 8002484:	e02e      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x98>
 800248e:	4b7b      	ldr	r3, [pc, #492]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7a      	ldr	r2, [pc, #488]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	4b78      	ldr	r3, [pc, #480]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a77      	ldr	r2, [pc, #476]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e01d      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0xbc>
 80024b2:	4b72      	ldr	r3, [pc, #456]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a71      	ldr	r2, [pc, #452]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b6f      	ldr	r3, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a6e      	ldr	r2, [pc, #440]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0xd4>
 80024cc:	4b6b      	ldr	r3, [pc, #428]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a6a      	ldr	r2, [pc, #424]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4b68      	ldr	r3, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a67      	ldr	r2, [pc, #412]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80024de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7ff fbee 	bl	8001ccc <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f4:	f7ff fbea 	bl	8001ccc <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b64      	cmp	r3, #100	; 0x64
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e200      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002506:	4b5d      	ldr	r3, [pc, #372]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0xe4>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7ff fbda 	bl	8001ccc <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800251c:	f7ff fbd6 	bl	8001ccc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1ec      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252e:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x10c>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d063      	beq.n	8002612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800254a:	4b4c      	ldr	r3, [pc, #304]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002556:	4b49      	ldr	r3, [pc, #292]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 030c 	and.w	r3, r3, #12
 800255e:	2b08      	cmp	r3, #8
 8002560:	d11c      	bne.n	800259c <HAL_RCC_OscConfig+0x18c>
 8002562:	4b46      	ldr	r3, [pc, #280]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d116      	bne.n	800259c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e1c0      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b3d      	ldr	r3, [pc, #244]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4939      	ldr	r1, [pc, #228]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259a:	e03a      	b.n	8002612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025a6:	2201      	movs	r2, #1
 80025a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025aa:	f7ff fb8f 	bl	8001ccc <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff fb8b 	bl	8001ccc <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1a1      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c4:	4b2d      	ldr	r3, [pc, #180]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b2a      	ldr	r3, [pc, #168]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4927      	ldr	r1, [pc, #156]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	600b      	str	r3, [r1, #0]
 80025e4:	e015      	b.n	8002612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_RCC_OscConfig+0x270>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7ff fb6e 	bl	8001ccc <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7ff fb6a 	bl	8001ccc <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e180      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002606:	4b1d      	ldr	r3, [pc, #116]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1f0      	bne.n	80025f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03a      	beq.n	8002694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d019      	beq.n	800265a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <HAL_RCC_OscConfig+0x274>)
 8002628:	2201      	movs	r2, #1
 800262a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262c:	f7ff fb4e 	bl	8001ccc <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff fb4a 	bl	8001ccc <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e160      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002646:	4b0d      	ldr	r3, [pc, #52]	; (800267c <HAL_RCC_OscConfig+0x26c>)
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002652:	2001      	movs	r0, #1
 8002654:	f000 face 	bl	8002bf4 <RCC_Delay>
 8002658:	e01c      	b.n	8002694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_RCC_OscConfig+0x274>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002660:	f7ff fb34 	bl	8001ccc <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002666:	e00f      	b.n	8002688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002668:	f7ff fb30 	bl	8001ccc <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d908      	bls.n	8002688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e146      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
 8002680:	42420000 	.word	0x42420000
 8002684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	4b92      	ldr	r3, [pc, #584]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1e9      	bne.n	8002668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80a6 	beq.w	80027ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b8b      	ldr	r3, [pc, #556]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b88      	ldr	r3, [pc, #544]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	4a87      	ldr	r2, [pc, #540]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	61d3      	str	r3, [r2, #28]
 80026be:	4b85      	ldr	r3, [pc, #532]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b82      	ldr	r3, [pc, #520]	; (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d118      	bne.n	800270c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026da:	4b7f      	ldr	r3, [pc, #508]	; (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a7e      	ldr	r2, [pc, #504]	; (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e6:	f7ff faf1 	bl	8001ccc <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7ff faed 	bl	8001ccc <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b64      	cmp	r3, #100	; 0x64
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e103      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	4b75      	ldr	r3, [pc, #468]	; (80028d8 <HAL_RCC_OscConfig+0x4c8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x312>
 8002714:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4a6e      	ldr	r2, [pc, #440]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6213      	str	r3, [r2, #32]
 8002720:	e02d      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x334>
 800272a:	4b6a      	ldr	r3, [pc, #424]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	4a69      	ldr	r2, [pc, #420]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	6213      	str	r3, [r2, #32]
 8002736:	4b67      	ldr	r3, [pc, #412]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	4a66      	ldr	r2, [pc, #408]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	f023 0304 	bic.w	r3, r3, #4
 8002740:	6213      	str	r3, [r2, #32]
 8002742:	e01c      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d10c      	bne.n	8002766 <HAL_RCC_OscConfig+0x356>
 800274c:	4b61      	ldr	r3, [pc, #388]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4a60      	ldr	r2, [pc, #384]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	f043 0304 	orr.w	r3, r3, #4
 8002756:	6213      	str	r3, [r2, #32]
 8002758:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	4a5d      	ldr	r2, [pc, #372]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	6213      	str	r3, [r2, #32]
 8002764:	e00b      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
 8002766:	4b5b      	ldr	r3, [pc, #364]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a5a      	ldr	r2, [pc, #360]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	f023 0301 	bic.w	r3, r3, #1
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	4b58      	ldr	r3, [pc, #352]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	4a57      	ldr	r2, [pc, #348]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002778:	f023 0304 	bic.w	r3, r3, #4
 800277c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d015      	beq.n	80027b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002786:	f7ff faa1 	bl	8001ccc <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	e00a      	b.n	80027a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800278e:	f7ff fa9d 	bl	8001ccc <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	f241 3288 	movw	r2, #5000	; 0x1388
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0b1      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0ee      	beq.n	800278e <HAL_RCC_OscConfig+0x37e>
 80027b0:	e014      	b.n	80027dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b2:	f7ff fa8b 	bl	8001ccc <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7ff fa87 	bl	8001ccc <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e09b      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d0:	4b40      	ldr	r3, [pc, #256]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1ee      	bne.n	80027ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e2:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	4a3b      	ldr	r2, [pc, #236]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 8087 	beq.w	8002906 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f8:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d061      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	2b02      	cmp	r3, #2
 800280a:	d146      	bne.n	800289a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280c:	4b33      	ldr	r3, [pc, #204]	; (80028dc <HAL_RCC_OscConfig+0x4cc>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7ff fa5b 	bl	8001ccc <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002818:	e008      	b.n	800282c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281a:	f7ff fa57 	bl	8001ccc <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d901      	bls.n	800282c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e06d      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282c:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f0      	bne.n	800281a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d108      	bne.n	8002854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002842:	4b24      	ldr	r3, [pc, #144]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	4921      	ldr	r1, [pc, #132]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002854:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a19      	ldr	r1, [r3, #32]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	430b      	orrs	r3, r1
 8002866:	491b      	ldr	r1, [pc, #108]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_RCC_OscConfig+0x4cc>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002872:	f7ff fa2b 	bl	8001ccc <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7ff fa27 	bl	8001ccc <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e03d      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800288c:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x46a>
 8002898:	e035      	b.n	8002906 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <HAL_RCC_OscConfig+0x4cc>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7ff fa14 	bl	8001ccc <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7ff fa10 	bl	8001ccc <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e026      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x498>
 80028c6:	e01e      	b.n	8002906 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e019      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40007000 	.word	0x40007000
 80028dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_RCC_OscConfig+0x500>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	429a      	cmp	r2, r3
 8002900:	d001      	beq.n	8002906 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000

08002914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0d0      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002928:	4b6a      	ldr	r3, [pc, #424]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d910      	bls.n	8002958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b67      	ldr	r3, [pc, #412]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	4965      	ldr	r1, [pc, #404]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0b8      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002970:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a58      	ldr	r2, [pc, #352]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800297a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002988:	4b53      	ldr	r3, [pc, #332]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	4a52      	ldr	r2, [pc, #328]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002994:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	494d      	ldr	r1, [pc, #308]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d040      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d107      	bne.n	80029ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d115      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e07f      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d107      	bne.n	80029e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d109      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e073      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029e2:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06b      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4936      	ldr	r1, [pc, #216]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a04:	f7ff f962 	bl	8001ccc <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7ff f95e 	bl	8001ccc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e053      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d210      	bcs.n	8002a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4922      	ldr	r1, [pc, #136]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e032      	b.n	8002aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4916      	ldr	r1, [pc, #88]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d009      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	490e      	ldr	r1, [pc, #56]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002aa2:	f000 f821 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	091b      	lsrs	r3, r3, #4
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	490a      	ldr	r1, [pc, #40]	; (8002adc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	5ccb      	ldrb	r3, [r1, r3]
 8002ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002abe:	4b09      	ldr	r3, [pc, #36]	; (8002ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f8c0 	bl	8001c48 <HAL_InitTick>

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	080064b0 	.word	0x080064b0
 8002ae0:	20000384 	.word	0x20000384
 8002ae4:	20000388 	.word	0x20000388

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	2300      	movs	r3, #0
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b02:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d002      	beq.n	8002b18 <HAL_RCC_GetSysClockFreq+0x30>
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d003      	beq.n	8002b1e <HAL_RCC_GetSysClockFreq+0x36>
 8002b16:	e027      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b1a:	613b      	str	r3, [r7, #16]
      break;
 8002b1c:	e027      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	0c9b      	lsrs	r3, r3, #18
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	4a17      	ldr	r2, [pc, #92]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b28:	5cd3      	ldrb	r3, [r2, r3]
 8002b2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d010      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b36:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	0c5b      	lsrs	r3, r3, #17
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b42:	5cd3      	ldrb	r3, [r2, r3]
 8002b44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a0d      	ldr	r2, [pc, #52]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4a:	fb03 f202 	mul.w	r2, r3, r2
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	e004      	b.n	8002b62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b5c:	fb02 f303 	mul.w	r3, r2, r3
 8002b60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	613b      	str	r3, [r7, #16]
      break;
 8002b66:	e002      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b6a:	613b      	str	r3, [r7, #16]
      break;
 8002b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6e:	693b      	ldr	r3, [r7, #16]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	371c      	adds	r7, #28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	007a1200 	.word	0x007a1200
 8002b84:	080064c8 	.word	0x080064c8
 8002b88:	080064d8 	.word	0x080064d8
 8002b8c:	003d0900 	.word	0x003d0900

08002b90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b94:	4b02      	ldr	r3, [pc, #8]	; (8002ba0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	20000384 	.word	0x20000384

08002ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ba8:	f7ff fff2 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4903      	ldr	r1, [pc, #12]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	080064c0 	.word	0x080064c0

08002bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bd0:	f7ff ffde 	bl	8002b90 <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0adb      	lsrs	r3, r3, #11
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	080064c0 	.word	0x080064c0

08002bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <RCC_Delay+0x34>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <RCC_Delay+0x38>)
 8002c02:	fba2 2303 	umull	r2, r3, r2, r3
 8002c06:	0a5b      	lsrs	r3, r3, #9
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	fb02 f303 	mul.w	r3, r2, r3
 8002c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c10:	bf00      	nop
  }
  while (Delay --);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1e5a      	subs	r2, r3, #1
 8002c16:	60fa      	str	r2, [r7, #12]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d1f9      	bne.n	8002c10 <RCC_Delay+0x1c>
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr
 8002c28:	20000384 	.word	0x20000384
 8002c2c:	10624dd3 	.word	0x10624dd3

08002c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e076      	b.n	8002d30 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d108      	bne.n	8002c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c52:	d009      	beq.n	8002c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	61da      	str	r2, [r3, #28]
 8002c5a:	e005      	b.n	8002c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fe fdd0 	bl	8001828 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	431a      	orrs	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cec:	ea42 0103 	orr.w	r1, r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	0c1a      	lsrs	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f002 0204 	and.w	r2, r2, #4
 8002d0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_SPI_Transmit+0x22>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e12d      	b.n	8002fb6 <HAL_SPI_Transmit+0x27e>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d62:	f7fe ffb3 	bl	8001ccc <HAL_GetTick>
 8002d66:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d002      	beq.n	8002d7e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d7c:	e116      	b.n	8002fac <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_SPI_Transmit+0x52>
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d102      	bne.n	8002d90 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d8e:	e10d      	b.n	8002fac <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2203      	movs	r2, #3
 8002d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	88fa      	ldrh	r2, [r7, #6]
 8002da8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dd6:	d10f      	bne.n	8002df8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002df6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d007      	beq.n	8002e16 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e1e:	d14f      	bne.n	8002ec0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_SPI_Transmit+0xf6>
 8002e28:	8afb      	ldrh	r3, [r7, #22]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d142      	bne.n	8002eb4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	881a      	ldrh	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3e:	1c9a      	adds	r2, r3, #2
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e52:	e02f      	b.n	8002eb4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d112      	bne.n	8002e88 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	881a      	ldrh	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	1c9a      	adds	r2, r3, #2
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e86:	e015      	b.n	8002eb4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e88:	f7fe ff20 	bl	8001ccc <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d803      	bhi.n	8002ea0 <HAL_SPI_Transmit+0x168>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e9e:	d102      	bne.n	8002ea6 <HAL_SPI_Transmit+0x16e>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002eb2:	e07b      	b.n	8002fac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1ca      	bne.n	8002e54 <HAL_SPI_Transmit+0x11c>
 8002ebe:	e050      	b.n	8002f62 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d002      	beq.n	8002ece <HAL_SPI_Transmit+0x196>
 8002ec8:	8afb      	ldrh	r3, [r7, #22]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d144      	bne.n	8002f58 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	3b01      	subs	r3, #1
 8002eee:	b29a      	uxth	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ef4:	e030      	b.n	8002f58 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d113      	bne.n	8002f2c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	330c      	adds	r3, #12
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f2a:	e015      	b.n	8002f58 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f2c:	f7fe fece 	bl	8001ccc <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d803      	bhi.n	8002f44 <HAL_SPI_Transmit+0x20c>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f42:	d102      	bne.n	8002f4a <HAL_SPI_Transmit+0x212>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002f56:	e029      	b.n	8002fac <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1c9      	bne.n	8002ef6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	6839      	ldr	r1, [r7, #0]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fa62 	bl	8003430 <SPI_EndRxTxTransaction>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10a      	bne.n	8002f96 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	77fb      	strb	r3, [r7, #31]
 8002fa2:	e003      	b.n	8002fac <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b08c      	sub	sp, #48	; 0x30
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	60f8      	str	r0, [r7, #12]
 8002fc6:	60b9      	str	r1, [r7, #8]
 8002fc8:	607a      	str	r2, [r7, #4]
 8002fca:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_SPI_TransmitReceive+0x26>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e198      	b.n	8003316 <HAL_SPI_TransmitReceive+0x358>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fec:	f7fe fe6e 	bl	8001ccc <HAL_GetTick>
 8002ff0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003002:	887b      	ldrh	r3, [r7, #2]
 8003004:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003006:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800300a:	2b01      	cmp	r3, #1
 800300c:	d00f      	beq.n	800302e <HAL_SPI_TransmitReceive+0x70>
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003014:	d107      	bne.n	8003026 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d103      	bne.n	8003026 <HAL_SPI_TransmitReceive+0x68>
 800301e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003022:	2b04      	cmp	r3, #4
 8003024:	d003      	beq.n	800302e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003026:	2302      	movs	r3, #2
 8003028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800302c:	e16d      	b.n	800330a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x82>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d002      	beq.n	8003040 <HAL_SPI_TransmitReceive+0x82>
 800303a:	887b      	ldrh	r3, [r7, #2]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003046:	e160      	b.n	800330a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b04      	cmp	r3, #4
 8003052:	d003      	beq.n	800305c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2205      	movs	r2, #5
 8003058:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	887a      	ldrh	r2, [r7, #2]
 800306c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	887a      	ldrh	r2, [r7, #2]
 8003072:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	887a      	ldrh	r2, [r7, #2]
 800307e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	887a      	ldrh	r2, [r7, #2]
 8003084:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d007      	beq.n	80030b0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b8:	d17c      	bne.n	80031b4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x10a>
 80030c2:	8b7b      	ldrh	r3, [r7, #26]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d16a      	bne.n	800319e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	881a      	ldrh	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	1c9a      	adds	r2, r3, #2
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ec:	e057      	b.n	800319e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d11b      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x176>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003100:	b29b      	uxth	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_SPI_TransmitReceive+0x176>
 8003106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d113      	bne.n	8003134 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311c:	1c9a      	adds	r2, r3, #2
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d119      	bne.n	8003176 <HAL_SPI_TransmitReceive+0x1b8>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d014      	beq.n	8003176 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	b292      	uxth	r2, r2
 8003158:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	1c9a      	adds	r2, r3, #2
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003172:	2301      	movs	r3, #1
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003176:	f7fe fda9 	bl	8001ccc <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003182:	429a      	cmp	r2, r3
 8003184:	d80b      	bhi.n	800319e <HAL_SPI_TransmitReceive+0x1e0>
 8003186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800318c:	d007      	beq.n	800319e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800319c:	e0b5      	b.n	800330a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1a2      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x130>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d19d      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x130>
 80031b2:	e080      	b.n	80032b6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x204>
 80031bc:	8b7b      	ldrh	r3, [r7, #26]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d16f      	bne.n	80032a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e8:	e05b      	b.n	80032a2 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d11c      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x274>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d017      	beq.n	8003232 <HAL_SPI_TransmitReceive+0x274>
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	2b01      	cmp	r3, #1
 8003206:	d114      	bne.n	8003232 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	7812      	ldrb	r2, [r2, #0]
 8003214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b01      	cmp	r3, #1
 800323e:	d119      	bne.n	8003274 <HAL_SPI_TransmitReceive+0x2b6>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d014      	beq.n	8003274 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68da      	ldr	r2, [r3, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003270:	2301      	movs	r3, #1
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003274:	f7fe fd2a 	bl	8001ccc <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003280:	429a      	cmp	r2, r3
 8003282:	d803      	bhi.n	800328c <HAL_SPI_TransmitReceive+0x2ce>
 8003284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800328a:	d102      	bne.n	8003292 <HAL_SPI_TransmitReceive+0x2d4>
 800328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328e:	2b00      	cmp	r3, #0
 8003290:	d107      	bne.n	80032a2 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80032a0:	e033      	b.n	800330a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d19e      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x22c>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d199      	bne.n	80031ea <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f8b8 	bl	8003430 <SPI_EndRxTxTransaction>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d006      	beq.n	80032d4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80032d2:	e01a      	b.n	800330a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003300:	e003      	b.n	800330a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003312:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003316:	4618      	mov	r0, r3
 8003318:	3730      	adds	r7, #48	; 0x30
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
	...

08003320 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003330:	f7fe fccc 	bl	8001ccc <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4413      	add	r3, r2
 800333e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003340:	f7fe fcc4 	bl	8001ccc <HAL_GetTick>
 8003344:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003346:	4b39      	ldr	r3, [pc, #228]	; (800342c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	015b      	lsls	r3, r3, #5
 800334c:	0d1b      	lsrs	r3, r3, #20
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003356:	e054      	b.n	8003402 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800335e:	d050      	beq.n	8003402 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003360:	f7fe fcb4 	bl	8001ccc <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	429a      	cmp	r2, r3
 800336e:	d902      	bls.n	8003376 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d13d      	bne.n	80033f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003384:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800338e:	d111      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003398:	d004      	beq.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a2:	d107      	bne.n	80033b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033bc:	d10f      	bne.n	80033de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e017      	b.n	8003422 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	3b01      	subs	r3, #1
 8003400:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4013      	ands	r3, r2
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	429a      	cmp	r2, r3
 8003410:	bf0c      	ite	eq
 8003412:	2301      	moveq	r3, #1
 8003414:	2300      	movne	r3, #0
 8003416:	b2db      	uxtb	r3, r3
 8003418:	461a      	mov	r2, r3
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	429a      	cmp	r2, r3
 800341e:	d19b      	bne.n	8003358 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000384 	.word	0x20000384

08003430 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2200      	movs	r2, #0
 8003444:	2180      	movs	r1, #128	; 0x80
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f7ff ff6a 	bl	8003320 <SPI_WaitFlagStateUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	f043 0220 	orr.w	r2, r3, #32
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e000      	b.n	8003464 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e041      	b.n	8003502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fe fa12 	bl	80018bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3304      	adds	r3, #4
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f000 fa74 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d001      	beq.n	8003524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e03a      	b.n	800359a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <HAL_TIM_Base_Start_IT+0x98>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00e      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x58>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354e:	d009      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x58>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a14      	ldr	r2, [pc, #80]	; (80035a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x58>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a13      	ldr	r2, [pc, #76]	; (80035ac <HAL_TIM_Base_Start_IT+0xa0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d111      	bne.n	8003588 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b06      	cmp	r3, #6
 8003574:	d010      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003586:	e007      	b.n	8003598 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40000400 	.word	0x40000400
 80035ac:	40000800 	.word	0x40000800

080035b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d122      	bne.n	800360c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d11b      	bne.n	800360c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0202 	mvn.w	r2, #2
 80035dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f9b4 	bl	8003960 <HAL_TIM_IC_CaptureCallback>
 80035f8:	e005      	b.n	8003606 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f9a7 	bl	800394e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f9b6 	bl	8003972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	2b04      	cmp	r3, #4
 8003618:	d122      	bne.n	8003660 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b04      	cmp	r3, #4
 8003626:	d11b      	bne.n	8003660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0204 	mvn.w	r2, #4
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f98a 	bl	8003960 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f97d 	bl	800394e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f98c 	bl	8003972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b08      	cmp	r3, #8
 800366c:	d122      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b08      	cmp	r3, #8
 800367a:	d11b      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0208 	mvn.w	r2, #8
 8003684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2204      	movs	r2, #4
 800368a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f960 	bl	8003960 <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f953 	bl	800394e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f962 	bl	8003972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d122      	bne.n	8003708 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0310 	and.w	r3, r3, #16
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d11b      	bne.n	8003708 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0210 	mvn.w	r2, #16
 80036d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2208      	movs	r2, #8
 80036de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f936 	bl	8003960 <HAL_TIM_IC_CaptureCallback>
 80036f4:	e005      	b.n	8003702 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f929 	bl	800394e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f938 	bl	8003972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b01      	cmp	r3, #1
 8003714:	d10e      	bne.n	8003734 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d107      	bne.n	8003734 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0201 	mvn.w	r2, #1
 800372c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fd fc94 	bl	800105c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800373e:	2b80      	cmp	r3, #128	; 0x80
 8003740:	d10e      	bne.n	8003760 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374c:	2b80      	cmp	r3, #128	; 0x80
 800374e:	d107      	bne.n	8003760 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 fa7b 	bl	8003c56 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d10e      	bne.n	800378c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d107      	bne.n	800378c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8fc 	bl	8003984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b20      	cmp	r3, #32
 8003798:	d10e      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d107      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0220 	mvn.w	r2, #32
 80037b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fa46 	bl	8003c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_TIM_ConfigClockSource+0x1c>
 80037d8:	2302      	movs	r3, #2
 80037da:	e0b4      	b.n	8003946 <HAL_TIM_ConfigClockSource+0x186>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003814:	d03e      	beq.n	8003894 <HAL_TIM_ConfigClockSource+0xd4>
 8003816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381a:	f200 8087 	bhi.w	800392c <HAL_TIM_ConfigClockSource+0x16c>
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003822:	f000 8086 	beq.w	8003932 <HAL_TIM_ConfigClockSource+0x172>
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382a:	d87f      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 800382c:	2b70      	cmp	r3, #112	; 0x70
 800382e:	d01a      	beq.n	8003866 <HAL_TIM_ConfigClockSource+0xa6>
 8003830:	2b70      	cmp	r3, #112	; 0x70
 8003832:	d87b      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 8003834:	2b60      	cmp	r3, #96	; 0x60
 8003836:	d050      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x11a>
 8003838:	2b60      	cmp	r3, #96	; 0x60
 800383a:	d877      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 800383c:	2b50      	cmp	r3, #80	; 0x50
 800383e:	d03c      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0xfa>
 8003840:	2b50      	cmp	r3, #80	; 0x50
 8003842:	d873      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d058      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0x13a>
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d86f      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 800384c:	2b30      	cmp	r3, #48	; 0x30
 800384e:	d064      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x15a>
 8003850:	2b30      	cmp	r3, #48	; 0x30
 8003852:	d86b      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 8003854:	2b20      	cmp	r3, #32
 8003856:	d060      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x15a>
 8003858:	2b20      	cmp	r3, #32
 800385a:	d867      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d05c      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x15a>
 8003860:	2b10      	cmp	r3, #16
 8003862:	d05a      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x15a>
 8003864:	e062      	b.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6899      	ldr	r1, [r3, #8]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f000 f968 	bl	8003b4a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	609a      	str	r2, [r3, #8]
      break;
 8003892:	e04f      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	6899      	ldr	r1, [r3, #8]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f000 f951 	bl	8003b4a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038b6:	609a      	str	r2, [r3, #8]
      break;
 80038b8:	e03c      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6859      	ldr	r1, [r3, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	461a      	mov	r2, r3
 80038c8:	f000 f8c8 	bl	8003a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2150      	movs	r1, #80	; 0x50
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f91f 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 80038d8:	e02c      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6859      	ldr	r1, [r3, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	461a      	mov	r2, r3
 80038e8:	f000 f8e6 	bl	8003ab8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2160      	movs	r1, #96	; 0x60
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f90f 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 80038f8:	e01c      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6859      	ldr	r1, [r3, #4]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	461a      	mov	r2, r3
 8003908:	f000 f8a8 	bl	8003a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2140      	movs	r1, #64	; 0x40
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f8ff 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 8003918:	e00c      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f000 f8f6 	bl	8003b16 <TIM_ITRx_SetConfig>
      break;
 800392a:	e003      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      break;
 8003930:	e000      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr

08003960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	bc80      	pop	{r7}
 8003970:	4770      	bx	lr

08003972 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003972:	b480      	push	{r7}
 8003974:	b083      	sub	sp, #12
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800397a:	bf00      	nop
 800397c:	370c      	adds	r7, #12
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr

08003984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr
	...

08003998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a29      	ldr	r2, [pc, #164]	; (8003a50 <TIM_Base_SetConfig+0xb8>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <TIM_Base_SetConfig+0x30>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d007      	beq.n	80039c8 <TIM_Base_SetConfig+0x30>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a26      	ldr	r2, [pc, #152]	; (8003a54 <TIM_Base_SetConfig+0xbc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d003      	beq.n	80039c8 <TIM_Base_SetConfig+0x30>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a25      	ldr	r2, [pc, #148]	; (8003a58 <TIM_Base_SetConfig+0xc0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d108      	bne.n	80039da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <TIM_Base_SetConfig+0xb8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00b      	beq.n	80039fa <TIM_Base_SetConfig+0x62>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e8:	d007      	beq.n	80039fa <TIM_Base_SetConfig+0x62>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <TIM_Base_SetConfig+0xbc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d003      	beq.n	80039fa <TIM_Base_SetConfig+0x62>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a18      	ldr	r2, [pc, #96]	; (8003a58 <TIM_Base_SetConfig+0xc0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d108      	bne.n	8003a0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a07      	ldr	r2, [pc, #28]	; (8003a50 <TIM_Base_SetConfig+0xb8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d103      	bne.n	8003a40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	615a      	str	r2, [r3, #20]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr
 8003a50:	40012c00 	.word	0x40012c00
 8003a54:	40000400 	.word	0x40000400
 8003a58:	40000800 	.word	0x40000800

08003a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f023 0201 	bic.w	r2, r3, #1
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f023 030a 	bic.w	r3, r3, #10
 8003a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f023 0210 	bic.w	r2, r3, #16
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	031b      	lsls	r3, r3, #12
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003af4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	621a      	str	r2, [r3, #32]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f043 0307 	orr.w	r3, r3, #7
 8003b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	609a      	str	r2, [r3, #8]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr

08003b4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b087      	sub	sp, #28
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	021a      	lsls	r2, r3, #8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	609a      	str	r2, [r3, #8]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d101      	bne.n	8003ba0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	e046      	b.n	8003c2e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a16      	ldr	r2, [pc, #88]	; (8003c38 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00e      	beq.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bec:	d009      	beq.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a12      	ldr	r2, [pc, #72]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a10      	ldr	r2, [pc, #64]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d10c      	bne.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800

08003c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b083      	sub	sp, #12
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c5e:	bf00      	nop
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d101      	bne.n	8003c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e042      	b.n	8003d00 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d106      	bne.n	8003c94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fd fe3a 	bl	8001908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2224      	movs	r2, #36	; 0x24
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003caa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fdc5 	bl	800483c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08a      	sub	sp, #40	; 0x28
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d16d      	bne.n	8003e04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_UART_Transmit+0x2c>
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e066      	b.n	8003e06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2221      	movs	r2, #33	; 0x21
 8003d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d46:	f7fd ffc1 	bl	8001ccc <HAL_GetTick>
 8003d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	88fa      	ldrh	r2, [r7, #6]
 8003d56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d60:	d108      	bne.n	8003d74 <HAL_UART_Transmit+0x6c>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e003      	b.n	8003d7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d7c:	e02a      	b.n	8003dd4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2200      	movs	r2, #0
 8003d86:	2180      	movs	r1, #128	; 0x80
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fb14 	bl	80043b6 <UART_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e036      	b.n	8003e06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10b      	bne.n	8003db6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	3302      	adds	r3, #2
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	e007      	b.n	8003dc6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	781a      	ldrb	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1cf      	bne.n	8003d7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2200      	movs	r2, #0
 8003de6:	2140      	movs	r1, #64	; 0x40
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fae4 	bl	80043b6 <UART_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e006      	b.n	8003e06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	e000      	b.n	8003e06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e04:	2302      	movs	r3, #2
  }
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3720      	adds	r7, #32
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d112      	bne.n	8003e4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_UART_Receive_IT+0x26>
 8003e2e:	88fb      	ldrh	r3, [r7, #6]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e00b      	b.n	8003e50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	461a      	mov	r2, r3
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 fb24 	bl	8004492 <UART_Start_Receive_IT>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	e000      	b.n	8003e50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e4e:	2302      	movs	r3, #2
  }
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b0ba      	sub	sp, #232	; 0xe8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003e84:	2300      	movs	r3, #0
 8003e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003e96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10f      	bne.n	8003ebe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_UART_IRQHandler+0x66>
 8003eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fc01 	bl	80046be <UART_Receive_IT>
      return;
 8003ebc:	e25b      	b.n	8004376 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80de 	beq.w	8004084 <HAL_UART_IRQHandler+0x22c>
 8003ec8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d106      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 80d1 	beq.w	8004084 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00b      	beq.n	8003f06 <HAL_UART_IRQHandler+0xae>
 8003eee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	f043 0201 	orr.w	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <HAL_UART_IRQHandler+0xd2>
 8003f12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	f043 0202 	orr.w	r2, r3, #2
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00b      	beq.n	8003f4e <HAL_UART_IRQHandler+0xf6>
 8003f36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d005      	beq.n	8003f4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	f043 0204 	orr.w	r2, r3, #4
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d011      	beq.n	8003f7e <HAL_UART_IRQHandler+0x126>
 8003f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5e:	f003 0320 	and.w	r3, r3, #32
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d105      	bne.n	8003f72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f76:	f043 0208 	orr.w	r2, r3, #8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 81f2 	beq.w	800436c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x14e>
 8003f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fb8c 	bl	80046be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x17a>
 8003fca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d04f      	beq.n	8004072 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fa96 	bl	8004504 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d041      	beq.n	800406a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3314      	adds	r3, #20
 8003fec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ffc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004000:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004004:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3314      	adds	r3, #20
 800400e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004012:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800401e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800402a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1d9      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d013      	beq.n	8004062 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	4a7e      	ldr	r2, [pc, #504]	; (8004238 <HAL_UART_IRQHandler+0x3e0>)
 8004040:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	4618      	mov	r0, r3
 8004048:	f7fd ffb6 	bl	8001fb8 <HAL_DMA_Abort_IT>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d016      	beq.n	8004080 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800405c:	4610      	mov	r0, r2
 800405e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e00e      	b.n	8004080 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f993 	bl	800438e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	e00a      	b.n	8004080 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f98f 	bl	800438e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	e006      	b.n	8004080 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f98b 	bl	800438e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800407e:	e175      	b.n	800436c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004080:	bf00      	nop
    return;
 8004082:	e173      	b.n	800436c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	2b01      	cmp	r3, #1
 800408a:	f040 814f 	bne.w	800432c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8148 	beq.w	800432c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8141 	beq.w	800432c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040aa:	2300      	movs	r3, #0
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80b6 	beq.w	800423c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8145 	beq.w	8004370 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80040ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ee:	429a      	cmp	r2, r3
 80040f0:	f080 813e 	bcs.w	8004370 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b20      	cmp	r3, #32
 8004104:	f000 8088 	beq.w	8004218 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	330c      	adds	r3, #12
 800410e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800411e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004126:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004134:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004138:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004140:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004144:	e841 2300 	strex	r3, r2, [r1]
 8004148:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800414c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1d9      	bne.n	8004108 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3314      	adds	r3, #20
 800415a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004164:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3314      	adds	r3, #20
 8004174:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004178:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800417c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004180:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800418a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e1      	bne.n	8004154 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3314      	adds	r3, #20
 8004196:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80041a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3314      	adds	r3, #20
 80041b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e3      	bne.n	8004190 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	330c      	adds	r3, #12
 80041dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e0:	e853 3f00 	ldrex	r3, [r3]
 80041e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e8:	f023 0310 	bic.w	r3, r3, #16
 80041ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	330c      	adds	r3, #12
 80041f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80041fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80041fc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004200:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1e3      	bne.n	80041d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004212:	4618      	mov	r0, r3
 8004214:	f7fd fe95 	bl	8001f42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004226:	b29b      	uxth	r3, r3
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	b29b      	uxth	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f8b6 	bl	80043a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004234:	e09c      	b.n	8004370 <HAL_UART_IRQHandler+0x518>
 8004236:	bf00      	nop
 8004238:	080045c9 	.word	0x080045c9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004244:	b29b      	uxth	r3, r3
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 808e 	beq.w	8004374 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8089 	beq.w	8004374 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004274:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004278:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004286:	647a      	str	r2, [r7, #68]	; 0x44
 8004288:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800428c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e3      	bne.n	8004262 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3314      	adds	r3, #20
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	623b      	str	r3, [r7, #32]
   return(result);
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	f023 0301 	bic.w	r3, r3, #1
 80042b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	3314      	adds	r3, #20
 80042ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042be:	633a      	str	r2, [r7, #48]	; 0x30
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1e3      	bne.n	800429a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f023 0310 	bic.w	r3, r3, #16
 80042f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	330c      	adds	r3, #12
 8004300:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004304:	61fa      	str	r2, [r7, #28]
 8004306:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	69b9      	ldr	r1, [r7, #24]
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	617b      	str	r3, [r7, #20]
   return(result);
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e3      	bne.n	80042e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800431e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f83b 	bl	80043a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800432a:	e023      	b.n	8004374 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800432c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004334:	2b00      	cmp	r3, #0
 8004336:	d009      	beq.n	800434c <HAL_UART_IRQHandler+0x4f4>
 8004338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800433c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004340:	2b00      	cmp	r3, #0
 8004342:	d003      	beq.n	800434c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f953 	bl	80045f0 <UART_Transmit_IT>
    return;
 800434a:	e014      	b.n	8004376 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800434c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00e      	beq.n	8004376 <HAL_UART_IRQHandler+0x51e>
 8004358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f992 	bl	800468e <UART_EndTransmit_IT>
    return;
 800436a:	e004      	b.n	8004376 <HAL_UART_IRQHandler+0x51e>
    return;
 800436c:	bf00      	nop
 800436e:	e002      	b.n	8004376 <HAL_UART_IRQHandler+0x51e>
      return;
 8004370:	bf00      	nop
 8004372:	e000      	b.n	8004376 <HAL_UART_IRQHandler+0x51e>
      return;
 8004374:	bf00      	nop
  }
}
 8004376:	37e8      	adds	r7, #232	; 0xe8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004384:	bf00      	nop
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	bc80      	pop	{r7}
 800438c:	4770      	bx	lr

0800438e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800438e:	b480      	push	{r7}
 8004390:	b083      	sub	sp, #12
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b090      	sub	sp, #64	; 0x40
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	603b      	str	r3, [r7, #0]
 80043c2:	4613      	mov	r3, r2
 80043c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c6:	e050      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043ce:	d04c      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80043d6:	f7fd fc79 	bl	8001ccc <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d241      	bcs.n	800446a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	330c      	adds	r3, #12
 8004404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004406:	637a      	str	r2, [r7, #52]	; 0x34
 8004408:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800440c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800440e:	e841 2300 	strex	r3, r2, [r1]
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1e5      	bne.n	80043e6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3314      	adds	r3, #20
 8004420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	e853 3f00 	ldrex	r3, [r3]
 8004428:	613b      	str	r3, [r7, #16]
   return(result);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f023 0301 	bic.w	r3, r3, #1
 8004430:	63bb      	str	r3, [r7, #56]	; 0x38
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3314      	adds	r3, #20
 8004438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800443a:	623a      	str	r2, [r7, #32]
 800443c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	69f9      	ldr	r1, [r7, #28]
 8004440:	6a3a      	ldr	r2, [r7, #32]
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	61bb      	str	r3, [r7, #24]
   return(result);
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e5      	bne.n	800441a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e00f      	b.n	800448a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4013      	ands	r3, r2
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	429a      	cmp	r2, r3
 8004478:	bf0c      	ite	eq
 800447a:	2301      	moveq	r3, #1
 800447c:	2300      	movne	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	461a      	mov	r2, r3
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	429a      	cmp	r2, r3
 8004486:	d09f      	beq.n	80043c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3740      	adds	r7, #64	; 0x40
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004492:	b480      	push	{r7}
 8004494:	b085      	sub	sp, #20
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	4613      	mov	r3, r2
 800449e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	88fa      	ldrh	r2, [r7, #6]
 80044b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2222      	movs	r2, #34	; 0x22
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695a      	ldr	r2, [r3, #20]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0220 	orr.w	r2, r2, #32
 80044f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr

08004504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b095      	sub	sp, #84	; 0x54
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	330c      	adds	r3, #12
 8004512:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004516:	e853 3f00 	ldrex	r3, [r3]
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	330c      	adds	r3, #12
 800452a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800452c:	643a      	str	r2, [r7, #64]	; 0x40
 800452e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004530:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004532:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004534:	e841 2300 	strex	r3, r2, [r1]
 8004538:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800453a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e5      	bne.n	800450c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	3314      	adds	r3, #20
 8004546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	e853 3f00 	ldrex	r3, [r3]
 800454e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f023 0301 	bic.w	r3, r3, #1
 8004556:	64bb      	str	r3, [r7, #72]	; 0x48
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3314      	adds	r3, #20
 800455e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004560:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004568:	e841 2300 	strex	r3, r2, [r1]
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e5      	bne.n	8004540 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004578:	2b01      	cmp	r3, #1
 800457a:	d119      	bne.n	80045b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	60bb      	str	r3, [r7, #8]
   return(result);
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f023 0310 	bic.w	r3, r3, #16
 8004592:	647b      	str	r3, [r7, #68]	; 0x44
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800459c:	61ba      	str	r2, [r7, #24]
 800459e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	6979      	ldr	r1, [r7, #20]
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	613b      	str	r3, [r7, #16]
   return(result);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045be:	bf00      	nop
 80045c0:	3754      	adds	r7, #84	; 0x54
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7ff fed3 	bl	800438e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b21      	cmp	r3, #33	; 0x21
 8004602:	d13e      	bne.n	8004682 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460c:	d114      	bne.n	8004638 <UART_Transmit_IT+0x48>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d110      	bne.n	8004638 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	881b      	ldrh	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800462a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	1c9a      	adds	r2, r3, #2
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	621a      	str	r2, [r3, #32]
 8004636:	e008      	b.n	800464a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	1c59      	adds	r1, r3, #1
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	6211      	str	r1, [r2, #32]
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29b      	uxth	r3, r3
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	4619      	mov	r1, r3
 8004658:	84d1      	strh	r1, [r2, #38]	; 0x26
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10f      	bne.n	800467e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800466c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800467c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004682:	2302      	movs	r3, #2
  }
}
 8004684:	4618      	mov	r0, r3
 8004686:	3714      	adds	r7, #20
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fe64 	bl	800437c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b08c      	sub	sp, #48	; 0x30
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b22      	cmp	r3, #34	; 0x22
 80046d0:	f040 80ae 	bne.w	8004830 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046dc:	d117      	bne.n	800470e <UART_Receive_IT+0x50>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d113      	bne.n	800470e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	1c9a      	adds	r2, r3, #2
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	629a      	str	r2, [r3, #40]	; 0x28
 800470c:	e026      	b.n	800475c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004714:	2300      	movs	r3, #0
 8004716:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004720:	d007      	beq.n	8004732 <UART_Receive_IT+0x74>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <UART_Receive_IT+0x82>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	b2da      	uxtb	r2, r3
 800473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473c:	701a      	strb	r2, [r3, #0]
 800473e:	e008      	b.n	8004752 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800474c:	b2da      	uxtb	r2, r3
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29b      	uxth	r3, r3
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	4619      	mov	r1, r3
 800476a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800476c:	2b00      	cmp	r3, #0
 800476e:	d15d      	bne.n	800482c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0220 	bic.w	r2, r2, #32
 800477e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800478e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695a      	ldr	r2, [r3, #20]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d135      	bne.n	8004822 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	330c      	adds	r3, #12
 80047c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	e853 3f00 	ldrex	r3, [r3]
 80047ca:	613b      	str	r3, [r7, #16]
   return(result);
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f023 0310 	bic.w	r3, r3, #16
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	330c      	adds	r3, #12
 80047da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047dc:	623a      	str	r2, [r7, #32]
 80047de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e0:	69f9      	ldr	r1, [r7, #28]
 80047e2:	6a3a      	ldr	r2, [r7, #32]
 80047e4:	e841 2300 	strex	r3, r2, [r1]
 80047e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1e5      	bne.n	80047bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b10      	cmp	r3, #16
 80047fc:	d10a      	bne.n	8004814 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004818:	4619      	mov	r1, r3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff fdc0 	bl	80043a0 <HAL_UARTEx_RxEventCallback>
 8004820:	e002      	b.n	8004828 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc fcd8 	bl	80011d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004828:	2300      	movs	r3, #0
 800482a:	e002      	b.n	8004832 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	e000      	b.n	8004832 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004830:	2302      	movs	r3, #2
  }
}
 8004832:	4618      	mov	r0, r3
 8004834:	3730      	adds	r7, #48	; 0x30
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
	...

0800483c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004876:	f023 030c 	bic.w	r3, r3, #12
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6812      	ldr	r2, [r2, #0]
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	430b      	orrs	r3, r1
 8004882:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a2c      	ldr	r2, [pc, #176]	; (8004950 <UART_SetConfig+0x114>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d103      	bne.n	80048ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048a4:	f7fe f992 	bl	8002bcc <HAL_RCC_GetPCLK2Freq>
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	e002      	b.n	80048b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7fe f97a 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 80048b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	009a      	lsls	r2, r3, #2
 80048bc:	441a      	add	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	4a22      	ldr	r2, [pc, #136]	; (8004954 <UART_SetConfig+0x118>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	0119      	lsls	r1, r3, #4
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009a      	lsls	r2, r3, #2
 80048dc:	441a      	add	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e8:	4b1a      	ldr	r3, [pc, #104]	; (8004954 <UART_SetConfig+0x118>)
 80048ea:	fba3 0302 	umull	r0, r3, r3, r2
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	2064      	movs	r0, #100	; 0x64
 80048f2:	fb00 f303 	mul.w	r3, r0, r3
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	3332      	adds	r3, #50	; 0x32
 80048fc:	4a15      	ldr	r2, [pc, #84]	; (8004954 <UART_SetConfig+0x118>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004908:	4419      	add	r1, r3
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	009a      	lsls	r2, r3, #2
 8004914:	441a      	add	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004920:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <UART_SetConfig+0x118>)
 8004922:	fba3 0302 	umull	r0, r3, r3, r2
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	2064      	movs	r0, #100	; 0x64
 800492a:	fb00 f303 	mul.w	r3, r0, r3
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	3332      	adds	r3, #50	; 0x32
 8004934:	4a07      	ldr	r2, [pc, #28]	; (8004954 <UART_SetConfig+0x118>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	f003 020f 	and.w	r2, r3, #15
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	440a      	add	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004948:	bf00      	nop
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40013800 	.word	0x40013800
 8004954:	51eb851f 	.word	0x51eb851f

08004958 <_ZN5HX711C1Ev>:


#include "HX711.h"


HX711::HX711()
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2280      	movs	r2, #128	; 0x80
 8004964:	709a      	strb	r2, [r3, #2]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	605a      	str	r2, [r3, #4]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	60da      	str	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	611a      	str	r2, [r3, #16]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	751a      	strb	r2, [r3, #20]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	755a      	strb	r2, [r3, #21]
{
  reset();
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f80f 	bl	80049b2 <_ZN5HX7115resetEv>
}
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <_ZN5HX711D1Ev>:


HX711::~HX711()
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
{
}
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bc80      	pop	{r7}
 80049b0:	4770      	bx	lr

080049b2 <_ZN5HX7115resetEv>:
  reset();
}


void HX711::reset()
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  power_down();
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f817 	bl	80049ee <_ZN5HX71110power_downEv>
  power_up();
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f825 	bl	8004a10 <_ZN5HX7118power_upEv>
  _offset   = 0;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	605a      	str	r2, [r3, #4]
  _scale    = 1;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80049d2:	609a      	str	r2, [r3, #8]
  _gain     = HX711_CHANNEL_A_GAIN_128;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2280      	movs	r2, #128	; 0x80
 80049d8:	709a      	strb	r2, [r3, #2]
  _lastRead = 0;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	60da      	str	r2, [r3, #12]
  _mode     = HX711_AVERAGE_MODE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	751a      	strb	r2, [r3, #20]
}
 80049e6:	bf00      	nop
 80049e8:	3708      	adds	r7, #8
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <_ZN5HX71110power_downEv>:
///////////////////////////////////////////////////////////////
//
//  POWER MANAGEMENT
//
void HX711::power_down()
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  //  at least 60 us HIGH
  digitalWrite(_clockPin, HIGH);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	785b      	ldrb	r3, [r3, #1]
 80049fa:	2101      	movs	r1, #1
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fb fe13 	bl	8000628 <LOADCELL_writeIo>
  delayMicroseconds(64);
 8004a02:	2040      	movs	r0, #64	; 0x40
 8004a04:	f7fc f999 	bl	8000d3a <CLOCK_delayUs>
}
 8004a08:	bf00      	nop
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <_ZN5HX7118power_upEv>:


void HX711::power_up()
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  digitalWrite(_clockPin, LOW);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	785b      	ldrb	r3, [r3, #1]
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fb fe02 	bl	8000628 <LOADCELL_writeIo>
}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <PN532_begin>:
    @brief  Setups the HW

    @returns  true if successful, otherwise false
*/
/**************************************************************************/
bool PN532_begin(PN532_Handle * handle) {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  PN532_reset(handle); // HW reset - put in known state
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f808 	bl	8004a4a <PN532_reset>
  PN532_wakeup(handle); // hey! wakeup!
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f80e 	bl	8004a5c <PN532_wakeup>
  return true;
 8004a40:	2301      	movs	r3, #1
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <PN532_reset>:
/**************************************************************************/
/*!
    @brief  Perform a hardware reset. Requires reset pin to have been provided.
*/
/**************************************************************************/
void PN532_reset(PN532_Handle * handle) {
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr

08004a5c <PN532_wakeup>:
/**************************************************************************/
/*!
    @brief  Wakeup from LowVbat mode into Normal Mode.
*/
/**************************************************************************/
void PN532_wakeup(PN532_Handle * handle) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  // need to config SAM to stay in Normal Mode
  PN532_SAMConfig(handle);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f8b7 	bl	8004bd8 <PN532_SAMConfig>
}
 8004a6a:	bf00      	nop
 8004a6c:	3708      	adds	r7, #8
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <PN532_PrintHexChar>:

    @param  data      Pointer to the byte data
    @param  numBytes  Data length in bytes
*/
/**************************************************************************/
void PN532_PrintHexChar(const uint8_t *data, const uint32_t numBytes) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t szPos;
  for (szPos = 0; szPos < numBytes; szPos++) {
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	e020      	b.n	8004ac6 <PN532_PrintHexChar+0x52>
    // Append leading 0 for small values
    if (data[szPos] <= 0xF)
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b0f      	cmp	r3, #15
 8004a8e:	d803      	bhi.n	8004a98 <PN532_PrintHexChar+0x24>
    DMSG_STR("0x");
 8004a90:	4923      	ldr	r1, [pc, #140]	; (8004b20 <PN532_PrintHexChar+0xac>)
 8004a92:	4824      	ldr	r0, [pc, #144]	; (8004b24 <PN532_PrintHexChar+0xb0>)
 8004a94:	f000 fcac 	bl	80053f0 <utils_log_raw>
    DMSG_HEX(data[szPos]);
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4821      	ldr	r0, [pc, #132]	; (8004b28 <PN532_PrintHexChar+0xb4>)
 8004aa4:	f000 fca4 	bl	80053f0 <utils_log_raw>
    if ((numBytes > 1) && (szPos != numBytes - 1)) {
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d908      	bls.n	8004ac0 <PN532_PrintHexChar+0x4c>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d003      	beq.n	8004ac0 <PN532_PrintHexChar+0x4c>
    DMSG_STR(" ");
 8004ab8:	491c      	ldr	r1, [pc, #112]	; (8004b2c <PN532_PrintHexChar+0xb8>)
 8004aba:	481a      	ldr	r0, [pc, #104]	; (8004b24 <PN532_PrintHexChar+0xb0>)
 8004abc:	f000 fc98 	bl	80053f0 <utils_log_raw>
  for (szPos = 0; szPos < numBytes; szPos++) {
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d3da      	bcc.n	8004a84 <PN532_PrintHexChar+0x10>
    }
  }
  DMSG_STR("  ");
 8004ace:	4918      	ldr	r1, [pc, #96]	; (8004b30 <PN532_PrintHexChar+0xbc>)
 8004ad0:	4814      	ldr	r0, [pc, #80]	; (8004b24 <PN532_PrintHexChar+0xb0>)
 8004ad2:	f000 fc8d 	bl	80053f0 <utils_log_raw>
  for (szPos = 0; szPos < numBytes; szPos++) {
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	e015      	b.n	8004b08 <PN532_PrintHexChar+0x94>
    if (data[szPos] <= 0x1F)
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b1f      	cmp	r3, #31
 8004ae6:	d804      	bhi.n	8004af2 <PN532_PrintHexChar+0x7e>
    DMSG_STR(".");
 8004ae8:	4912      	ldr	r1, [pc, #72]	; (8004b34 <PN532_PrintHexChar+0xc0>)
 8004aea:	480e      	ldr	r0, [pc, #56]	; (8004b24 <PN532_PrintHexChar+0xb0>)
 8004aec:	f000 fc80 	bl	80053f0 <utils_log_raw>
 8004af0:	e007      	b.n	8004b02 <PN532_PrintHexChar+0x8e>
    else
      DMSG_CHAR((char)data[szPos]);
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	4619      	mov	r1, r3
 8004afc:	480e      	ldr	r0, [pc, #56]	; (8004b38 <PN532_PrintHexChar+0xc4>)
 8004afe:	f000 fc77 	bl	80053f0 <utils_log_raw>
  for (szPos = 0; szPos < numBytes; szPos++) {
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3301      	adds	r3, #1
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d3e5      	bcc.n	8004adc <PN532_PrintHexChar+0x68>
  }
  DMSG_STR("\r\n");
 8004b10:	490a      	ldr	r1, [pc, #40]	; (8004b3c <PN532_PrintHexChar+0xc8>)
 8004b12:	4804      	ldr	r0, [pc, #16]	; (8004b24 <PN532_PrintHexChar+0xb0>)
 8004b14:	f000 fc6c 	bl	80053f0 <utils_log_raw>
}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	08005eb0 	.word	0x08005eb0
 8004b24:	08005eb4 	.word	0x08005eb4
 8004b28:	08005eb8 	.word	0x08005eb8
 8004b2c:	08005ebc 	.word	0x08005ebc
 8004b30:	08005ec4 	.word	0x08005ec4
 8004b34:	08005ec8 	.word	0x08005ec8
 8004b38:	08005ecc 	.word	0x08005ecc
 8004b3c:	08005ec0 	.word	0x08005ec0

08004b40 <PN532_sendCommandCheckAck>:
              ACK was recieved
*/
/**************************************************************************/
// default timeout of one second
bool PN532_sendCommandCheckAck(PN532_Handle * handle, uint8_t *cmd, uint8_t cmdlen,
                                         uint16_t timeout) {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	4611      	mov	r1, r2
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	460b      	mov	r3, r1
 8004b50:	71fb      	strb	r3, [r7, #7]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80bb      	strh	r3, [r7, #4]

  // I2C works without using IRQ pin by polling for RDY byte
  // seems to work best with some delays between transactions
  uint8_t SLOWDOWN = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]

  // write the command
  PN532_writecommand(handle, cmd, cmdlen);
 8004b5a:	79fb      	ldrb	r3, [r7, #7]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 fa8d 	bl	8005080 <PN532_writecommand>


  // Wait for chip to say its ready!
  if (!PN532_waitready(handle,timeout)) {
 8004b66:	88bb      	ldrh	r3, [r7, #4]
 8004b68:	4619      	mov	r1, r3
 8004b6a:	68f8      	ldr	r0, [r7, #12]
 8004b6c:	f000 fa1c 	bl	8004fa8 <PN532_waitready>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f083 0301 	eor.w	r3, r3, #1
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <PN532_sendCommandCheckAck+0x40>
    return false;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e020      	b.n	8004bc2 <PN532_sendCommandCheckAck+0x82>
  }

#ifdef PN532DEBUG
    DMSG_STR("IRQ received");
 8004b80:	4912      	ldr	r1, [pc, #72]	; (8004bcc <PN532_sendCommandCheckAck+0x8c>)
 8004b82:	4813      	ldr	r0, [pc, #76]	; (8004bd0 <PN532_sendCommandCheckAck+0x90>)
 8004b84:	f000 fc34 	bl	80053f0 <utils_log_raw>
#endif

  // read acknowledgement
  if (!PN532_readack(handle)) {
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f9d1 	bl	8004f30 <PN532_readack>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	f083 0301 	eor.w	r3, r3, #1
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d005      	beq.n	8004ba6 <PN532_sendCommandCheckAck+0x66>
#ifdef PN532DEBUG
    DMSG_STR("No ACK frame received!");
 8004b9a:	490e      	ldr	r1, [pc, #56]	; (8004bd4 <PN532_sendCommandCheckAck+0x94>)
 8004b9c:	480c      	ldr	r0, [pc, #48]	; (8004bd0 <PN532_sendCommandCheckAck+0x90>)
 8004b9e:	f000 fc27 	bl	80053f0 <utils_log_raw>
#endif
    return false;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e00d      	b.n	8004bc2 <PN532_sendCommandCheckAck+0x82>
  }

  // Wait for chip to say its ready!
  if (!PN532_waitready(handle, timeout)) {
 8004ba6:	88bb      	ldrh	r3, [r7, #4]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 f9fc 	bl	8004fa8 <PN532_waitready>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f083 0301 	eor.w	r3, r3, #1
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <PN532_sendCommandCheckAck+0x80>
    return false;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	e000      	b.n	8004bc2 <PN532_sendCommandCheckAck+0x82>
  }

  return true; // ack'd command
 8004bc0:	2301      	movs	r3, #1
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	08005ee8 	.word	0x08005ee8
 8004bd0:	08005eb4 	.word	0x08005eb4
 8004bd4:	08005ef8 	.word	0x08005ef8

08004bd8 <PN532_SAMConfig>:
/*!
    @brief   Configures the SAM (Secure Access Module)
    @return  true on success, false otherwise.
*/
/**************************************************************************/
bool PN532_SAMConfig(PN532_Handle * handle) {
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  handle->pn532_packetbuffer[0] = PN532_COMMAND_SAMCONFIGURATION;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2214      	movs	r2, #20
 8004be4:	75da      	strb	r2, [r3, #23]
  handle->pn532_packetbuffer[1] = 0x01; // normal mode;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	761a      	strb	r2, [r3, #24]
  handle->pn532_packetbuffer[2] = 0x14; // timeout 50ms * 20 = 1 second
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2214      	movs	r2, #20
 8004bf0:	765a      	strb	r2, [r3, #25]
  handle->pn532_packetbuffer[3] = 0x01; // use IRQ pin!
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	769a      	strb	r2, [r3, #26]

  if (!PN532_sendCommandCheckAck(handle, handle->pn532_packetbuffer, 4, 1000))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f103 0117 	add.w	r1, r3, #23
 8004bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c02:	2204      	movs	r2, #4
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f7ff ff9b 	bl	8004b40 <PN532_sendCommandCheckAck>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f083 0301 	eor.w	r3, r3, #1
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <PN532_SAMConfig+0x42>
    return false;
 8004c16:	2300      	movs	r3, #0
 8004c18:	e012      	b.n	8004c40 <PN532_SAMConfig+0x68>

  // read data packet
  PN532_readdata(handle, handle->pn532_packetbuffer, 9);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3317      	adds	r3, #23
 8004c1e:	2209      	movs	r2, #9
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f9ee 	bl	8005004 <PN532_readdata>

  int offset = 6;
 8004c28:	2306      	movs	r3, #6
 8004c2a:	60fb      	str	r3, [r7, #12]
  return (handle->pn532_packetbuffer[offset] == 0x15);
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	3317      	adds	r3, #23
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b15      	cmp	r3, #21
 8004c38:	bf0c      	ite	eq
 8004c3a:	2301      	moveq	r3, #1
 8004c3c:	2300      	movne	r3, #0
 8004c3e:	b2db      	uxtb	r3, r3
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <PN532_readPassiveTargetID>:

    @return  1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readPassiveTargetID(PN532_Handle * handle, uint8_t cardbaudrate, uint8_t *uid,
                                         uint8_t *uidLength, uint16_t timeout) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	460b      	mov	r3, r1
 8004c56:	72fb      	strb	r3, [r7, #11]
  handle->pn532_packetbuffer[0] = PN532_COMMAND_INLISTPASSIVETARGET;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	224a      	movs	r2, #74	; 0x4a
 8004c5c:	75da      	strb	r2, [r3, #23]
  handle->pn532_packetbuffer[1] = 1; // max 1 cards at once (we can set this to 2 later)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	761a      	strb	r2, [r3, #24]
  handle->pn532_packetbuffer[2] = cardbaudrate;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	7afa      	ldrb	r2, [r7, #11]
 8004c68:	765a      	strb	r2, [r3, #25]

  if (!PN532_sendCommandCheckAck(handle, handle->pn532_packetbuffer, 3, timeout)) {
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f103 0117 	add.w	r1, r3, #23
 8004c70:	8b3b      	ldrh	r3, [r7, #24]
 8004c72:	2203      	movs	r2, #3
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7ff ff63 	bl	8004b40 <PN532_sendCommandCheckAck>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f083 0301 	eor.w	r3, r3, #1
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d005      	beq.n	8004c92 <PN532_readPassiveTargetID+0x4a>
#ifdef PN532DEBUG
    DMSG_STR("No card(s) read");
 8004c86:	4908      	ldr	r1, [pc, #32]	; (8004ca8 <PN532_readPassiveTargetID+0x60>)
 8004c88:	4808      	ldr	r0, [pc, #32]	; (8004cac <PN532_readPassiveTargetID+0x64>)
 8004c8a:	f000 fbb1 	bl	80053f0 <utils_log_raw>
#endif
    return 0x0; // no cards read
 8004c8e:	2300      	movs	r3, #0
 8004c90:	e005      	b.n	8004c9e <PN532_readPassiveTargetID+0x56>
  }

  return PN532_readDetectedPassiveTargetID(handle, uid, uidLength);
 8004c92:	683a      	ldr	r2, [r7, #0]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f80a 	bl	8004cb0 <PN532_readDetectedPassiveTargetID>
 8004c9c:	4603      	mov	r3, r0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	08005f9c 	.word	0x08005f9c
 8004cac:	08005eb4 	.word	0x08005eb4

08004cb0 <PN532_readDetectedPassiveTargetID>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
bool PN532_readDetectedPassiveTargetID(PN532_Handle * handle, uint8_t *uid,
                                                 uint8_t *uidLength) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  // read data packet
  PN532_readdata(handle, handle->pn532_packetbuffer, 20);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3317      	adds	r3, #23
 8004cc0:	2214      	movs	r2, #20
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f99d 	bl	8005004 <PN532_readdata>
#ifdef MIFAREDEBUG
  DMSG_STR("Found ");
  DMSG_INT(handle->pn532_packetbuffer[7]);
  DMSG_STR(" tags");
#endif
  if (handle->pn532_packetbuffer[7] != 1)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	7f9b      	ldrb	r3, [r3, #30]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d001      	beq.n	8004cd6 <PN532_readDetectedPassiveTargetID+0x26>
    return 0;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	e029      	b.n	8004d2a <PN532_readDetectedPassiveTargetID+0x7a>

  uint16_t sens_res = handle->pn532_packetbuffer[9];
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cdc:	82bb      	strh	r3, [r7, #20]
  sens_res <<= 8;
 8004cde:	8abb      	ldrh	r3, [r7, #20]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	82bb      	strh	r3, [r7, #20]
  sens_res |= handle->pn532_packetbuffer[10];
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	8abb      	ldrh	r3, [r7, #20]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	82bb      	strh	r3, [r7, #20]
  DMSG_STR("SAK: 0x");
  DMSG_HEX(handle->pn532_packetbuffer[11]);
#endif

  /* Card appears to be Mifare Classic */
  *uidLength = handle->pn532_packetbuffer[12];
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	701a      	strb	r2, [r3, #0]
#ifdef MIFAREDEBUG
  DMSG_STR("UID:");
#endif
  for (uint8_t i = 0; i < handle->pn532_packetbuffer[12]; i++) {
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	75fb      	strb	r3, [r7, #23]
 8004d00:	e00c      	b.n	8004d1c <PN532_readDetectedPassiveTargetID+0x6c>
    uid[i] = handle->pn532_packetbuffer[13 + i];
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
 8004d04:	f103 020d 	add.w	r2, r3, #13
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	440b      	add	r3, r1
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	440a      	add	r2, r1
 8004d12:	7dd2      	ldrb	r2, [r2, #23]
 8004d14:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < handle->pn532_packetbuffer[12]; i++) {
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	75fb      	strb	r3, [r7, #23]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8004d22:	7dfa      	ldrb	r2, [r7, #23]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d3ec      	bcc.n	8004d02 <PN532_readDetectedPassiveTargetID+0x52>
  }
#ifdef MIFAREDEBUG
  DMSG_STR("\r\n");
#endif

  return 1;
 8004d28:	2301      	movs	r3, #1
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <PN532_mifareclassic_AuthenticateBlock>:
/**************************************************************************/
uint8_t PN532_mifareclassic_AuthenticateBlock(PN532_Handle * handle, uint8_t *uid,
                                                        uint8_t uidLen,
                                                        uint32_t blockNumber,
                                                        uint8_t keyNumber,
                                                        uint8_t *keyData) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b086      	sub	sp, #24
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	603b      	str	r3, [r7, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	71fb      	strb	r3, [r7, #7]
  // uint8_t len;
  uint8_t i;

  // Hang on to the key and uid data
  memcpy(handle->_key, keyData, 6);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	3310      	adds	r3, #16
 8004d48:	2206      	movs	r2, #6
 8004d4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fba3 	bl	8005498 <memcpy>
  memcpy(handle->_uid, uid, uidLen);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3308      	adds	r3, #8
 8004d56:	79fa      	ldrb	r2, [r7, #7]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fb9c 	bl	8005498 <memcpy>
  handle->_uidLen = uidLen;
 8004d60:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	73da      	strb	r2, [r3, #15]
  DMSG_STR(": "));
  PrintHex(_key, 6);
#endif

  // Prepare the authentication command //
  handle->pn532_packetbuffer[0] =
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2240      	movs	r2, #64	; 0x40
 8004d6c:	75da      	strb	r2, [r3, #23]
      PN532_COMMAND_INDATAEXCHANGE; /* Data Exchange Header */
  handle->pn532_packetbuffer[1] = 1;        /* Max card numbers */
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	761a      	strb	r2, [r3, #24]
  handle->pn532_packetbuffer[2] = (keyNumber) ? MIFARE_CMD_AUTH_B : MIFARE_CMD_AUTH_A;
 8004d74:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <PN532_mifareclassic_AuthenticateBlock+0x4c>
 8004d7c:	2261      	movs	r2, #97	; 0x61
 8004d7e:	e000      	b.n	8004d82 <PN532_mifareclassic_AuthenticateBlock+0x4e>
 8004d80:	2260      	movs	r2, #96	; 0x60
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	765a      	strb	r2, [r3, #25]
  handle->pn532_packetbuffer[3] =
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	769a      	strb	r2, [r3, #26]
      blockNumber; /* Block Number (1K = 0..63, 4K = 0..255 */
  memcpy(handle->pn532_packetbuffer + 4, handle->_key, 6);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	3317      	adds	r3, #23
 8004d92:	1d18      	adds	r0, r3, #4
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3310      	adds	r3, #16
 8004d98:	2206      	movs	r2, #6
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	f000 fb7c 	bl	8005498 <memcpy>
  for (i = 0; i < handle->_uidLen; i++) {
 8004da0:	2300      	movs	r3, #0
 8004da2:	75fb      	strb	r3, [r7, #23]
 8004da4:	e00e      	b.n	8004dc4 <PN532_mifareclassic_AuthenticateBlock+0x90>
    handle->pn532_packetbuffer[10 + i] = handle->_uid[i]; /* 4 byte card ID */
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	330a      	adds	r3, #10
 8004db4:	b2d1      	uxtb	r1, r2
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4413      	add	r3, r2
 8004dba:	460a      	mov	r2, r1
 8004dbc:	75da      	strb	r2, [r3, #23]
  for (i = 0; i < handle->_uidLen; i++) {
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	75fb      	strb	r3, [r7, #23]
 8004dc4:	7dfb      	ldrb	r3, [r7, #23]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	f992 200f 	ldrsb.w	r2, [r2, #15]
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	dbea      	blt.n	8004da6 <PN532_mifareclassic_AuthenticateBlock+0x72>
  }

  if (!PN532_sendCommandCheckAck(handle, handle->pn532_packetbuffer, 10 + handle->_uidLen, 1000))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f103 0117 	add.w	r1, r3, #23
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	330a      	adds	r3, #10
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f7ff feaa 	bl	8004b40 <PN532_sendCommandCheckAck>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f083 0301 	eor.w	r3, r3, #1
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d001      	beq.n	8004dfc <PN532_mifareclassic_AuthenticateBlock+0xc8>
    return 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e017      	b.n	8004e2c <PN532_mifareclassic_AuthenticateBlock+0xf8>

  // Read the response packet
  PN532_readdata(handle, handle->pn532_packetbuffer, 12);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3317      	adds	r3, #23
 8004e00:	220c      	movs	r2, #12
 8004e02:	4619      	mov	r1, r3
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f000 f8fd 	bl	8005004 <PN532_readdata>

  // check if the response is valid and we are authenticated???
  // for an auth success it should be bytes 5-7: 0xD5 0x41 0x00
  // Mifare auth error is technically byte 7: 0x14 but anything other and 0x00
  // is not good
  if (handle->pn532_packetbuffer[7] != 0x00) {
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	7f9b      	ldrb	r3, [r3, #30]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00b      	beq.n	8004e2a <PN532_mifareclassic_AuthenticateBlock+0xf6>
#ifdef PN532DEBUG
    DMSG_STR("Authentification failed: ");
 8004e12:	4908      	ldr	r1, [pc, #32]	; (8004e34 <PN532_mifareclassic_AuthenticateBlock+0x100>)
 8004e14:	4808      	ldr	r0, [pc, #32]	; (8004e38 <PN532_mifareclassic_AuthenticateBlock+0x104>)
 8004e16:	f000 faeb 	bl	80053f0 <utils_log_raw>
    PN532_PrintHexChar(handle->pn532_packetbuffer, 12);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3317      	adds	r3, #23
 8004e1e:	210c      	movs	r1, #12
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fe27 	bl	8004a74 <PN532_PrintHexChar>
#endif
    return 0;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <PN532_mifareclassic_AuthenticateBlock+0xf8>
  }

  return 1;
 8004e2a:	2301      	movs	r3, #1
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	08006144 	.word	0x08006144
 8004e38:	08005eb4 	.word	0x08005eb4

08004e3c <PN532_mifareclassic_ReadDataBlock>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t PN532_mifareclassic_ReadDataBlock(PN532_Handle * handle, uint8_t blockNumber,
                                                    uint8_t *data) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	460b      	mov	r3, r1
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	72fb      	strb	r3, [r7, #11]
  DMSG_STR("Trying to read 16 bytes from block "));
  PN532DEBUGPRINT.println(blockNumber);
#endif

  /* Prepare the command */
  handle->pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2240      	movs	r2, #64	; 0x40
 8004e4e:	75da      	strb	r2, [r3, #23]
  handle->pn532_packetbuffer[1] = 1;               /* Card number */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	761a      	strb	r2, [r3, #24]
  handle->pn532_packetbuffer[2] = MIFARE_CMD_READ; /* Mifare Read command = 0x30 */
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2230      	movs	r2, #48	; 0x30
 8004e5a:	765a      	strb	r2, [r3, #25]
  handle->pn532_packetbuffer[3] =
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	7afa      	ldrb	r2, [r7, #11]
 8004e60:	769a      	strb	r2, [r3, #26]
      blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */

  /* Send the command */
  if (!PN532_sendCommandCheckAck(handle, handle->pn532_packetbuffer, 4, 1000)) {
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f103 0117 	add.w	r1, r3, #23
 8004e68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7ff fe66 	bl	8004b40 <PN532_sendCommandCheckAck>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f083 0301 	eor.w	r3, r3, #1
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d001      	beq.n	8004e84 <PN532_mifareclassic_ReadDataBlock+0x48>
#ifdef MIFAREDEBUG
    DMSG_STR("Failed to receive ACK for read command");
#endif
    return 0;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e015      	b.n	8004eb0 <PN532_mifareclassic_ReadDataBlock+0x74>
  }

  /* Read the response packet */
  PN532_readdata(handle, handle->pn532_packetbuffer, 26);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3317      	adds	r3, #23
 8004e88:	221a      	movs	r2, #26
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f8b9 	bl	8005004 <PN532_readdata>

  /* If byte 8 isn't 0x00 we probably have an error */
  if (handle->pn532_packetbuffer[7] != 0x00) {
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	7f9b      	ldrb	r3, [r3, #30]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <PN532_mifareclassic_ReadDataBlock+0x62>
#ifdef MIFAREDEBUG
    DMSG_STR("Unexpected response");
    PN532_PrintHexChar(handle->pn532_packetbuffer, 26);
#endif
    return 0;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e008      	b.n	8004eb0 <PN532_mifareclassic_ReadDataBlock+0x74>
  }

  /* Copy the 16 data bytes to the output buffer        */
  /* Block content starts at byte 9 of a valid response */
  memcpy(data, handle->pn532_packetbuffer + 8, 16);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3317      	adds	r3, #23
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	2210      	movs	r2, #16
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 faf5 	bl	8005498 <memcpy>
  DMSG_STR("Block ");
  DMSG_INT(blockNumber);
  PN532_PrintHexChar(data, 16);
#endif

  return 1;
 8004eae:	2301      	movs	r3, #1
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <PN532_mifareclassic_WriteDataBlock>:

    @returns 1 if everything executed properly, 0 for an error
*/
/**************************************************************************/
uint8_t PN532_mifareclassic_WriteDataBlock(PN532_Handle * handle, uint8_t blockNumber,
                                                     uint8_t *data) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	72fb      	strb	r3, [r7, #11]
  DMSG_STR("Trying to write 16 bytes to block ");
  DMSG_INT(blockNumber);
#endif

  /* Prepare the first command */
  handle->pn532_packetbuffer[0] = PN532_COMMAND_INDATAEXCHANGE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2240      	movs	r2, #64	; 0x40
 8004eca:	75da      	strb	r2, [r3, #23]
  handle->pn532_packetbuffer[1] = 1;                /* Card number */
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	761a      	strb	r2, [r3, #24]
  handle->pn532_packetbuffer[2] = MIFARE_CMD_WRITE; /* Mifare Write command = 0xA0 */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	22a0      	movs	r2, #160	; 0xa0
 8004ed6:	765a      	strb	r2, [r3, #25]
  handle->pn532_packetbuffer[3] =
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	7afa      	ldrb	r2, [r7, #11]
 8004edc:	769a      	strb	r2, [r3, #26]
      blockNumber; /* Block Number (0..63 for 1K, 0..255 for 4K) */
  memcpy(handle->pn532_packetbuffer + 4, data, 16); /* Data Payload */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3317      	adds	r3, #23
 8004ee2:	3304      	adds	r3, #4
 8004ee4:	2210      	movs	r2, #16
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fad5 	bl	8005498 <memcpy>

  /* Send the command */
  if (!PN532_sendCommandCheckAck(handle, handle->pn532_packetbuffer, 20, 1000)) {
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f103 0117 	add.w	r1, r3, #23
 8004ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ef8:	2214      	movs	r2, #20
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff fe20 	bl	8004b40 <PN532_sendCommandCheckAck>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f083 0301 	eor.w	r3, r3, #1
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <PN532_mifareclassic_WriteDataBlock+0x58>
#ifdef MIFAREDEBUG
    DMSG_STR("Failed to receive ACK for write command");
#endif
    return 0;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e00a      	b.n	8004f26 <PN532_mifareclassic_WriteDataBlock+0x6e>
  }
  HAL_Delay(10);
 8004f10:	200a      	movs	r0, #10
 8004f12:	f7fc fee5 	bl	8001ce0 <HAL_Delay>

  /* Read the response packet */
  PN532_readdata(handle, handle->pn532_packetbuffer, 26);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3317      	adds	r3, #23
 8004f1a:	221a      	movs	r2, #26
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f870 	bl	8005004 <PN532_readdata>

  return 1;
 8004f24:	2301      	movs	r3, #1
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <PN532_readack>:
/**************************************************************************/
/*!
    @brief  Tries to read the SPI or I2C ACK signal
*/
/**************************************************************************/
bool PN532_readack(PN532_Handle * handle) {
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint8_t ackbuff[6];

  uint8_t cmd = PN532_SPI_DATAREAD;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	73fb      	strb	r3, [r7, #15]
  handle->interface.write_then_read(&cmd, 1, ackbuff, 6);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685c      	ldr	r4, [r3, #4]
 8004f40:	f107 0210 	add.w	r2, r7, #16
 8004f44:	f107 000f 	add.w	r0, r7, #15
 8004f48:	2306      	movs	r3, #6
 8004f4a:	2101      	movs	r1, #1
 8004f4c:	47a0      	blx	r4

  return (0 == memcmp((char *)ackbuff, (char *)pn532ack, 6));
 8004f4e:	f107 0310 	add.w	r3, r7, #16
 8004f52:	2206      	movs	r2, #6
 8004f54:	4906      	ldr	r1, [pc, #24]	; (8004f70 <PN532_readack+0x40>)
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fa8e 	bl	8005478 <memcmp>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bf0c      	ite	eq
 8004f62:	2301      	moveq	r3, #1
 8004f64:	2300      	movne	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd90      	pop	{r4, r7, pc}
 8004f70:	080064dc 	.word	0x080064dc

08004f74 <PN532_isready>:
/**************************************************************************/
/*!
    @brief  Return true if the PN532 is ready with a response.
*/
/**************************************************************************/
bool PN532_isready(PN532_Handle * handle) {
 8004f74:	b590      	push	{r4, r7, lr}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
    // SPI ready check via Status Request
    uint8_t cmd = PN532_SPI_STATREAD;
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	73fb      	strb	r3, [r7, #15]
    uint8_t reply;
    handle->interface.write_then_read(&cmd, 1, &reply, 1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685c      	ldr	r4, [r3, #4]
 8004f84:	f107 020e 	add.w	r2, r7, #14
 8004f88:	f107 000f 	add.w	r0, r7, #15
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	2101      	movs	r1, #1
 8004f90:	47a0      	blx	r4
    return reply == PN532_SPI_READY;
 8004f92:	7bbb      	ldrb	r3, [r7, #14]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd90      	pop	{r4, r7, pc}
	...

08004fa8 <PN532_waitready>:
    @brief  Waits until the PN532 is ready.

    @param  timeout   Timeout before giving up
*/
/**************************************************************************/
bool PN532_waitready(PN532_Handle * handle, uint16_t timeout) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	807b      	strh	r3, [r7, #2]
  uint16_t timer = 0;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	81fb      	strh	r3, [r7, #14]
  while (!PN532_isready(handle)) {
 8004fb8:	e012      	b.n	8004fe0 <PN532_waitready+0x38>
    if (timeout != 0) {
 8004fba:	887b      	ldrh	r3, [r7, #2]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00c      	beq.n	8004fda <PN532_waitready+0x32>
      timer += 2;
 8004fc0:	89fb      	ldrh	r3, [r7, #14]
 8004fc2:	3302      	adds	r3, #2
 8004fc4:	81fb      	strh	r3, [r7, #14]
      if (timer > timeout) {
 8004fc6:	89fa      	ldrh	r2, [r7, #14]
 8004fc8:	887b      	ldrh	r3, [r7, #2]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d905      	bls.n	8004fda <PN532_waitready+0x32>
#ifdef PN532DEBUG
        DMSG_STR("TIMEOUT!");
 8004fce:	490b      	ldr	r1, [pc, #44]	; (8004ffc <PN532_waitready+0x54>)
 8004fd0:	480b      	ldr	r0, [pc, #44]	; (8005000 <PN532_waitready+0x58>)
 8004fd2:	f000 fa0d 	bl	80053f0 <utils_log_raw>
#endif
        return false;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e00c      	b.n	8004ff4 <PN532_waitready+0x4c>
      }
    }
    HAL_Delay(1);
 8004fda:	2001      	movs	r0, #1
 8004fdc:	f7fc fe80 	bl	8001ce0 <HAL_Delay>
  while (!PN532_isready(handle)) {
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f7ff ffc7 	bl	8004f74 <PN532_isready>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f083 0301 	eor.w	r3, r3, #1
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e3      	bne.n	8004fba <PN532_waitready+0x12>
  }
  return true;
 8004ff2:	2301      	movs	r3, #1
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	080061b0 	.word	0x080061b0
 8005000:	08005eb4 	.word	0x08005eb4

08005004 <PN532_readdata>:

    @param  buff      Pointer to the buffer where data will be written
    @param  n         Number of bytes to be read
*/
/**************************************************************************/
void PN532_readdata(PN532_Handle * handle, uint8_t *buff, uint8_t n) {
 8005004:	b590      	push	{r4, r7, lr}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	71fb      	strb	r3, [r7, #7]
  // SPI read
  uint8_t cmd = PN532_SPI_DATAREAD;
 8005012:	2303      	movs	r3, #3
 8005014:	75bb      	strb	r3, [r7, #22]
  handle->interface.write_then_read(&cmd, 1, buff, n);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685c      	ldr	r4, [r3, #4]
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	f107 0016 	add.w	r0, r7, #22
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	2101      	movs	r1, #1
 8005024:	47a0      	blx	r4
#ifdef PN532DEBUG
  DMSG_STR("Reading: ");
 8005026:	4911      	ldr	r1, [pc, #68]	; (800506c <PN532_readdata+0x68>)
 8005028:	4811      	ldr	r0, [pc, #68]	; (8005070 <PN532_readdata+0x6c>)
 800502a:	f000 f9e1 	bl	80053f0 <utils_log_raw>
  for (uint8_t i = 0; i < n; i++) {
 800502e:	2300      	movs	r3, #0
 8005030:	75fb      	strb	r3, [r7, #23]
 8005032:	e00e      	b.n	8005052 <PN532_readdata+0x4e>
    DMSG_STR(" 0x");
 8005034:	490f      	ldr	r1, [pc, #60]	; (8005074 <PN532_readdata+0x70>)
 8005036:	480e      	ldr	r0, [pc, #56]	; (8005070 <PN532_readdata+0x6c>)
 8005038:	f000 f9da 	bl	80053f0 <utils_log_raw>
    DMSG_HEX(buff[i]);
 800503c:	7dfb      	ldrb	r3, [r7, #23]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	4413      	add	r3, r2
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	480c      	ldr	r0, [pc, #48]	; (8005078 <PN532_readdata+0x74>)
 8005048:	f000 f9d2 	bl	80053f0 <utils_log_raw>
  for (uint8_t i = 0; i < n; i++) {
 800504c:	7dfb      	ldrb	r3, [r7, #23]
 800504e:	3301      	adds	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
 8005052:	7dfa      	ldrb	r2, [r7, #23]
 8005054:	79fb      	ldrb	r3, [r7, #7]
 8005056:	429a      	cmp	r2, r3
 8005058:	d3ec      	bcc.n	8005034 <PN532_readdata+0x30>
  }
  DMSG_STR("\r\n");
 800505a:	4908      	ldr	r1, [pc, #32]	; (800507c <PN532_readdata+0x78>)
 800505c:	4804      	ldr	r0, [pc, #16]	; (8005070 <PN532_readdata+0x6c>)
 800505e:	f000 f9c7 	bl	80053f0 <utils_log_raw>
#endif
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	bd90      	pop	{r4, r7, pc}
 800506a:	bf00      	nop
 800506c:	080061bc 	.word	0x080061bc
 8005070:	08005eb4 	.word	0x08005eb4
 8005074:	080061c8 	.word	0x080061c8
 8005078:	08005eb8 	.word	0x08005eb8
 800507c:	08005ec0 	.word	0x08005ec0

08005080 <PN532_writecommand>:

    @param  cmd       Pointer to the command buffer
    @param  cmdlen    Command length in bytes
*/
/**************************************************************************/
void PN532_writecommand(PN532_Handle * handle, uint8_t *cmd, uint8_t cmdlen) {
 8005080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005084:	b08b      	sub	sp, #44	; 0x2c
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	4613      	mov	r3, r2
 800508e:	71fb      	strb	r3, [r7, #7]
 8005090:	466b      	mov	r3, sp
 8005092:	461e      	mov	r6, r3
  // SPI command write.
  uint8_t checksum;
  uint8_t packet[9 + cmdlen];
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	f103 0109 	add.w	r1, r3, #9
 800509a:	1e4b      	subs	r3, r1, #1
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	460a      	mov	r2, r1
 80050a0:	2300      	movs	r3, #0
 80050a2:	4690      	mov	r8, r2
 80050a4:	4699      	mov	r9, r3
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ba:	460a      	mov	r2, r1
 80050bc:	2300      	movs	r3, #0
 80050be:	4614      	mov	r4, r2
 80050c0:	461d      	mov	r5, r3
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	00eb      	lsls	r3, r5, #3
 80050cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050d0:	00e2      	lsls	r2, r4, #3
 80050d2:	460b      	mov	r3, r1
 80050d4:	3307      	adds	r3, #7
 80050d6:	08db      	lsrs	r3, r3, #3
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	ebad 0d03 	sub.w	sp, sp, r3
 80050de:	466b      	mov	r3, sp
 80050e0:	3300      	adds	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]
  uint8_t *p = packet;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	61fb      	str	r3, [r7, #28]
  cmdlen++;
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	3301      	adds	r3, #1
 80050ec:	71fb      	strb	r3, [r7, #7]

  p[0] = PN532_SPI_DATAWRITE;
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]
  p++;
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61fb      	str	r3, [r7, #28]

  p[0] = PN532_PREAMBLE;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2200      	movs	r2, #0
 80050fe:	701a      	strb	r2, [r3, #0]
  p++;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	3301      	adds	r3, #1
 8005104:	61fb      	str	r3, [r7, #28]
  p[0] = PN532_STARTCODE1;
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
  p++;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	3301      	adds	r3, #1
 8005110:	61fb      	str	r3, [r7, #28]
  p[0] = PN532_STARTCODE2;
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	22ff      	movs	r2, #255	; 0xff
 8005116:	701a      	strb	r2, [r3, #0]
  p++;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	3301      	adds	r3, #1
 800511c:	61fb      	str	r3, [r7, #28]
  checksum = PN532_PREAMBLE + PN532_STARTCODE1 + PN532_STARTCODE2;
 800511e:	23ff      	movs	r3, #255	; 0xff
 8005120:	76fb      	strb	r3, [r7, #27]

  p[0] = cmdlen;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	79fa      	ldrb	r2, [r7, #7]
 8005126:	701a      	strb	r2, [r3, #0]
  p++;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	3301      	adds	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
  p[0] = ~cmdlen + 1;
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	425b      	negs	r3, r3
 8005132:	b2da      	uxtb	r2, r3
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	701a      	strb	r2, [r3, #0]
  p++;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	3301      	adds	r3, #1
 800513c:	61fb      	str	r3, [r7, #28]

  p[0] = PN532_HOSTTOPN532;
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	22d4      	movs	r2, #212	; 0xd4
 8005142:	701a      	strb	r2, [r3, #0]
  p++;
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	3301      	adds	r3, #1
 8005148:	61fb      	str	r3, [r7, #28]
  checksum += PN532_HOSTTOPN532;
 800514a:	7efb      	ldrb	r3, [r7, #27]
 800514c:	3b2c      	subs	r3, #44	; 0x2c
 800514e:	76fb      	strb	r3, [r7, #27]

  for (uint8_t i = 0; i < cmdlen - 1; i++) {
 8005150:	2300      	movs	r3, #0
 8005152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005156:	e016      	b.n	8005186 <PN532_writecommand+0x106>
    p[0] = cmd[i];
 8005158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	4413      	add	r3, r2
 8005160:	781a      	ldrb	r2, [r3, #0]
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	701a      	strb	r2, [r3, #0]
    p++;
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3301      	adds	r3, #1
 800516a:	61fb      	str	r3, [r7, #28]
    checksum += cmd[i];
 800516c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	4413      	add	r3, r2
 8005174:	781a      	ldrb	r2, [r3, #0]
 8005176:	7efb      	ldrb	r3, [r7, #27]
 8005178:	4413      	add	r3, r2
 800517a:	76fb      	strb	r3, [r7, #27]
  for (uint8_t i = 0; i < cmdlen - 1; i++) {
 800517c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005180:	3301      	adds	r3, #1
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005186:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	3b01      	subs	r3, #1
 800518e:	429a      	cmp	r2, r3
 8005190:	dbe2      	blt.n	8005158 <PN532_writecommand+0xd8>
  }

  p[0] = ~checksum;
 8005192:	7efb      	ldrb	r3, [r7, #27]
 8005194:	43db      	mvns	r3, r3
 8005196:	b2da      	uxtb	r2, r3
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	701a      	strb	r2, [r3, #0]
  p++;
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	3301      	adds	r3, #1
 80051a0:	61fb      	str	r3, [r7, #28]
  p[0] = PN532_POSTAMBLE;
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	2200      	movs	r2, #0
 80051a6:	701a      	strb	r2, [r3, #0]
  p++;
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	3301      	adds	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]

#ifdef PN532DEBUG
  DMSG_STR("Sending : ");
 80051ae:	4918      	ldr	r1, [pc, #96]	; (8005210 <PN532_writecommand+0x190>)
 80051b0:	4818      	ldr	r0, [pc, #96]	; (8005214 <PN532_writecommand+0x194>)
 80051b2:	f000 f91d 	bl	80053f0 <utils_log_raw>
  for (int i = 1; i < 8 + cmdlen; i++) {
 80051b6:	2301      	movs	r3, #1
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	e012      	b.n	80051e2 <PN532_writecommand+0x162>
    DMSG_STR("0x");
 80051bc:	4916      	ldr	r1, [pc, #88]	; (8005218 <PN532_writecommand+0x198>)
 80051be:	4815      	ldr	r0, [pc, #84]	; (8005214 <PN532_writecommand+0x194>)
 80051c0:	f000 f916 	bl	80053f0 <utils_log_raw>
    DMSG_HEX(packet[i]);
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	4413      	add	r3, r2
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	4619      	mov	r1, r3
 80051ce:	4813      	ldr	r0, [pc, #76]	; (800521c <PN532_writecommand+0x19c>)
 80051d0:	f000 f90e 	bl	80053f0 <utils_log_raw>
    DMSG_STR(", ");
 80051d4:	4912      	ldr	r1, [pc, #72]	; (8005220 <PN532_writecommand+0x1a0>)
 80051d6:	480f      	ldr	r0, [pc, #60]	; (8005214 <PN532_writecommand+0x194>)
 80051d8:	f000 f90a 	bl	80053f0 <utils_log_raw>
  for (int i = 1; i < 8 + cmdlen; i++) {
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	3301      	adds	r3, #1
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	3307      	adds	r3, #7
 80051e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e8:	429a      	cmp	r2, r3
 80051ea:	dde7      	ble.n	80051bc <PN532_writecommand+0x13c>
  }
  DMSG_STR("\r\n");
 80051ec:	490d      	ldr	r1, [pc, #52]	; (8005224 <PN532_writecommand+0x1a4>)
 80051ee:	4809      	ldr	r0, [pc, #36]	; (8005214 <PN532_writecommand+0x194>)
 80051f0:	f000 f8fe 	bl	80053f0 <utils_log_raw>
#endif

  handle->interface.write(packet, 8 + cmdlen);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	79fa      	ldrb	r2, [r7, #7]
 80051fa:	3208      	adds	r2, #8
 80051fc:	4611      	mov	r1, r2
 80051fe:	6938      	ldr	r0, [r7, #16]
 8005200:	4798      	blx	r3
 8005202:	46b5      	mov	sp, r6
}
 8005204:	bf00      	nop
 8005206:	372c      	adds	r7, #44	; 0x2c
 8005208:	46bd      	mov	sp, r7
 800520a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800520e:	bf00      	nop
 8005210:	08006210 	.word	0x08006210
 8005214:	08005eb4 	.word	0x08005eb4
 8005218:	08005eb0 	.word	0x08005eb0
 800521c:	08005eb8 	.word	0x08005eb8
 8005220:	0800621c 	.word	0x0800621c
 8005224:	08005ec0 	.word	0x08005ec0

08005228 <utils_buffer_init>:
 * 
 * @param buffer Pointer to Buffer Object
 * @return true if OK
 * @return false if Failed
 */
bool utils_buffer_init(utils_buffer_t * buffer, uint16_t sizeOfObject){
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	460b      	mov	r3, r1
 8005232:	807b      	strh	r3, [r7, #2]
    buffer->head = 0;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	605a      	str	r2, [r3, #4]
    buffer->tail = 0;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
    buffer->count = 0;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	609a      	str	r2, [r3, #8]
    buffer->size = sizeOfObject;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	887a      	ldrh	r2, [r7, #2]
 800524a:	f8a3 280c 	strh.w	r2, [r3, #2060]	; 0x80c
    memset(buffer->buffer , 0, sizeof(buffer->buffer));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	330c      	adds	r3, #12
 8005252:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005256:	2100      	movs	r1, #0
 8005258:	4618      	mov	r0, r3
 800525a:	f000 f92b 	bl	80054b4 <memset>
    return true;
 800525e:	2301      	movs	r3, #1
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <utils_buffer_push>:
 * @param data Pointer to data in
 * @param data_size Data Size
 * @return true if OK
 * @return false if Failed
 */
bool utils_buffer_push(utils_buffer_t * buffer, void * object){
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
	uint8_t * data_p = (uint8_t*) object;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	60bb      	str	r3, [r7, #8]
	if(utils_buffer_is_full(buffer)){
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f828 	bl	80052cc <utils_buffer_is_full>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <utils_buffer_push+0x1e>
		return false;
 8005282:	2300      	movs	r3, #0
 8005284:	e01e      	b.n	80052c4 <utils_buffer_push+0x5c>
	}
    for (size_t i = 0; i < buffer->size; i++)
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e013      	b.n	80052b4 <utils_buffer_push+0x4c>
    {
        buffer->buffer[buffer->head] = data_p[i];
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	441a      	add	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	7811      	ldrb	r1, [r2, #0]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	4413      	add	r3, r2
 800529c:	460a      	mov	r2, r1
 800529e:	731a      	strb	r2, [r3, #12]
        buffer->head = (buffer->head + 1) % BUFFER_MAX_SIZE;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	3301      	adds	r3, #1
 80052a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	605a      	str	r2, [r3, #4]
    for (size_t i = 0; i < buffer->size; i++)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	3301      	adds	r3, #1
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f8b3 380c 	ldrh.w	r3, [r3, #2060]	; 0x80c
 80052ba:	461a      	mov	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4293      	cmp	r3, r2
 80052c0:	d3e4      	bcc.n	800528c <utils_buffer_push+0x24>
    }
    return true;
 80052c2:	2301      	movs	r3, #1
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <utils_buffer_is_full>:
        return false;
    }
    memcpy(object, &buffer->buffer[buffer->size], buffer->size);
}

bool utils_buffer_is_full(utils_buffer_t * buffer){
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	size_t remain;
	if(buffer->head >= buffer->tail){
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d308      	bcc.n	80052f2 <utils_buffer_is_full+0x26>
		remain = BUFFER_MAX_SIZE - (buffer->head - buffer->tail);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	e005      	b.n	80052fe <utils_buffer_is_full+0x32>
	}else{
		remain = buffer->tail - buffer->head;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	60fb      	str	r3, [r7, #12]
	}
	if(remain >= buffer->size){
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8b3 380c 	ldrh.w	r3, [r3, #2060]	; 0x80c
 8005304:	461a      	mov	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4293      	cmp	r3, r2
 800530a:	d301      	bcc.n	8005310 <utils_buffer_is_full+0x44>
		return false;
 800530c:	2300      	movs	r3, #0
 800530e:	e000      	b.n	8005312 <utils_buffer_is_full+0x46>
	}else{
		return true;
 8005310:	2301      	movs	r3, #1
	}
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <level_to_color>:
		"ALL"
};

static utils_log_level_t level = UTILS_LOG_ALL;

static char * level_to_color(utils_log_level_t level){
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	4603      	mov	r3, r0
 8005324:	71fb      	strb	r3, [r7, #7]
	return color_str[level];
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	4a03      	ldr	r2, [pc, #12]	; (8005338 <level_to_color+0x1c>)
 800532a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800532e:	4618      	mov	r0, r3
 8005330:	370c      	adds	r7, #12
 8005332:	46bd      	mov	sp, r7
 8005334:	bc80      	pop	{r7}
 8005336:	4770      	bx	lr
 8005338:	20000390 	.word	0x20000390

0800533c <level_to_str>:

static char * level_to_str(utils_log_level_t level){
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	71fb      	strb	r3, [r7, #7]
    return level_str[level];
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	4a03      	ldr	r2, [pc, #12]	; (8005358 <level_to_str+0x1c>)
 800534a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr
 8005358:	200003ac 	.word	0x200003ac

0800535c <utils_log_log>:
void utils_log_init(utils_log_level_t _level){
	level = _level;
};


void utils_log_log(utils_log_level_t _level, const char *file, int line, const char *fmt, ...){
 800535c:	b408      	push	{r3}
 800535e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005360:	b08c      	sub	sp, #48	; 0x30
 8005362:	af06      	add	r7, sp, #24
 8005364:	4603      	mov	r3, r0
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	73fb      	strb	r3, [r7, #15]
    va_list args;
    if(_level > level){
 800536c:	4b1c      	ldr	r3, [pc, #112]	; (80053e0 <utils_log_log+0x84>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	7bfa      	ldrb	r2, [r7, #15]
 8005372:	429a      	cmp	r2, r3
 8005374:	d82c      	bhi.n	80053d0 <utils_log_log+0x74>
        return;
    }
    va_start(args, fmt);
 8005376:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800537a:	613b      	str	r3, [r7, #16]
    va_end(args);
    vsnprintf(message_buffer , UTILS_MAX_LOG_BUFFER , fmt, args);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005384:	4817      	ldr	r0, [pc, #92]	; (80053e4 <utils_log_log+0x88>)
 8005386:	f000 f8fd 	bl	8005584 <vsniprintf>
    int size = snprintf(log_buffer , UTILS_MAX_LOG_BUFFER, "%s%d [%s] %s:%d: %s%s" ,level_to_color(_level), NETIF_GET_TIME_MS() , level_to_str(_level) , file, line, message_buffer,level_to_color(UTILS_LOG_OFF));
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff ffc5 	bl	800531c <level_to_color>
 8005392:	4606      	mov	r6, r0
 8005394:	f7fb fcca 	bl	8000d2c <CLOCK_getTick>
 8005398:	4604      	mov	r4, r0
 800539a:	7bfb      	ldrb	r3, [r7, #15]
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff ffcd 	bl	800533c <level_to_str>
 80053a2:	4605      	mov	r5, r0
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7ff ffb9 	bl	800531c <level_to_color>
 80053aa:	4603      	mov	r3, r0
 80053ac:	9305      	str	r3, [sp, #20]
 80053ae:	4b0d      	ldr	r3, [pc, #52]	; (80053e4 <utils_log_log+0x88>)
 80053b0:	9304      	str	r3, [sp, #16]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	9303      	str	r3, [sp, #12]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	9302      	str	r3, [sp, #8]
 80053ba:	9501      	str	r5, [sp, #4]
 80053bc:	9400      	str	r4, [sp, #0]
 80053be:	4633      	mov	r3, r6
 80053c0:	4a09      	ldr	r2, [pc, #36]	; (80053e8 <utils_log_log+0x8c>)
 80053c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053c6:	4809      	ldr	r0, [pc, #36]	; (80053ec <utils_log_log+0x90>)
 80053c8:	f000 f87c 	bl	80054c4 <sniprintf>
 80053cc:	6178      	str	r0, [r7, #20]
 80053ce:	e000      	b.n	80053d2 <utils_log_log+0x76>
        return;
 80053d0:	bf00      	nop
    UTILS_LOG(log_buffer , size);
}
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80053da:	b001      	add	sp, #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	200003cc 	.word	0x200003cc
 80053e4:	20002d80 	.word	0x20002d80
 80053e8:	08006290 	.word	0x08006290
 80053ec:	20002980 	.word	0x20002980

080053f0 <utils_log_raw>:

void utils_log_raw(const char *fmt, ...){
 80053f0:	b40f      	push	{r0, r1, r2, r3}
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
	va_list args;
    va_start(args, fmt);
 80053f8:	f107 0314 	add.w	r3, r7, #20
 80053fc:	603b      	str	r3, [r7, #0]
    va_end(args);
    size_t len = vsnprintf(message_buffer , UTILS_MAX_LOG_BUFFER , fmt, args);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005406:	4806      	ldr	r0, [pc, #24]	; (8005420 <utils_log_raw+0x30>)
 8005408:	f000 f8bc 	bl	8005584 <vsniprintf>
 800540c:	4603      	mov	r3, r0
 800540e:	607b      	str	r3, [r7, #4]
    UTILS_LOG(message_buffer , len);
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800541a:	b004      	add	sp, #16
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	20002d80 	.word	0x20002d80

08005424 <__errno>:
 8005424:	4b01      	ldr	r3, [pc, #4]	; (800542c <__errno+0x8>)
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	200003d0 	.word	0x200003d0

08005430 <__libc_init_array>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	2600      	movs	r6, #0
 8005434:	4d0c      	ldr	r5, [pc, #48]	; (8005468 <__libc_init_array+0x38>)
 8005436:	4c0d      	ldr	r4, [pc, #52]	; (800546c <__libc_init_array+0x3c>)
 8005438:	1b64      	subs	r4, r4, r5
 800543a:	10a4      	asrs	r4, r4, #2
 800543c:	42a6      	cmp	r6, r4
 800543e:	d109      	bne.n	8005454 <__libc_init_array+0x24>
 8005440:	f000 fcfa 	bl	8005e38 <_init>
 8005444:	2600      	movs	r6, #0
 8005446:	4d0a      	ldr	r5, [pc, #40]	; (8005470 <__libc_init_array+0x40>)
 8005448:	4c0a      	ldr	r4, [pc, #40]	; (8005474 <__libc_init_array+0x44>)
 800544a:	1b64      	subs	r4, r4, r5
 800544c:	10a4      	asrs	r4, r4, #2
 800544e:	42a6      	cmp	r6, r4
 8005450:	d105      	bne.n	800545e <__libc_init_array+0x2e>
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	f855 3b04 	ldr.w	r3, [r5], #4
 8005458:	4798      	blx	r3
 800545a:	3601      	adds	r6, #1
 800545c:	e7ee      	b.n	800543c <__libc_init_array+0xc>
 800545e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005462:	4798      	blx	r3
 8005464:	3601      	adds	r6, #1
 8005466:	e7f2      	b.n	800544e <__libc_init_array+0x1e>
 8005468:	08006518 	.word	0x08006518
 800546c:	08006518 	.word	0x08006518
 8005470:	08006518 	.word	0x08006518
 8005474:	08006520 	.word	0x08006520

08005478 <memcmp>:
 8005478:	b510      	push	{r4, lr}
 800547a:	3901      	subs	r1, #1
 800547c:	4402      	add	r2, r0
 800547e:	4290      	cmp	r0, r2
 8005480:	d101      	bne.n	8005486 <memcmp+0xe>
 8005482:	2000      	movs	r0, #0
 8005484:	e005      	b.n	8005492 <memcmp+0x1a>
 8005486:	7803      	ldrb	r3, [r0, #0]
 8005488:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800548c:	42a3      	cmp	r3, r4
 800548e:	d001      	beq.n	8005494 <memcmp+0x1c>
 8005490:	1b18      	subs	r0, r3, r4
 8005492:	bd10      	pop	{r4, pc}
 8005494:	3001      	adds	r0, #1
 8005496:	e7f2      	b.n	800547e <memcmp+0x6>

08005498 <memcpy>:
 8005498:	440a      	add	r2, r1
 800549a:	4291      	cmp	r1, r2
 800549c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80054a0:	d100      	bne.n	80054a4 <memcpy+0xc>
 80054a2:	4770      	bx	lr
 80054a4:	b510      	push	{r4, lr}
 80054a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054aa:	4291      	cmp	r1, r2
 80054ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054b0:	d1f9      	bne.n	80054a6 <memcpy+0xe>
 80054b2:	bd10      	pop	{r4, pc}

080054b4 <memset>:
 80054b4:	4603      	mov	r3, r0
 80054b6:	4402      	add	r2, r0
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d100      	bne.n	80054be <memset+0xa>
 80054bc:	4770      	bx	lr
 80054be:	f803 1b01 	strb.w	r1, [r3], #1
 80054c2:	e7f9      	b.n	80054b8 <memset+0x4>

080054c4 <sniprintf>:
 80054c4:	b40c      	push	{r2, r3}
 80054c6:	b530      	push	{r4, r5, lr}
 80054c8:	4b17      	ldr	r3, [pc, #92]	; (8005528 <sniprintf+0x64>)
 80054ca:	1e0c      	subs	r4, r1, #0
 80054cc:	681d      	ldr	r5, [r3, #0]
 80054ce:	b09d      	sub	sp, #116	; 0x74
 80054d0:	da08      	bge.n	80054e4 <sniprintf+0x20>
 80054d2:	238b      	movs	r3, #139	; 0x8b
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054d8:	602b      	str	r3, [r5, #0]
 80054da:	b01d      	add	sp, #116	; 0x74
 80054dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054e0:	b002      	add	sp, #8
 80054e2:	4770      	bx	lr
 80054e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80054e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80054ec:	bf0c      	ite	eq
 80054ee:	4623      	moveq	r3, r4
 80054f0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80054f4:	9304      	str	r3, [sp, #16]
 80054f6:	9307      	str	r3, [sp, #28]
 80054f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054fc:	9002      	str	r0, [sp, #8]
 80054fe:	9006      	str	r0, [sp, #24]
 8005500:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005504:	4628      	mov	r0, r5
 8005506:	ab21      	add	r3, sp, #132	; 0x84
 8005508:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800550a:	a902      	add	r1, sp, #8
 800550c:	9301      	str	r3, [sp, #4]
 800550e:	f000 f8a3 	bl	8005658 <_svfiprintf_r>
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	bfbc      	itt	lt
 8005516:	238b      	movlt	r3, #139	; 0x8b
 8005518:	602b      	strlt	r3, [r5, #0]
 800551a:	2c00      	cmp	r4, #0
 800551c:	d0dd      	beq.n	80054da <sniprintf+0x16>
 800551e:	2200      	movs	r2, #0
 8005520:	9b02      	ldr	r3, [sp, #8]
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	e7d9      	b.n	80054da <sniprintf+0x16>
 8005526:	bf00      	nop
 8005528:	200003d0 	.word	0x200003d0

0800552c <_vsniprintf_r>:
 800552c:	b530      	push	{r4, r5, lr}
 800552e:	4614      	mov	r4, r2
 8005530:	2c00      	cmp	r4, #0
 8005532:	4605      	mov	r5, r0
 8005534:	461a      	mov	r2, r3
 8005536:	b09b      	sub	sp, #108	; 0x6c
 8005538:	da05      	bge.n	8005546 <_vsniprintf_r+0x1a>
 800553a:	238b      	movs	r3, #139	; 0x8b
 800553c:	6003      	str	r3, [r0, #0]
 800553e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005542:	b01b      	add	sp, #108	; 0x6c
 8005544:	bd30      	pop	{r4, r5, pc}
 8005546:	f44f 7302 	mov.w	r3, #520	; 0x208
 800554a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800554e:	bf0c      	ite	eq
 8005550:	4623      	moveq	r3, r4
 8005552:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005556:	9302      	str	r3, [sp, #8]
 8005558:	9305      	str	r3, [sp, #20]
 800555a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800555e:	9100      	str	r1, [sp, #0]
 8005560:	9104      	str	r1, [sp, #16]
 8005562:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005566:	4669      	mov	r1, sp
 8005568:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800556a:	f000 f875 	bl	8005658 <_svfiprintf_r>
 800556e:	1c43      	adds	r3, r0, #1
 8005570:	bfbc      	itt	lt
 8005572:	238b      	movlt	r3, #139	; 0x8b
 8005574:	602b      	strlt	r3, [r5, #0]
 8005576:	2c00      	cmp	r4, #0
 8005578:	d0e3      	beq.n	8005542 <_vsniprintf_r+0x16>
 800557a:	2200      	movs	r2, #0
 800557c:	9b00      	ldr	r3, [sp, #0]
 800557e:	701a      	strb	r2, [r3, #0]
 8005580:	e7df      	b.n	8005542 <_vsniprintf_r+0x16>
	...

08005584 <vsniprintf>:
 8005584:	b507      	push	{r0, r1, r2, lr}
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	460a      	mov	r2, r1
 800558c:	4601      	mov	r1, r0
 800558e:	4803      	ldr	r0, [pc, #12]	; (800559c <vsniprintf+0x18>)
 8005590:	6800      	ldr	r0, [r0, #0]
 8005592:	f7ff ffcb 	bl	800552c <_vsniprintf_r>
 8005596:	b003      	add	sp, #12
 8005598:	f85d fb04 	ldr.w	pc, [sp], #4
 800559c:	200003d0 	.word	0x200003d0

080055a0 <__ssputs_r>:
 80055a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a4:	688e      	ldr	r6, [r1, #8]
 80055a6:	4682      	mov	sl, r0
 80055a8:	429e      	cmp	r6, r3
 80055aa:	460c      	mov	r4, r1
 80055ac:	4690      	mov	r8, r2
 80055ae:	461f      	mov	r7, r3
 80055b0:	d838      	bhi.n	8005624 <__ssputs_r+0x84>
 80055b2:	898a      	ldrh	r2, [r1, #12]
 80055b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055b8:	d032      	beq.n	8005620 <__ssputs_r+0x80>
 80055ba:	6825      	ldr	r5, [r4, #0]
 80055bc:	6909      	ldr	r1, [r1, #16]
 80055be:	3301      	adds	r3, #1
 80055c0:	eba5 0901 	sub.w	r9, r5, r1
 80055c4:	6965      	ldr	r5, [r4, #20]
 80055c6:	444b      	add	r3, r9
 80055c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055d0:	106d      	asrs	r5, r5, #1
 80055d2:	429d      	cmp	r5, r3
 80055d4:	bf38      	it	cc
 80055d6:	461d      	movcc	r5, r3
 80055d8:	0553      	lsls	r3, r2, #21
 80055da:	d531      	bpl.n	8005640 <__ssputs_r+0xa0>
 80055dc:	4629      	mov	r1, r5
 80055de:	f000 fb61 	bl	8005ca4 <_malloc_r>
 80055e2:	4606      	mov	r6, r0
 80055e4:	b950      	cbnz	r0, 80055fc <__ssputs_r+0x5c>
 80055e6:	230c      	movs	r3, #12
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055ec:	f8ca 3000 	str.w	r3, [sl]
 80055f0:	89a3      	ldrh	r3, [r4, #12]
 80055f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055f6:	81a3      	strh	r3, [r4, #12]
 80055f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055fc:	464a      	mov	r2, r9
 80055fe:	6921      	ldr	r1, [r4, #16]
 8005600:	f7ff ff4a 	bl	8005498 <memcpy>
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800560a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560e:	81a3      	strh	r3, [r4, #12]
 8005610:	6126      	str	r6, [r4, #16]
 8005612:	444e      	add	r6, r9
 8005614:	6026      	str	r6, [r4, #0]
 8005616:	463e      	mov	r6, r7
 8005618:	6165      	str	r5, [r4, #20]
 800561a:	eba5 0509 	sub.w	r5, r5, r9
 800561e:	60a5      	str	r5, [r4, #8]
 8005620:	42be      	cmp	r6, r7
 8005622:	d900      	bls.n	8005626 <__ssputs_r+0x86>
 8005624:	463e      	mov	r6, r7
 8005626:	4632      	mov	r2, r6
 8005628:	4641      	mov	r1, r8
 800562a:	6820      	ldr	r0, [r4, #0]
 800562c:	f000 fab8 	bl	8005ba0 <memmove>
 8005630:	68a3      	ldr	r3, [r4, #8]
 8005632:	2000      	movs	r0, #0
 8005634:	1b9b      	subs	r3, r3, r6
 8005636:	60a3      	str	r3, [r4, #8]
 8005638:	6823      	ldr	r3, [r4, #0]
 800563a:	4433      	add	r3, r6
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	e7db      	b.n	80055f8 <__ssputs_r+0x58>
 8005640:	462a      	mov	r2, r5
 8005642:	f000 fba3 	bl	8005d8c <_realloc_r>
 8005646:	4606      	mov	r6, r0
 8005648:	2800      	cmp	r0, #0
 800564a:	d1e1      	bne.n	8005610 <__ssputs_r+0x70>
 800564c:	4650      	mov	r0, sl
 800564e:	6921      	ldr	r1, [r4, #16]
 8005650:	f000 fac0 	bl	8005bd4 <_free_r>
 8005654:	e7c7      	b.n	80055e6 <__ssputs_r+0x46>
	...

08005658 <_svfiprintf_r>:
 8005658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565c:	4698      	mov	r8, r3
 800565e:	898b      	ldrh	r3, [r1, #12]
 8005660:	4607      	mov	r7, r0
 8005662:	061b      	lsls	r3, r3, #24
 8005664:	460d      	mov	r5, r1
 8005666:	4614      	mov	r4, r2
 8005668:	b09d      	sub	sp, #116	; 0x74
 800566a:	d50e      	bpl.n	800568a <_svfiprintf_r+0x32>
 800566c:	690b      	ldr	r3, [r1, #16]
 800566e:	b963      	cbnz	r3, 800568a <_svfiprintf_r+0x32>
 8005670:	2140      	movs	r1, #64	; 0x40
 8005672:	f000 fb17 	bl	8005ca4 <_malloc_r>
 8005676:	6028      	str	r0, [r5, #0]
 8005678:	6128      	str	r0, [r5, #16]
 800567a:	b920      	cbnz	r0, 8005686 <_svfiprintf_r+0x2e>
 800567c:	230c      	movs	r3, #12
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005684:	e0d1      	b.n	800582a <_svfiprintf_r+0x1d2>
 8005686:	2340      	movs	r3, #64	; 0x40
 8005688:	616b      	str	r3, [r5, #20]
 800568a:	2300      	movs	r3, #0
 800568c:	9309      	str	r3, [sp, #36]	; 0x24
 800568e:	2320      	movs	r3, #32
 8005690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005694:	2330      	movs	r3, #48	; 0x30
 8005696:	f04f 0901 	mov.w	r9, #1
 800569a:	f8cd 800c 	str.w	r8, [sp, #12]
 800569e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005844 <_svfiprintf_r+0x1ec>
 80056a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056a6:	4623      	mov	r3, r4
 80056a8:	469a      	mov	sl, r3
 80056aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ae:	b10a      	cbz	r2, 80056b4 <_svfiprintf_r+0x5c>
 80056b0:	2a25      	cmp	r2, #37	; 0x25
 80056b2:	d1f9      	bne.n	80056a8 <_svfiprintf_r+0x50>
 80056b4:	ebba 0b04 	subs.w	fp, sl, r4
 80056b8:	d00b      	beq.n	80056d2 <_svfiprintf_r+0x7a>
 80056ba:	465b      	mov	r3, fp
 80056bc:	4622      	mov	r2, r4
 80056be:	4629      	mov	r1, r5
 80056c0:	4638      	mov	r0, r7
 80056c2:	f7ff ff6d 	bl	80055a0 <__ssputs_r>
 80056c6:	3001      	adds	r0, #1
 80056c8:	f000 80aa 	beq.w	8005820 <_svfiprintf_r+0x1c8>
 80056cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ce:	445a      	add	r2, fp
 80056d0:	9209      	str	r2, [sp, #36]	; 0x24
 80056d2:	f89a 3000 	ldrb.w	r3, [sl]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 80a2 	beq.w	8005820 <_svfiprintf_r+0x1c8>
 80056dc:	2300      	movs	r3, #0
 80056de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056e6:	f10a 0a01 	add.w	sl, sl, #1
 80056ea:	9304      	str	r3, [sp, #16]
 80056ec:	9307      	str	r3, [sp, #28]
 80056ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056f2:	931a      	str	r3, [sp, #104]	; 0x68
 80056f4:	4654      	mov	r4, sl
 80056f6:	2205      	movs	r2, #5
 80056f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056fc:	4851      	ldr	r0, [pc, #324]	; (8005844 <_svfiprintf_r+0x1ec>)
 80056fe:	f000 fa41 	bl	8005b84 <memchr>
 8005702:	9a04      	ldr	r2, [sp, #16]
 8005704:	b9d8      	cbnz	r0, 800573e <_svfiprintf_r+0xe6>
 8005706:	06d0      	lsls	r0, r2, #27
 8005708:	bf44      	itt	mi
 800570a:	2320      	movmi	r3, #32
 800570c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005710:	0711      	lsls	r1, r2, #28
 8005712:	bf44      	itt	mi
 8005714:	232b      	movmi	r3, #43	; 0x2b
 8005716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800571a:	f89a 3000 	ldrb.w	r3, [sl]
 800571e:	2b2a      	cmp	r3, #42	; 0x2a
 8005720:	d015      	beq.n	800574e <_svfiprintf_r+0xf6>
 8005722:	4654      	mov	r4, sl
 8005724:	2000      	movs	r0, #0
 8005726:	f04f 0c0a 	mov.w	ip, #10
 800572a:	9a07      	ldr	r2, [sp, #28]
 800572c:	4621      	mov	r1, r4
 800572e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005732:	3b30      	subs	r3, #48	; 0x30
 8005734:	2b09      	cmp	r3, #9
 8005736:	d94e      	bls.n	80057d6 <_svfiprintf_r+0x17e>
 8005738:	b1b0      	cbz	r0, 8005768 <_svfiprintf_r+0x110>
 800573a:	9207      	str	r2, [sp, #28]
 800573c:	e014      	b.n	8005768 <_svfiprintf_r+0x110>
 800573e:	eba0 0308 	sub.w	r3, r0, r8
 8005742:	fa09 f303 	lsl.w	r3, r9, r3
 8005746:	4313      	orrs	r3, r2
 8005748:	46a2      	mov	sl, r4
 800574a:	9304      	str	r3, [sp, #16]
 800574c:	e7d2      	b.n	80056f4 <_svfiprintf_r+0x9c>
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	1d19      	adds	r1, r3, #4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	9103      	str	r1, [sp, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	bfbb      	ittet	lt
 800575a:	425b      	neglt	r3, r3
 800575c:	f042 0202 	orrlt.w	r2, r2, #2
 8005760:	9307      	strge	r3, [sp, #28]
 8005762:	9307      	strlt	r3, [sp, #28]
 8005764:	bfb8      	it	lt
 8005766:	9204      	strlt	r2, [sp, #16]
 8005768:	7823      	ldrb	r3, [r4, #0]
 800576a:	2b2e      	cmp	r3, #46	; 0x2e
 800576c:	d10c      	bne.n	8005788 <_svfiprintf_r+0x130>
 800576e:	7863      	ldrb	r3, [r4, #1]
 8005770:	2b2a      	cmp	r3, #42	; 0x2a
 8005772:	d135      	bne.n	80057e0 <_svfiprintf_r+0x188>
 8005774:	9b03      	ldr	r3, [sp, #12]
 8005776:	3402      	adds	r4, #2
 8005778:	1d1a      	adds	r2, r3, #4
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	9203      	str	r2, [sp, #12]
 800577e:	2b00      	cmp	r3, #0
 8005780:	bfb8      	it	lt
 8005782:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005786:	9305      	str	r3, [sp, #20]
 8005788:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005848 <_svfiprintf_r+0x1f0>
 800578c:	2203      	movs	r2, #3
 800578e:	4650      	mov	r0, sl
 8005790:	7821      	ldrb	r1, [r4, #0]
 8005792:	f000 f9f7 	bl	8005b84 <memchr>
 8005796:	b140      	cbz	r0, 80057aa <_svfiprintf_r+0x152>
 8005798:	2340      	movs	r3, #64	; 0x40
 800579a:	eba0 000a 	sub.w	r0, r0, sl
 800579e:	fa03 f000 	lsl.w	r0, r3, r0
 80057a2:	9b04      	ldr	r3, [sp, #16]
 80057a4:	3401      	adds	r4, #1
 80057a6:	4303      	orrs	r3, r0
 80057a8:	9304      	str	r3, [sp, #16]
 80057aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ae:	2206      	movs	r2, #6
 80057b0:	4826      	ldr	r0, [pc, #152]	; (800584c <_svfiprintf_r+0x1f4>)
 80057b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057b6:	f000 f9e5 	bl	8005b84 <memchr>
 80057ba:	2800      	cmp	r0, #0
 80057bc:	d038      	beq.n	8005830 <_svfiprintf_r+0x1d8>
 80057be:	4b24      	ldr	r3, [pc, #144]	; (8005850 <_svfiprintf_r+0x1f8>)
 80057c0:	bb1b      	cbnz	r3, 800580a <_svfiprintf_r+0x1b2>
 80057c2:	9b03      	ldr	r3, [sp, #12]
 80057c4:	3307      	adds	r3, #7
 80057c6:	f023 0307 	bic.w	r3, r3, #7
 80057ca:	3308      	adds	r3, #8
 80057cc:	9303      	str	r3, [sp, #12]
 80057ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d0:	4433      	add	r3, r6
 80057d2:	9309      	str	r3, [sp, #36]	; 0x24
 80057d4:	e767      	b.n	80056a6 <_svfiprintf_r+0x4e>
 80057d6:	460c      	mov	r4, r1
 80057d8:	2001      	movs	r0, #1
 80057da:	fb0c 3202 	mla	r2, ip, r2, r3
 80057de:	e7a5      	b.n	800572c <_svfiprintf_r+0xd4>
 80057e0:	2300      	movs	r3, #0
 80057e2:	f04f 0c0a 	mov.w	ip, #10
 80057e6:	4619      	mov	r1, r3
 80057e8:	3401      	adds	r4, #1
 80057ea:	9305      	str	r3, [sp, #20]
 80057ec:	4620      	mov	r0, r4
 80057ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057f2:	3a30      	subs	r2, #48	; 0x30
 80057f4:	2a09      	cmp	r2, #9
 80057f6:	d903      	bls.n	8005800 <_svfiprintf_r+0x1a8>
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d0c5      	beq.n	8005788 <_svfiprintf_r+0x130>
 80057fc:	9105      	str	r1, [sp, #20]
 80057fe:	e7c3      	b.n	8005788 <_svfiprintf_r+0x130>
 8005800:	4604      	mov	r4, r0
 8005802:	2301      	movs	r3, #1
 8005804:	fb0c 2101 	mla	r1, ip, r1, r2
 8005808:	e7f0      	b.n	80057ec <_svfiprintf_r+0x194>
 800580a:	ab03      	add	r3, sp, #12
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	462a      	mov	r2, r5
 8005810:	4638      	mov	r0, r7
 8005812:	4b10      	ldr	r3, [pc, #64]	; (8005854 <_svfiprintf_r+0x1fc>)
 8005814:	a904      	add	r1, sp, #16
 8005816:	f3af 8000 	nop.w
 800581a:	1c42      	adds	r2, r0, #1
 800581c:	4606      	mov	r6, r0
 800581e:	d1d6      	bne.n	80057ce <_svfiprintf_r+0x176>
 8005820:	89ab      	ldrh	r3, [r5, #12]
 8005822:	065b      	lsls	r3, r3, #25
 8005824:	f53f af2c 	bmi.w	8005680 <_svfiprintf_r+0x28>
 8005828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800582a:	b01d      	add	sp, #116	; 0x74
 800582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005830:	ab03      	add	r3, sp, #12
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	462a      	mov	r2, r5
 8005836:	4638      	mov	r0, r7
 8005838:	4b06      	ldr	r3, [pc, #24]	; (8005854 <_svfiprintf_r+0x1fc>)
 800583a:	a904      	add	r1, sp, #16
 800583c:	f000 f87c 	bl	8005938 <_printf_i>
 8005840:	e7eb      	b.n	800581a <_svfiprintf_r+0x1c2>
 8005842:	bf00      	nop
 8005844:	080064e2 	.word	0x080064e2
 8005848:	080064e8 	.word	0x080064e8
 800584c:	080064ec 	.word	0x080064ec
 8005850:	00000000 	.word	0x00000000
 8005854:	080055a1 	.word	0x080055a1

08005858 <_printf_common>:
 8005858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800585c:	4616      	mov	r6, r2
 800585e:	4699      	mov	r9, r3
 8005860:	688a      	ldr	r2, [r1, #8]
 8005862:	690b      	ldr	r3, [r1, #16]
 8005864:	4607      	mov	r7, r0
 8005866:	4293      	cmp	r3, r2
 8005868:	bfb8      	it	lt
 800586a:	4613      	movlt	r3, r2
 800586c:	6033      	str	r3, [r6, #0]
 800586e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005872:	460c      	mov	r4, r1
 8005874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005878:	b10a      	cbz	r2, 800587e <_printf_common+0x26>
 800587a:	3301      	adds	r3, #1
 800587c:	6033      	str	r3, [r6, #0]
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	0699      	lsls	r1, r3, #26
 8005882:	bf42      	ittt	mi
 8005884:	6833      	ldrmi	r3, [r6, #0]
 8005886:	3302      	addmi	r3, #2
 8005888:	6033      	strmi	r3, [r6, #0]
 800588a:	6825      	ldr	r5, [r4, #0]
 800588c:	f015 0506 	ands.w	r5, r5, #6
 8005890:	d106      	bne.n	80058a0 <_printf_common+0x48>
 8005892:	f104 0a19 	add.w	sl, r4, #25
 8005896:	68e3      	ldr	r3, [r4, #12]
 8005898:	6832      	ldr	r2, [r6, #0]
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	42ab      	cmp	r3, r5
 800589e:	dc28      	bgt.n	80058f2 <_printf_common+0x9a>
 80058a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058a4:	1e13      	subs	r3, r2, #0
 80058a6:	6822      	ldr	r2, [r4, #0]
 80058a8:	bf18      	it	ne
 80058aa:	2301      	movne	r3, #1
 80058ac:	0692      	lsls	r2, r2, #26
 80058ae:	d42d      	bmi.n	800590c <_printf_common+0xb4>
 80058b0:	4649      	mov	r1, r9
 80058b2:	4638      	mov	r0, r7
 80058b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058b8:	47c0      	blx	r8
 80058ba:	3001      	adds	r0, #1
 80058bc:	d020      	beq.n	8005900 <_printf_common+0xa8>
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	68e5      	ldr	r5, [r4, #12]
 80058c2:	f003 0306 	and.w	r3, r3, #6
 80058c6:	2b04      	cmp	r3, #4
 80058c8:	bf18      	it	ne
 80058ca:	2500      	movne	r5, #0
 80058cc:	6832      	ldr	r2, [r6, #0]
 80058ce:	f04f 0600 	mov.w	r6, #0
 80058d2:	68a3      	ldr	r3, [r4, #8]
 80058d4:	bf08      	it	eq
 80058d6:	1aad      	subeq	r5, r5, r2
 80058d8:	6922      	ldr	r2, [r4, #16]
 80058da:	bf08      	it	eq
 80058dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058e0:	4293      	cmp	r3, r2
 80058e2:	bfc4      	itt	gt
 80058e4:	1a9b      	subgt	r3, r3, r2
 80058e6:	18ed      	addgt	r5, r5, r3
 80058e8:	341a      	adds	r4, #26
 80058ea:	42b5      	cmp	r5, r6
 80058ec:	d11a      	bne.n	8005924 <_printf_common+0xcc>
 80058ee:	2000      	movs	r0, #0
 80058f0:	e008      	b.n	8005904 <_printf_common+0xac>
 80058f2:	2301      	movs	r3, #1
 80058f4:	4652      	mov	r2, sl
 80058f6:	4649      	mov	r1, r9
 80058f8:	4638      	mov	r0, r7
 80058fa:	47c0      	blx	r8
 80058fc:	3001      	adds	r0, #1
 80058fe:	d103      	bne.n	8005908 <_printf_common+0xb0>
 8005900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005908:	3501      	adds	r5, #1
 800590a:	e7c4      	b.n	8005896 <_printf_common+0x3e>
 800590c:	2030      	movs	r0, #48	; 0x30
 800590e:	18e1      	adds	r1, r4, r3
 8005910:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005914:	1c5a      	adds	r2, r3, #1
 8005916:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800591a:	4422      	add	r2, r4
 800591c:	3302      	adds	r3, #2
 800591e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005922:	e7c5      	b.n	80058b0 <_printf_common+0x58>
 8005924:	2301      	movs	r3, #1
 8005926:	4622      	mov	r2, r4
 8005928:	4649      	mov	r1, r9
 800592a:	4638      	mov	r0, r7
 800592c:	47c0      	blx	r8
 800592e:	3001      	adds	r0, #1
 8005930:	d0e6      	beq.n	8005900 <_printf_common+0xa8>
 8005932:	3601      	adds	r6, #1
 8005934:	e7d9      	b.n	80058ea <_printf_common+0x92>
	...

08005938 <_printf_i>:
 8005938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	7e0f      	ldrb	r7, [r1, #24]
 800593e:	4691      	mov	r9, r2
 8005940:	2f78      	cmp	r7, #120	; 0x78
 8005942:	4680      	mov	r8, r0
 8005944:	460c      	mov	r4, r1
 8005946:	469a      	mov	sl, r3
 8005948:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800594a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800594e:	d807      	bhi.n	8005960 <_printf_i+0x28>
 8005950:	2f62      	cmp	r7, #98	; 0x62
 8005952:	d80a      	bhi.n	800596a <_printf_i+0x32>
 8005954:	2f00      	cmp	r7, #0
 8005956:	f000 80d9 	beq.w	8005b0c <_printf_i+0x1d4>
 800595a:	2f58      	cmp	r7, #88	; 0x58
 800595c:	f000 80a4 	beq.w	8005aa8 <_printf_i+0x170>
 8005960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005968:	e03a      	b.n	80059e0 <_printf_i+0xa8>
 800596a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800596e:	2b15      	cmp	r3, #21
 8005970:	d8f6      	bhi.n	8005960 <_printf_i+0x28>
 8005972:	a101      	add	r1, pc, #4	; (adr r1, 8005978 <_printf_i+0x40>)
 8005974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005978:	080059d1 	.word	0x080059d1
 800597c:	080059e5 	.word	0x080059e5
 8005980:	08005961 	.word	0x08005961
 8005984:	08005961 	.word	0x08005961
 8005988:	08005961 	.word	0x08005961
 800598c:	08005961 	.word	0x08005961
 8005990:	080059e5 	.word	0x080059e5
 8005994:	08005961 	.word	0x08005961
 8005998:	08005961 	.word	0x08005961
 800599c:	08005961 	.word	0x08005961
 80059a0:	08005961 	.word	0x08005961
 80059a4:	08005af3 	.word	0x08005af3
 80059a8:	08005a15 	.word	0x08005a15
 80059ac:	08005ad5 	.word	0x08005ad5
 80059b0:	08005961 	.word	0x08005961
 80059b4:	08005961 	.word	0x08005961
 80059b8:	08005b15 	.word	0x08005b15
 80059bc:	08005961 	.word	0x08005961
 80059c0:	08005a15 	.word	0x08005a15
 80059c4:	08005961 	.word	0x08005961
 80059c8:	08005961 	.word	0x08005961
 80059cc:	08005add 	.word	0x08005add
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	1d1a      	adds	r2, r3, #4
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	602a      	str	r2, [r5, #0]
 80059d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059e0:	2301      	movs	r3, #1
 80059e2:	e0a4      	b.n	8005b2e <_printf_i+0x1f6>
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	6829      	ldr	r1, [r5, #0]
 80059e8:	0606      	lsls	r6, r0, #24
 80059ea:	f101 0304 	add.w	r3, r1, #4
 80059ee:	d50a      	bpl.n	8005a06 <_printf_i+0xce>
 80059f0:	680e      	ldr	r6, [r1, #0]
 80059f2:	602b      	str	r3, [r5, #0]
 80059f4:	2e00      	cmp	r6, #0
 80059f6:	da03      	bge.n	8005a00 <_printf_i+0xc8>
 80059f8:	232d      	movs	r3, #45	; 0x2d
 80059fa:	4276      	negs	r6, r6
 80059fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a00:	230a      	movs	r3, #10
 8005a02:	485e      	ldr	r0, [pc, #376]	; (8005b7c <_printf_i+0x244>)
 8005a04:	e019      	b.n	8005a3a <_printf_i+0x102>
 8005a06:	680e      	ldr	r6, [r1, #0]
 8005a08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005a0c:	602b      	str	r3, [r5, #0]
 8005a0e:	bf18      	it	ne
 8005a10:	b236      	sxthne	r6, r6
 8005a12:	e7ef      	b.n	80059f4 <_printf_i+0xbc>
 8005a14:	682b      	ldr	r3, [r5, #0]
 8005a16:	6820      	ldr	r0, [r4, #0]
 8005a18:	1d19      	adds	r1, r3, #4
 8005a1a:	6029      	str	r1, [r5, #0]
 8005a1c:	0601      	lsls	r1, r0, #24
 8005a1e:	d501      	bpl.n	8005a24 <_printf_i+0xec>
 8005a20:	681e      	ldr	r6, [r3, #0]
 8005a22:	e002      	b.n	8005a2a <_printf_i+0xf2>
 8005a24:	0646      	lsls	r6, r0, #25
 8005a26:	d5fb      	bpl.n	8005a20 <_printf_i+0xe8>
 8005a28:	881e      	ldrh	r6, [r3, #0]
 8005a2a:	2f6f      	cmp	r7, #111	; 0x6f
 8005a2c:	bf0c      	ite	eq
 8005a2e:	2308      	moveq	r3, #8
 8005a30:	230a      	movne	r3, #10
 8005a32:	4852      	ldr	r0, [pc, #328]	; (8005b7c <_printf_i+0x244>)
 8005a34:	2100      	movs	r1, #0
 8005a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a3a:	6865      	ldr	r5, [r4, #4]
 8005a3c:	2d00      	cmp	r5, #0
 8005a3e:	bfa8      	it	ge
 8005a40:	6821      	ldrge	r1, [r4, #0]
 8005a42:	60a5      	str	r5, [r4, #8]
 8005a44:	bfa4      	itt	ge
 8005a46:	f021 0104 	bicge.w	r1, r1, #4
 8005a4a:	6021      	strge	r1, [r4, #0]
 8005a4c:	b90e      	cbnz	r6, 8005a52 <_printf_i+0x11a>
 8005a4e:	2d00      	cmp	r5, #0
 8005a50:	d04d      	beq.n	8005aee <_printf_i+0x1b6>
 8005a52:	4615      	mov	r5, r2
 8005a54:	fbb6 f1f3 	udiv	r1, r6, r3
 8005a58:	fb03 6711 	mls	r7, r3, r1, r6
 8005a5c:	5dc7      	ldrb	r7, [r0, r7]
 8005a5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005a62:	4637      	mov	r7, r6
 8005a64:	42bb      	cmp	r3, r7
 8005a66:	460e      	mov	r6, r1
 8005a68:	d9f4      	bls.n	8005a54 <_printf_i+0x11c>
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d10b      	bne.n	8005a86 <_printf_i+0x14e>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	07de      	lsls	r6, r3, #31
 8005a72:	d508      	bpl.n	8005a86 <_printf_i+0x14e>
 8005a74:	6923      	ldr	r3, [r4, #16]
 8005a76:	6861      	ldr	r1, [r4, #4]
 8005a78:	4299      	cmp	r1, r3
 8005a7a:	bfde      	ittt	le
 8005a7c:	2330      	movle	r3, #48	; 0x30
 8005a7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005a86:	1b52      	subs	r2, r2, r5
 8005a88:	6122      	str	r2, [r4, #16]
 8005a8a:	464b      	mov	r3, r9
 8005a8c:	4621      	mov	r1, r4
 8005a8e:	4640      	mov	r0, r8
 8005a90:	f8cd a000 	str.w	sl, [sp]
 8005a94:	aa03      	add	r2, sp, #12
 8005a96:	f7ff fedf 	bl	8005858 <_printf_common>
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d14c      	bne.n	8005b38 <_printf_i+0x200>
 8005a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005aa2:	b004      	add	sp, #16
 8005aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa8:	4834      	ldr	r0, [pc, #208]	; (8005b7c <_printf_i+0x244>)
 8005aaa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005aae:	6829      	ldr	r1, [r5, #0]
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ab6:	6029      	str	r1, [r5, #0]
 8005ab8:	061d      	lsls	r5, r3, #24
 8005aba:	d514      	bpl.n	8005ae6 <_printf_i+0x1ae>
 8005abc:	07df      	lsls	r7, r3, #31
 8005abe:	bf44      	itt	mi
 8005ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ac4:	6023      	strmi	r3, [r4, #0]
 8005ac6:	b91e      	cbnz	r6, 8005ad0 <_printf_i+0x198>
 8005ac8:	6823      	ldr	r3, [r4, #0]
 8005aca:	f023 0320 	bic.w	r3, r3, #32
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	e7af      	b.n	8005a34 <_printf_i+0xfc>
 8005ad4:	6823      	ldr	r3, [r4, #0]
 8005ad6:	f043 0320 	orr.w	r3, r3, #32
 8005ada:	6023      	str	r3, [r4, #0]
 8005adc:	2378      	movs	r3, #120	; 0x78
 8005ade:	4828      	ldr	r0, [pc, #160]	; (8005b80 <_printf_i+0x248>)
 8005ae0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ae4:	e7e3      	b.n	8005aae <_printf_i+0x176>
 8005ae6:	0659      	lsls	r1, r3, #25
 8005ae8:	bf48      	it	mi
 8005aea:	b2b6      	uxthmi	r6, r6
 8005aec:	e7e6      	b.n	8005abc <_printf_i+0x184>
 8005aee:	4615      	mov	r5, r2
 8005af0:	e7bb      	b.n	8005a6a <_printf_i+0x132>
 8005af2:	682b      	ldr	r3, [r5, #0]
 8005af4:	6826      	ldr	r6, [r4, #0]
 8005af6:	1d18      	adds	r0, r3, #4
 8005af8:	6961      	ldr	r1, [r4, #20]
 8005afa:	6028      	str	r0, [r5, #0]
 8005afc:	0635      	lsls	r5, r6, #24
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	d501      	bpl.n	8005b06 <_printf_i+0x1ce>
 8005b02:	6019      	str	r1, [r3, #0]
 8005b04:	e002      	b.n	8005b0c <_printf_i+0x1d4>
 8005b06:	0670      	lsls	r0, r6, #25
 8005b08:	d5fb      	bpl.n	8005b02 <_printf_i+0x1ca>
 8005b0a:	8019      	strh	r1, [r3, #0]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	4615      	mov	r5, r2
 8005b10:	6123      	str	r3, [r4, #16]
 8005b12:	e7ba      	b.n	8005a8a <_printf_i+0x152>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	2100      	movs	r1, #0
 8005b18:	1d1a      	adds	r2, r3, #4
 8005b1a:	602a      	str	r2, [r5, #0]
 8005b1c:	681d      	ldr	r5, [r3, #0]
 8005b1e:	6862      	ldr	r2, [r4, #4]
 8005b20:	4628      	mov	r0, r5
 8005b22:	f000 f82f 	bl	8005b84 <memchr>
 8005b26:	b108      	cbz	r0, 8005b2c <_printf_i+0x1f4>
 8005b28:	1b40      	subs	r0, r0, r5
 8005b2a:	6060      	str	r0, [r4, #4]
 8005b2c:	6863      	ldr	r3, [r4, #4]
 8005b2e:	6123      	str	r3, [r4, #16]
 8005b30:	2300      	movs	r3, #0
 8005b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b36:	e7a8      	b.n	8005a8a <_printf_i+0x152>
 8005b38:	462a      	mov	r2, r5
 8005b3a:	4649      	mov	r1, r9
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	47d0      	blx	sl
 8005b42:	3001      	adds	r0, #1
 8005b44:	d0ab      	beq.n	8005a9e <_printf_i+0x166>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	079b      	lsls	r3, r3, #30
 8005b4a:	d413      	bmi.n	8005b74 <_printf_i+0x23c>
 8005b4c:	68e0      	ldr	r0, [r4, #12]
 8005b4e:	9b03      	ldr	r3, [sp, #12]
 8005b50:	4298      	cmp	r0, r3
 8005b52:	bfb8      	it	lt
 8005b54:	4618      	movlt	r0, r3
 8005b56:	e7a4      	b.n	8005aa2 <_printf_i+0x16a>
 8005b58:	2301      	movs	r3, #1
 8005b5a:	4632      	mov	r2, r6
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	4640      	mov	r0, r8
 8005b60:	47d0      	blx	sl
 8005b62:	3001      	adds	r0, #1
 8005b64:	d09b      	beq.n	8005a9e <_printf_i+0x166>
 8005b66:	3501      	adds	r5, #1
 8005b68:	68e3      	ldr	r3, [r4, #12]
 8005b6a:	9903      	ldr	r1, [sp, #12]
 8005b6c:	1a5b      	subs	r3, r3, r1
 8005b6e:	42ab      	cmp	r3, r5
 8005b70:	dcf2      	bgt.n	8005b58 <_printf_i+0x220>
 8005b72:	e7eb      	b.n	8005b4c <_printf_i+0x214>
 8005b74:	2500      	movs	r5, #0
 8005b76:	f104 0619 	add.w	r6, r4, #25
 8005b7a:	e7f5      	b.n	8005b68 <_printf_i+0x230>
 8005b7c:	080064f3 	.word	0x080064f3
 8005b80:	08006504 	.word	0x08006504

08005b84 <memchr>:
 8005b84:	4603      	mov	r3, r0
 8005b86:	b510      	push	{r4, lr}
 8005b88:	b2c9      	uxtb	r1, r1
 8005b8a:	4402      	add	r2, r0
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	d101      	bne.n	8005b96 <memchr+0x12>
 8005b92:	2000      	movs	r0, #0
 8005b94:	e003      	b.n	8005b9e <memchr+0x1a>
 8005b96:	7804      	ldrb	r4, [r0, #0]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	428c      	cmp	r4, r1
 8005b9c:	d1f6      	bne.n	8005b8c <memchr+0x8>
 8005b9e:	bd10      	pop	{r4, pc}

08005ba0 <memmove>:
 8005ba0:	4288      	cmp	r0, r1
 8005ba2:	b510      	push	{r4, lr}
 8005ba4:	eb01 0402 	add.w	r4, r1, r2
 8005ba8:	d902      	bls.n	8005bb0 <memmove+0x10>
 8005baa:	4284      	cmp	r4, r0
 8005bac:	4623      	mov	r3, r4
 8005bae:	d807      	bhi.n	8005bc0 <memmove+0x20>
 8005bb0:	1e43      	subs	r3, r0, #1
 8005bb2:	42a1      	cmp	r1, r4
 8005bb4:	d008      	beq.n	8005bc8 <memmove+0x28>
 8005bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bbe:	e7f8      	b.n	8005bb2 <memmove+0x12>
 8005bc0:	4601      	mov	r1, r0
 8005bc2:	4402      	add	r2, r0
 8005bc4:	428a      	cmp	r2, r1
 8005bc6:	d100      	bne.n	8005bca <memmove+0x2a>
 8005bc8:	bd10      	pop	{r4, pc}
 8005bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005bd2:	e7f7      	b.n	8005bc4 <memmove+0x24>

08005bd4 <_free_r>:
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	2900      	cmp	r1, #0
 8005bda:	d040      	beq.n	8005c5e <_free_r+0x8a>
 8005bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005be0:	1f0c      	subs	r4, r1, #4
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	bfb8      	it	lt
 8005be6:	18e4      	addlt	r4, r4, r3
 8005be8:	f000 f910 	bl	8005e0c <__malloc_lock>
 8005bec:	4a1c      	ldr	r2, [pc, #112]	; (8005c60 <_free_r+0x8c>)
 8005bee:	6813      	ldr	r3, [r2, #0]
 8005bf0:	b933      	cbnz	r3, 8005c00 <_free_r+0x2c>
 8005bf2:	6063      	str	r3, [r4, #4]
 8005bf4:	6014      	str	r4, [r2, #0]
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bfc:	f000 b90c 	b.w	8005e18 <__malloc_unlock>
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	d908      	bls.n	8005c16 <_free_r+0x42>
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	1821      	adds	r1, r4, r0
 8005c08:	428b      	cmp	r3, r1
 8005c0a:	bf01      	itttt	eq
 8005c0c:	6819      	ldreq	r1, [r3, #0]
 8005c0e:	685b      	ldreq	r3, [r3, #4]
 8005c10:	1809      	addeq	r1, r1, r0
 8005c12:	6021      	streq	r1, [r4, #0]
 8005c14:	e7ed      	b.n	8005bf2 <_free_r+0x1e>
 8005c16:	461a      	mov	r2, r3
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	b10b      	cbz	r3, 8005c20 <_free_r+0x4c>
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	d9fa      	bls.n	8005c16 <_free_r+0x42>
 8005c20:	6811      	ldr	r1, [r2, #0]
 8005c22:	1850      	adds	r0, r2, r1
 8005c24:	42a0      	cmp	r0, r4
 8005c26:	d10b      	bne.n	8005c40 <_free_r+0x6c>
 8005c28:	6820      	ldr	r0, [r4, #0]
 8005c2a:	4401      	add	r1, r0
 8005c2c:	1850      	adds	r0, r2, r1
 8005c2e:	4283      	cmp	r3, r0
 8005c30:	6011      	str	r1, [r2, #0]
 8005c32:	d1e0      	bne.n	8005bf6 <_free_r+0x22>
 8005c34:	6818      	ldr	r0, [r3, #0]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	4401      	add	r1, r0
 8005c3a:	6011      	str	r1, [r2, #0]
 8005c3c:	6053      	str	r3, [r2, #4]
 8005c3e:	e7da      	b.n	8005bf6 <_free_r+0x22>
 8005c40:	d902      	bls.n	8005c48 <_free_r+0x74>
 8005c42:	230c      	movs	r3, #12
 8005c44:	602b      	str	r3, [r5, #0]
 8005c46:	e7d6      	b.n	8005bf6 <_free_r+0x22>
 8005c48:	6820      	ldr	r0, [r4, #0]
 8005c4a:	1821      	adds	r1, r4, r0
 8005c4c:	428b      	cmp	r3, r1
 8005c4e:	bf01      	itttt	eq
 8005c50:	6819      	ldreq	r1, [r3, #0]
 8005c52:	685b      	ldreq	r3, [r3, #4]
 8005c54:	1809      	addeq	r1, r1, r0
 8005c56:	6021      	streq	r1, [r4, #0]
 8005c58:	6063      	str	r3, [r4, #4]
 8005c5a:	6054      	str	r4, [r2, #4]
 8005c5c:	e7cb      	b.n	8005bf6 <_free_r+0x22>
 8005c5e:	bd38      	pop	{r3, r4, r5, pc}
 8005c60:	20003180 	.word	0x20003180

08005c64 <sbrk_aligned>:
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	4e0e      	ldr	r6, [pc, #56]	; (8005ca0 <sbrk_aligned+0x3c>)
 8005c68:	460c      	mov	r4, r1
 8005c6a:	6831      	ldr	r1, [r6, #0]
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	b911      	cbnz	r1, 8005c76 <sbrk_aligned+0x12>
 8005c70:	f000 f8bc 	bl	8005dec <_sbrk_r>
 8005c74:	6030      	str	r0, [r6, #0]
 8005c76:	4621      	mov	r1, r4
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f000 f8b7 	bl	8005dec <_sbrk_r>
 8005c7e:	1c43      	adds	r3, r0, #1
 8005c80:	d00a      	beq.n	8005c98 <sbrk_aligned+0x34>
 8005c82:	1cc4      	adds	r4, r0, #3
 8005c84:	f024 0403 	bic.w	r4, r4, #3
 8005c88:	42a0      	cmp	r0, r4
 8005c8a:	d007      	beq.n	8005c9c <sbrk_aligned+0x38>
 8005c8c:	1a21      	subs	r1, r4, r0
 8005c8e:	4628      	mov	r0, r5
 8005c90:	f000 f8ac 	bl	8005dec <_sbrk_r>
 8005c94:	3001      	adds	r0, #1
 8005c96:	d101      	bne.n	8005c9c <sbrk_aligned+0x38>
 8005c98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	20003184 	.word	0x20003184

08005ca4 <_malloc_r>:
 8005ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca8:	1ccd      	adds	r5, r1, #3
 8005caa:	f025 0503 	bic.w	r5, r5, #3
 8005cae:	3508      	adds	r5, #8
 8005cb0:	2d0c      	cmp	r5, #12
 8005cb2:	bf38      	it	cc
 8005cb4:	250c      	movcc	r5, #12
 8005cb6:	2d00      	cmp	r5, #0
 8005cb8:	4607      	mov	r7, r0
 8005cba:	db01      	blt.n	8005cc0 <_malloc_r+0x1c>
 8005cbc:	42a9      	cmp	r1, r5
 8005cbe:	d905      	bls.n	8005ccc <_malloc_r+0x28>
 8005cc0:	230c      	movs	r3, #12
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	603b      	str	r3, [r7, #0]
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ccc:	4e2e      	ldr	r6, [pc, #184]	; (8005d88 <_malloc_r+0xe4>)
 8005cce:	f000 f89d 	bl	8005e0c <__malloc_lock>
 8005cd2:	6833      	ldr	r3, [r6, #0]
 8005cd4:	461c      	mov	r4, r3
 8005cd6:	bb34      	cbnz	r4, 8005d26 <_malloc_r+0x82>
 8005cd8:	4629      	mov	r1, r5
 8005cda:	4638      	mov	r0, r7
 8005cdc:	f7ff ffc2 	bl	8005c64 <sbrk_aligned>
 8005ce0:	1c43      	adds	r3, r0, #1
 8005ce2:	4604      	mov	r4, r0
 8005ce4:	d14d      	bne.n	8005d82 <_malloc_r+0xde>
 8005ce6:	6834      	ldr	r4, [r6, #0]
 8005ce8:	4626      	mov	r6, r4
 8005cea:	2e00      	cmp	r6, #0
 8005cec:	d140      	bne.n	8005d70 <_malloc_r+0xcc>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	eb04 0803 	add.w	r8, r4, r3
 8005cf8:	f000 f878 	bl	8005dec <_sbrk_r>
 8005cfc:	4580      	cmp	r8, r0
 8005cfe:	d13a      	bne.n	8005d76 <_malloc_r+0xd2>
 8005d00:	6821      	ldr	r1, [r4, #0]
 8005d02:	3503      	adds	r5, #3
 8005d04:	1a6d      	subs	r5, r5, r1
 8005d06:	f025 0503 	bic.w	r5, r5, #3
 8005d0a:	3508      	adds	r5, #8
 8005d0c:	2d0c      	cmp	r5, #12
 8005d0e:	bf38      	it	cc
 8005d10:	250c      	movcc	r5, #12
 8005d12:	4638      	mov	r0, r7
 8005d14:	4629      	mov	r1, r5
 8005d16:	f7ff ffa5 	bl	8005c64 <sbrk_aligned>
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d02b      	beq.n	8005d76 <_malloc_r+0xd2>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	442b      	add	r3, r5
 8005d22:	6023      	str	r3, [r4, #0]
 8005d24:	e00e      	b.n	8005d44 <_malloc_r+0xa0>
 8005d26:	6822      	ldr	r2, [r4, #0]
 8005d28:	1b52      	subs	r2, r2, r5
 8005d2a:	d41e      	bmi.n	8005d6a <_malloc_r+0xc6>
 8005d2c:	2a0b      	cmp	r2, #11
 8005d2e:	d916      	bls.n	8005d5e <_malloc_r+0xba>
 8005d30:	1961      	adds	r1, r4, r5
 8005d32:	42a3      	cmp	r3, r4
 8005d34:	6025      	str	r5, [r4, #0]
 8005d36:	bf18      	it	ne
 8005d38:	6059      	strne	r1, [r3, #4]
 8005d3a:	6863      	ldr	r3, [r4, #4]
 8005d3c:	bf08      	it	eq
 8005d3e:	6031      	streq	r1, [r6, #0]
 8005d40:	5162      	str	r2, [r4, r5]
 8005d42:	604b      	str	r3, [r1, #4]
 8005d44:	4638      	mov	r0, r7
 8005d46:	f104 060b 	add.w	r6, r4, #11
 8005d4a:	f000 f865 	bl	8005e18 <__malloc_unlock>
 8005d4e:	f026 0607 	bic.w	r6, r6, #7
 8005d52:	1d23      	adds	r3, r4, #4
 8005d54:	1af2      	subs	r2, r6, r3
 8005d56:	d0b6      	beq.n	8005cc6 <_malloc_r+0x22>
 8005d58:	1b9b      	subs	r3, r3, r6
 8005d5a:	50a3      	str	r3, [r4, r2]
 8005d5c:	e7b3      	b.n	8005cc6 <_malloc_r+0x22>
 8005d5e:	6862      	ldr	r2, [r4, #4]
 8005d60:	42a3      	cmp	r3, r4
 8005d62:	bf0c      	ite	eq
 8005d64:	6032      	streq	r2, [r6, #0]
 8005d66:	605a      	strne	r2, [r3, #4]
 8005d68:	e7ec      	b.n	8005d44 <_malloc_r+0xa0>
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	6864      	ldr	r4, [r4, #4]
 8005d6e:	e7b2      	b.n	8005cd6 <_malloc_r+0x32>
 8005d70:	4634      	mov	r4, r6
 8005d72:	6876      	ldr	r6, [r6, #4]
 8005d74:	e7b9      	b.n	8005cea <_malloc_r+0x46>
 8005d76:	230c      	movs	r3, #12
 8005d78:	4638      	mov	r0, r7
 8005d7a:	603b      	str	r3, [r7, #0]
 8005d7c:	f000 f84c 	bl	8005e18 <__malloc_unlock>
 8005d80:	e7a1      	b.n	8005cc6 <_malloc_r+0x22>
 8005d82:	6025      	str	r5, [r4, #0]
 8005d84:	e7de      	b.n	8005d44 <_malloc_r+0xa0>
 8005d86:	bf00      	nop
 8005d88:	20003180 	.word	0x20003180

08005d8c <_realloc_r>:
 8005d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d90:	4680      	mov	r8, r0
 8005d92:	4614      	mov	r4, r2
 8005d94:	460e      	mov	r6, r1
 8005d96:	b921      	cbnz	r1, 8005da2 <_realloc_r+0x16>
 8005d98:	4611      	mov	r1, r2
 8005d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d9e:	f7ff bf81 	b.w	8005ca4 <_malloc_r>
 8005da2:	b92a      	cbnz	r2, 8005db0 <_realloc_r+0x24>
 8005da4:	f7ff ff16 	bl	8005bd4 <_free_r>
 8005da8:	4625      	mov	r5, r4
 8005daa:	4628      	mov	r0, r5
 8005dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005db0:	f000 f838 	bl	8005e24 <_malloc_usable_size_r>
 8005db4:	4284      	cmp	r4, r0
 8005db6:	4607      	mov	r7, r0
 8005db8:	d802      	bhi.n	8005dc0 <_realloc_r+0x34>
 8005dba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005dbe:	d812      	bhi.n	8005de6 <_realloc_r+0x5a>
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	4640      	mov	r0, r8
 8005dc4:	f7ff ff6e 	bl	8005ca4 <_malloc_r>
 8005dc8:	4605      	mov	r5, r0
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d0ed      	beq.n	8005daa <_realloc_r+0x1e>
 8005dce:	42bc      	cmp	r4, r7
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	bf28      	it	cs
 8005dd6:	463a      	movcs	r2, r7
 8005dd8:	f7ff fb5e 	bl	8005498 <memcpy>
 8005ddc:	4631      	mov	r1, r6
 8005dde:	4640      	mov	r0, r8
 8005de0:	f7ff fef8 	bl	8005bd4 <_free_r>
 8005de4:	e7e1      	b.n	8005daa <_realloc_r+0x1e>
 8005de6:	4635      	mov	r5, r6
 8005de8:	e7df      	b.n	8005daa <_realloc_r+0x1e>
	...

08005dec <_sbrk_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	2300      	movs	r3, #0
 8005df0:	4d05      	ldr	r5, [pc, #20]	; (8005e08 <_sbrk_r+0x1c>)
 8005df2:	4604      	mov	r4, r0
 8005df4:	4608      	mov	r0, r1
 8005df6:	602b      	str	r3, [r5, #0]
 8005df8:	f7fb feae 	bl	8001b58 <_sbrk>
 8005dfc:	1c43      	adds	r3, r0, #1
 8005dfe:	d102      	bne.n	8005e06 <_sbrk_r+0x1a>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	b103      	cbz	r3, 8005e06 <_sbrk_r+0x1a>
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	bd38      	pop	{r3, r4, r5, pc}
 8005e08:	20003188 	.word	0x20003188

08005e0c <__malloc_lock>:
 8005e0c:	4801      	ldr	r0, [pc, #4]	; (8005e14 <__malloc_lock+0x8>)
 8005e0e:	f000 b811 	b.w	8005e34 <__retarget_lock_acquire_recursive>
 8005e12:	bf00      	nop
 8005e14:	2000318c 	.word	0x2000318c

08005e18 <__malloc_unlock>:
 8005e18:	4801      	ldr	r0, [pc, #4]	; (8005e20 <__malloc_unlock+0x8>)
 8005e1a:	f000 b80c 	b.w	8005e36 <__retarget_lock_release_recursive>
 8005e1e:	bf00      	nop
 8005e20:	2000318c 	.word	0x2000318c

08005e24 <_malloc_usable_size_r>:
 8005e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e28:	1f18      	subs	r0, r3, #4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	bfbc      	itt	lt
 8005e2e:	580b      	ldrlt	r3, [r1, r0]
 8005e30:	18c0      	addlt	r0, r0, r3
 8005e32:	4770      	bx	lr

08005e34 <__retarget_lock_acquire_recursive>:
 8005e34:	4770      	bx	lr

08005e36 <__retarget_lock_release_recursive>:
 8005e36:	4770      	bx	lr

08005e38 <_init>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr

08005e44 <_fini>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr
